paths:
  /api/v1/oauth2/token:
    post:
      operationId: login
      summary: Get Oauth Token
      description: |
        Returns a Token contains JWT
      tags:
        - Oauth 2
      responses:
        '200':
          description: Successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OauthToken'
              example:
                access_token: >-
                  eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJjbGllbnRfaWQiOiJmZmZmZmZmZi1mZmZmLTRmZmYtOGZmZi1mZmZmZmZmZmZmZmYiLCJ1c2VyX2lkIjoiZmZmZmZmZmYtZmZmZi00ZmZmLThmZmYtZmZmZmZmZmZmZmZmIiwiaWF0IjoxNTQ4NzQ0ODg2LCJleHAiOjE1NDg4MzEyODYsImp0aSI6ImZmZmZmZmZmLWZmZmYtNGZmZi04ZmZmLWZmZmZmZmZmZmZmZiJ9.Xh7tDNBCHUZBr_oqolwYUJVkSBm3BGiXli76qjldZD8
                token_type: Bearer
                refresh_token: >-
                  eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJjbGllbnRfaWQiOiJmZmZmZmZmZi1mZmZmLTRmZmYtOGZmZi1mZmZmZmZmZmZmZmYiLCJ1c2VyX2lkIjoiZmZmZmZmZmYtZmZmZi00ZmZmLThmZmYtZmZmZmZmZmZmZmZmIiwiaWF0IjoxNTQ4NzQ0ODg2LCJleHAiOjE1NDg4MzEyODYsImp0aSI6ImZmZmZmZmZmLWZmZmYtNGZmZi04ZmZmLWZmZmZmZmZmZmZmZiJ9.Xh7tDNBCHUZBr_oqolwYUJVkSBm3BGiXli76qjldZD8
                expires_in: 86400
                expires_at: '2019-01-01T16:58:51.639Z'
                issued_at: '2019-01-01T16:58:51.639Z'
                user_id: ffffffff-ffff-4fff-8fff-ffffffffffff
        '500':
          $ref: '#/components/responses/InternalServerError'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OauthPayload'
            example:
              client_id: ffffffff-ffff-4fff-8fff-ffffffffffff
              client_secret: ffffffff-ffff-4fff-8fff-ffffffffffff
              grant_type: password
              username: user@example.com
              password: ffffffff
        description: Oauth descriptor.
        required: true
      x-code-samples:
        - lang: Java_okhttp
          source: >-
            OkHttpClient client = new OkHttpClient();


            MediaType mediaType = MediaType.parse("application/json");

            RequestBody body = RequestBody.create(mediaType,
            "{\"client_id\":\"ffffffff-ffff-4fff-8fff-ffffffffffff\",\"client_secret\":\"ffffffff-ffff-4fff-8fff-ffffffffffff\",\"grant_type\":\"password\",\"username\":\"user@example.com\",\"password\":\"ffffffff\"}");

            Request request = new Request.Builder()
              .url("https://api.meetflo.com//api/v1/oauth2/token")
              .post(body)
              .addHeader("content-type", "application/json")
              .build();

            Response response = client.newCall(request).execute();
        - lang: Javascript_xhr
          source: |-
            var data = JSON.stringify({
              "client_id": "ffffffff-ffff-4fff-8fff-ffffffffffff",
              "client_secret": "ffffffff-ffff-4fff-8fff-ffffffffffff",
              "grant_type": "password",
              "username": "user@example.com",
              "password": "ffffffff"
            });

            var xhr = new XMLHttpRequest();
            xhr.withCredentials = true;

            xhr.addEventListener("readystatechange", function () {
              if (this.readyState === this.DONE) {
                console.log(this.responseText);
              }
            });

            xhr.open("POST", "https://api.meetflo.com//api/v1/oauth2/token");
            xhr.setRequestHeader("content-type", "application/json");

            xhr.send(data);
        - lang: Node_native
          source: >-
            var http = require("https");


            var options = {
              "method": "POST",
              "hostname": "api.meetflo.com",
              "port": null,
              "path": "//api/v1/oauth2/token",
              "headers": {
                "content-type": "application/json"
              }
            };


            var req = http.request(options, function (res) {
              var chunks = [];

              res.on("data", function (chunk) {
                chunks.push(chunk);
              });

              res.on("end", function () {
                var body = Buffer.concat(chunks);
                console.log(body.toString());
              });
            });


            req.write(JSON.stringify({ client_id:
            'ffffffff-ffff-4fff-8fff-ffffffffffff',
              client_secret: 'ffffffff-ffff-4fff-8fff-ffffffffffff',
              grant_type: 'password',
              username: 'user@example.com',
              password: 'ffffffff' }));
            req.end();
        - lang: Python_python3
          source: >-
            import http.client


            conn = http.client.HTTPSConnection("api.meetflo.com")


            payload =
            "{\"client_id\":\"ffffffff-ffff-4fff-8fff-ffffffffffff\",\"client_secret\":\"ffffffff-ffff-4fff-8fff-ffffffffffff\",\"grant_type\":\"password\",\"username\":\"user@example.com\",\"password\":\"ffffffff\"}"


            headers = { 'content-type': "application/json" }


            conn.request("POST", "//api/v1/oauth2/token", payload, headers)


            res = conn.getresponse()

            data = res.read()


            print(data.decode("utf-8"))
        - lang: Python_requests
          source: >-
            import requests


            url = "https://api.meetflo.com//api/v1/oauth2/token"


            payload =
            "{\"client_id\":\"ffffffff-ffff-4fff-8fff-ffffffffffff\",\"client_secret\":\"ffffffff-ffff-4fff-8fff-ffffffffffff\",\"grant_type\":\"password\",\"username\":\"user@example.com\",\"password\":\"ffffffff\"}"

            headers = {'content-type': 'application/json'}


            response = requests.request("POST", url, data=payload,
            headers=headers)


            print(response.text)
        - lang: Shell_curl
          source: |-
            curl --request POST \
              --url https://api.meetflo.com//api/v1/oauth2/token \
              --header 'content-type: application/json' \
              --data '{"client_id":"ffffffff-ffff-4fff-8fff-ffffffffffff","client_secret":"ffffffff-ffff-4fff-8fff-ffffffffffff","grant_type":"password","username":"user@example.com","password":"ffffffff"}'
  '/api/v1/awaymode/icd/{icd_id}/irrigation':
    get:
      operationId: getIrrigation
      security:
        - OAuth2:
            - user
      summary: Get Irrigation Schedule
      description: |
        Retrieves a computed irrigation schedule for the device
      tags:
        - Away Mode
      parameters:
        - $ref: '#/components/parameters/Authorization'
        - name: icd_id
          in: path
          description: Unique pairing ID of the device
          required: true
          schema:
            $ref: '#/components/schemas/Uuid'
      responses:
        '200':
          description: Successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Irrigation'
              example:
                device_id: ffffffffffff
                times:
                  - - '0:48:19'
                    - '1:49:20'
                  - - '11:08:09'
                    - '11:35:12'
                status: schedule_found
        '500':
          $ref: '#/components/responses/InternalServerError'
      x-code-samples:
        - lang: Java_okhttp
          source: |-
            OkHttpClient client = new OkHttpClient();

            Request request = new Request.Builder()
              .url("https://api.meetflo.com//api/v1/awaymode/icd/%7Bicd_id%7D/irrigation")
              .get()
              .addHeader("authorization", "Bearer REPLACE_BEARER_TOKEN")
              .build();

            Response response = client.newCall(request).execute();
        - lang: Javascript_xhr
          source: >-
            var data = null;


            var xhr = new XMLHttpRequest();

            xhr.withCredentials = true;


            xhr.addEventListener("readystatechange", function () {
              if (this.readyState === this.DONE) {
                console.log(this.responseText);
              }
            });


            xhr.open("GET",
            "https://api.meetflo.com//api/v1/awaymode/icd/%7Bicd_id%7D/irrigation");

            xhr.setRequestHeader("authorization", "Bearer
            REPLACE_BEARER_TOKEN");


            xhr.send(data);
        - lang: Node_native
          source: |-
            var http = require("https");

            var options = {
              "method": "GET",
              "hostname": "api.meetflo.com",
              "port": null,
              "path": "//api/v1/awaymode/icd/%7Bicd_id%7D/irrigation",
              "headers": {
                "authorization": "Bearer REPLACE_BEARER_TOKEN"
              }
            };

            var req = http.request(options, function (res) {
              var chunks = [];

              res.on("data", function (chunk) {
                chunks.push(chunk);
              });

              res.on("end", function () {
                var body = Buffer.concat(chunks);
                console.log(body.toString());
              });
            });

            req.end();
        - lang: Python_python3
          source: >-
            import http.client


            conn = http.client.HTTPSConnection("api.meetflo.com")


            headers = { 'authorization': "Bearer REPLACE_BEARER_TOKEN" }


            conn.request("GET", "//api/v1/awaymode/icd/%7Bicd_id%7D/irrigation",
            headers=headers)


            res = conn.getresponse()

            data = res.read()


            print(data.decode("utf-8"))
        - lang: Python_requests
          source: >-
            import requests


            url =
            "https://api.meetflo.com//api/v1/awaymode/icd/%7Bicd_id%7D/irrigation"


            headers = {'authorization': 'Bearer REPLACE_BEARER_TOKEN'}


            response = requests.request("GET", url, headers=headers)


            print(response.text)
        - lang: Shell_curl
          source: |-
            curl --request GET \
              --url https://api.meetflo.com//api/v1/awaymode/icd/%7Bicd_id%7D/irrigation \
              --header 'authorization: Bearer REPLACE_BEARER_TOKEN'

  '/api/v1/awaymode/icd/{icd_id}/enable':
    post:
      operationId: enableIrrigation
      security:
        - OAuth2:
            - user
      summary: Apply Irrigation Schedule
      description: |
        Applies the irrigation schedule for away mode to the device.
      tags:
        - Away Mode
      parameters:
        - $ref: '#/components/parameters/Authorization'
        - name: icd_id
          in: path
          description: Unique pairing ID of the device
          required: true
          schema:
            $ref: '#/components/schemas/Uuid'
      responses:
        '200':
          description: Successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Irrigation'
              example:
                device_id: ffffffffffff
                times:
                  - - '0:48:19'
                    - '1:49:20'
                  - - '11:08:09'
                    - '11:35:12'
                status: schedule_found
        '500':
          $ref: '#/components/responses/InternalServerError'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Irrigation'
            example:
              device_id: ffffffffffff
              times:
                - - '0:48:19'
                  - '1:49:20'
                - - '11:08:09'
                  - '11:35:12'
              status: schedule_found
        description: |
          A list of paired start and end times of irrigation events.
        required: true
      x-code-samples:
        - lang: Java_okhttp
          source: >-
            OkHttpClient client = new OkHttpClient();


            MediaType mediaType = MediaType.parse("application/json");

            RequestBody body = RequestBody.create(mediaType,
            "{\"device_id\":\"ffffffffffff\",\"times\":[[\"0:48:19\",\"1:49:20\"],[\"11:08:09\",\"11:35:12\"]],\"status\":\"schedule_found\"}");

            Request request = new Request.Builder()
              .url("https://api.meetflo.com//api/v1/awaymode/icd/%7Bicd_id%7D/enable")
              .post(body)
              .addHeader("content-type", "application/json")
              .addHeader("authorization", "Bearer REPLACE_BEARER_TOKEN")
              .build();

            Response response = client.newCall(request).execute();
        - lang: Javascript_xhr
          source: >-
            var data = JSON.stringify({
              "device_id": "ffffffffffff",
              "times": [
                [
                  "0:48:19",
                  "1:49:20"
                ],
                [
                  "11:08:09",
                  "11:35:12"
                ]
              ],
              "status": "schedule_found"
            });


            var xhr = new XMLHttpRequest();

            xhr.withCredentials = true;


            xhr.addEventListener("readystatechange", function () {
              if (this.readyState === this.DONE) {
                console.log(this.responseText);
              }
            });


            xhr.open("POST",
            "https://api.meetflo.com//api/v1/awaymode/icd/%7Bicd_id%7D/enable");

            xhr.setRequestHeader("content-type", "application/json");

            xhr.setRequestHeader("authorization", "Bearer
            REPLACE_BEARER_TOKEN");


            xhr.send(data);
        - lang: Node_native
          source: |-
            var http = require("https");

            var options = {
              "method": "POST",
              "hostname": "api.meetflo.com",
              "port": null,
              "path": "//api/v1/awaymode/icd/%7Bicd_id%7D/enable",
              "headers": {
                "content-type": "application/json",
                "authorization": "Bearer REPLACE_BEARER_TOKEN"
              }
            };

            var req = http.request(options, function (res) {
              var chunks = [];

              res.on("data", function (chunk) {
                chunks.push(chunk);
              });

              res.on("end", function () {
                var body = Buffer.concat(chunks);
                console.log(body.toString());
              });
            });

            req.write(JSON.stringify({ device_id: 'ffffffffffff',
              times: [ [ '0:48:19', '1:49:20' ], [ '11:08:09', '11:35:12' ] ],
              status: 'schedule_found' }));
            req.end();
        - lang: Python_python3
          source: >-
            import http.client


            conn = http.client.HTTPSConnection("api.meetflo.com")


            payload =
            "{\"device_id\":\"ffffffffffff\",\"times\":[[\"0:48:19\",\"1:49:20\"],[\"11:08:09\",\"11:35:12\"]],\"status\":\"schedule_found\"}"


            headers = {
                'content-type': "application/json",
                'authorization': "Bearer REPLACE_BEARER_TOKEN"
                }

            conn.request("POST", "//api/v1/awaymode/icd/%7Bicd_id%7D/enable",
            payload, headers)


            res = conn.getresponse()

            data = res.read()


            print(data.decode("utf-8"))
        - lang: Python_requests
          source: >-
            import requests


            url =
            "https://api.meetflo.com//api/v1/awaymode/icd/%7Bicd_id%7D/enable"


            payload =
            "{\"device_id\":\"ffffffffffff\",\"times\":[[\"0:48:19\",\"1:49:20\"],[\"11:08:09\",\"11:35:12\"]],\"status\":\"schedule_found\"}"

            headers = {
                'content-type': "application/json",
                'authorization': "Bearer REPLACE_BEARER_TOKEN"
                }

            response = requests.request("POST", url, data=payload,
            headers=headers)


            print(response.text)
        - lang: Shell_curl
          source: |-
            curl --request POST \
              --url https://api.meetflo.com//api/v1/awaymode/icd/%7Bicd_id%7D/enable \
              --header 'authorization: Bearer REPLACE_BEARER_TOKEN' \
              --header 'content-type: application/json' \
              --data '{"device_id":"ffffffffffff","times":[["0:48:19","1:49:20"],["11:08:09","11:35:12"]],"status":"schedule_found"}'

  '/api/v1/awaymode/icd/{icd_id}/disable':
    post:
      operationId: disableIrrigation
      security:
        - OAuth2:
            - user
      summary: Remove Irrigation Schedule
      description: |
        Removes the irrigation schedule for away mode from the device.
      tags:
        - Away Mode
      parameters:
        - $ref: '#/components/parameters/Authorization'
        - name: icd_id
          in: path
          description: Unique pairing ID of the device
          required: true
          schema:
            $ref: '#/components/schemas/Uuid'
      responses:
        '200':
          description: Successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Irrigation'
              example:
                device_id: ffffffffffff
                times:
                  - - '0:48:19'
                    - '1:49:20'
                  - - '11:08:09'
                    - '11:35:12'
                status: schedule_found
        '500':
          $ref: '#/components/responses/InternalServerError'
      x-code-samples:
        - lang: Java_okhttp
          source: |-
            OkHttpClient client = new OkHttpClient();

            Request request = new Request.Builder()
              .url("https://api.meetflo.com//api/v1/awaymode/icd/%7Bicd_id%7D/disable")
              .post(null)
              .addHeader("authorization", "Bearer REPLACE_BEARER_TOKEN")
              .build();

            Response response = client.newCall(request).execute();
        - lang: Javascript_xhr
          source: >-
            var data = null;


            var xhr = new XMLHttpRequest();

            xhr.withCredentials = true;


            xhr.addEventListener("readystatechange", function () {
              if (this.readyState === this.DONE) {
                console.log(this.responseText);
              }
            });


            xhr.open("POST",
            "https://api.meetflo.com//api/v1/awaymode/icd/%7Bicd_id%7D/disable");

            xhr.setRequestHeader("authorization", "Bearer
            REPLACE_BEARER_TOKEN");


            xhr.send(data);
        - lang: Node_native
          source: |-
            var http = require("https");

            var options = {
              "method": "POST",
              "hostname": "api.meetflo.com",
              "port": null,
              "path": "//api/v1/awaymode/icd/%7Bicd_id%7D/disable",
              "headers": {
                "authorization": "Bearer REPLACE_BEARER_TOKEN"
              }
            };

            var req = http.request(options, function (res) {
              var chunks = [];

              res.on("data", function (chunk) {
                chunks.push(chunk);
              });

              res.on("end", function () {
                var body = Buffer.concat(chunks);
                console.log(body.toString());
              });
            });

            req.end();
        - lang: Python_python3
          source: >-
            import http.client


            conn = http.client.HTTPSConnection("api.meetflo.com")


            headers = { 'authorization': "Bearer REPLACE_BEARER_TOKEN" }


            conn.request("POST", "//api/v1/awaymode/icd/%7Bicd_id%7D/disable",
            headers=headers)


            res = conn.getresponse()

            data = res.read()


            print(data.decode("utf-8"))
        - lang: Python_requests
          source: >-
            import requests


            url =
            "https://api.meetflo.com//api/v1/awaymode/icd/%7Bicd_id%7D/disable"


            headers = {'authorization': 'Bearer REPLACE_BEARER_TOKEN'}


            response = requests.request("POST", url, headers=headers)


            print(response.text)
        - lang: Shell_curl
          source: |-
            curl --request POST \
              --url https://api.meetflo.com//api/v1/awaymode/icd/%7Bicd_id%7D/disable \
              --header 'authorization: Bearer REPLACE_BEARER_TOKEN'
  '/api/v1/awaymode/icd/{icd_id}':
    get:
      operationId: getUsedIrrigation
      security:
        - OAuth2:
            - user
      summary: Get Used Irrigation Schedule
      description: >
        Retrieves whether or not the irrigation schedule is currently being used
        by the device. The times returned by this endpoint are for internal
        auditing purposes only. Only times retrieved from the device or from the
        /irrigation endpoint should be trusted.
      tags:
        - Away Mode
      parameters:
        - $ref: '#/components/parameters/Authorization'
        - name: icd_id
          in: path
          description: Unique pairing ID of the device
          required: true
          schema:
            $ref: '#/components/schemas/Uuid'
      responses:
        '200':
          description: Successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Irrigation'
              example:
                device_id: ffffffffffff
                times:
                  - - '0:48:19'
                    - '1:49:20'
                  - - '11:08:09'
                    - '11:35:12'
                status: schedule_found
        '500':
          $ref: '#/components/responses/InternalServerError'
      x-code-samples:
        - lang: Java_okhttp
          source: |-
            OkHttpClient client = new OkHttpClient();

            Request request = new Request.Builder()
              .url("https://api.meetflo.com//api/v1/awaymode/icd/%7Bicd_id%7D")
              .get()
              .addHeader("authorization", "Bearer REPLACE_BEARER_TOKEN")
              .build();

            Response response = client.newCall(request).execute();
        - lang: Javascript_xhr
          source: >-
            var data = null;


            var xhr = new XMLHttpRequest();

            xhr.withCredentials = true;


            xhr.addEventListener("readystatechange", function () {
              if (this.readyState === this.DONE) {
                console.log(this.responseText);
              }
            });


            xhr.open("GET",
            "https://api.meetflo.com//api/v1/awaymode/icd/%7Bicd_id%7D");

            xhr.setRequestHeader("authorization", "Bearer
            REPLACE_BEARER_TOKEN");


            xhr.send(data);
        - lang: Node_native
          source: |-
            var http = require("https");

            var options = {
              "method": "GET",
              "hostname": "api.meetflo.com",
              "port": null,
              "path": "//api/v1/awaymode/icd/%7Bicd_id%7D",
              "headers": {
                "authorization": "Bearer REPLACE_BEARER_TOKEN"
              }
            };

            var req = http.request(options, function (res) {
              var chunks = [];

              res.on("data", function (chunk) {
                chunks.push(chunk);
              });

              res.on("end", function () {
                var body = Buffer.concat(chunks);
                console.log(body.toString());
              });
            });

            req.end();
        - lang: Python_python3
          source: >-
            import http.client


            conn = http.client.HTTPSConnection("api.meetflo.com")


            headers = { 'authorization': "Bearer REPLACE_BEARER_TOKEN" }


            conn.request("GET", "//api/v1/awaymode/icd/%7Bicd_id%7D",
            headers=headers)


            res = conn.getresponse()

            data = res.read()


            print(data.decode("utf-8"))
        - lang: Python_requests
          source: |-
            import requests

            url = "https://api.meetflo.com//api/v1/awaymode/icd/%7Bicd_id%7D"

            headers = {'authorization': 'Bearer REPLACE_BEARER_TOKEN'}

            response = requests.request("GET", url, headers=headers)

            print(response.text)
        - lang: Shell_curl
          source: |-
            curl --request GET \
              --url https://api.meetflo.com//api/v1/awaymode/icd/%7Bicd_id%7D \
              --header 'authorization: Bearer REPLACE_BEARER_TOKEN'
  '/api/v1/pairing/qr/icd/{icd_id}':
    get:
      operationId: getQrDataByIcdId
      security:
        - OAuth2:
            - user
      summary: Get QrCode Data
      description: >
        Retrieves the same data as scanning a QR code for an already paired
        device. To be used when reconnecting an already paired Flo device to
        WiFi or reinitializing an already paired Flo device after a factory
        reset.
      tags:
        - Pairing
      parameters:
        - $ref: '#/components/parameters/Authorization'
        - name: icd_id
          in: path
          description: Unique pairing ID of the device
          required: true
          schema:
            $ref: '#/components/schemas/Uuid'
      responses:
        '200':
          description: Successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Certificates'
              example:
                id: ffffffff-ffff-4fff-8fff-ffffffffffff
                ap_name: Flo-0000
                ap_password: ffffffff
                device_id: ffffffffffff
                login_token: >-
                  eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJjbGllbnRfaWQiOiJmZmZmZmZmZi1mZmZmLTRmZmYtOGZmZi1mZmZmZmZmZmZmZmYiLCJ1c2VyX2lkIjoiZmZmZmZmZmYtZmZmZi00ZmZmLThmZmYtZmZmZmZmZmZmZmZmIiwiaWF0IjoxNTQ4NzQ0ODg2LCJleHAiOjE1NDg4MzEyODYsImp0aSI6ImZmZmZmZmZmLWZmZmYtNGZmZi04ZmZmLWZmZmZmZmZmZmZmZiJ9.Xh7tDNBCHUZBr_oqolwYUJVkSBm3BGiXli76qjldZD8
                client_cert: >-
                  LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUVYRENDQTBTZ0F3SUJBZ0lFT0dPNVpqQU5CZ2txaGtpRzl3MEJBUVVGQURDQnRERVVNQklHQTFVRUNoTUwKUlc1MGNuVnpkQzV1WlhReFFEQStCZ05WQkFzVU4zZDNkeTVsYm5SeWRYTjBMbTVsZEM5RFVGTmZNakEwT0NCcApibU52Y25BdUlHSjVJSEpsWmk0Z0tHeHBiV2wwY3lCc2FXRmlMaWt4SlRBakJnTlZCQXNUSENoaktTQXhPVGs1CklFVnVkSEoxYzNRdWJtVjBJRXhwYldsMFpXUXhNekF4QmdOVkJBTVRLa1Z1ZEhKMWMzUXVibVYwSUVObGNuUnAKWm1sallYUnBiMjRnUVhWMGFHOXlhWFI1SUNneU1EUTRLVEFlRncwNU9URXlNalF4TnpVd05URmFGdzB4T1RFeQpNalF4T0RJd05URmFNSUcwTVJRd0VnWURWUVFLRXd0RmJuUnlkWE4wTG01bGRERkFNRDRHQTFVRUN4UTNkM2QzCkxtVnVkSEoxYzNRdWJtVjBMME5RVTE4eU1EUTRJR2x1WTI5eWNDNGdZbmtnY21WbUxpQW9iR2x0YVhSeklHeHAKWVdJdUtURWxNQ01HQTFVRUN4TWNLR01wSURFNU9Ua2dSVzUwY25WemRDNXVaWFFnVEdsdGFYUmxaREV6TURFRwpBMVVFQXhNcVJXNTBjblZ6ZEM1dVpYUWdRMlZ5ZEdsbWFXTmhkR2x2YmlCQmRYUm9iM0pwZEhrZ0tESXdORGdwCk1JSUJJakFOQmdrcWhraUc5dzBCQVFFRkFBT0NBUThBTUlJQkNnS0NBUUVBclUxTHFSS0dzdXFqSUFjVkZtUXEKSzB2UnZ3dEtUWTd0Z0hhbFo3ZDRRTUJ6UXNob3dOdFRLOTFldUhhWU5aT0xHcDE4RXpvT0gxdTNIcy9sSkJRZQpzWUdwalgyNHpHdExBL0VDRE55cnBVQWtBSDkwbEtHZENDbXppQXYxaDNlZFZjM2t3MzdYYW1TcmhSU0dsVnVYCk1sQnZQY2k2Wmd6ai9MMjRTY0YyaVVrWi9jQ292WW1qWnkvR243eHhHV0M0TGVrc3laQjJabnVVNHE5NDFtVlQKWFR6V25MTFBLUVA1TDZSUXN0Ukl6Z1V5VllyOXNtUk1EdVNZQjNYYmY5KzVDRlZnaFRBcCtYdElwR21HNHpVLwpIb1pkZW5vVnZlOEFqaFVpVkJjQWtDYVR2QTVKYUpHLytFZlRuWlZDd1E1TjMyOG16OE1ZSVdKbVEzRFcxY0FICjRRSURBUUFCbzNRd2NqQVJCZ2xnaGtnQmh2aENBUUVFQkFNQ0FBY3dId1lEVlIwakJCZ3dGb0FVVmVTQjBSR0EKdnRpSnVRaWpNZm1oSkFrV3VYQXdIUVlEVlIwT0JCWUVGRlhrZ2RFUmdMN1lpYmtJb3pINW9TUUpGcmx3TUIwRwpDU3FHU0liMmZRZEJBQVFRTUE0YkNGWTFMakE2TkM0d0F3SUVrREFOQmdrcWhraUc5dzBCQVFVRkFBT0NBUUVBCldVZXNJWVNLRjhtY2lWTWV1b0NGR3NZOFRqNnhuTFo4eHBKZEdHUUM0OU1HQ0JGaGZHUGpLNTB4QTNCMjBxTW8Kb1BTN21tTno3VzNsS3R2dEZLa3J4allSMEN2ckI0dWwycDVjR1oxV0V2VlVLY2dGN2JJU0tvMzBBeHYvNTVJUQpoN0E2dGNPZEJUY1NvOGYwRmJuVnBEa1dtMU02STVIeHFJS2lhb2hvd1hrQ0lyeXFwdGF1MzdBVVg3aUgwTjE4CmYzdi9yeHpQNXRzSHJWN2JoWjNRS3cwejJ3VFI1a2xBRXl0Mit6N3BuSWtQRmM0WXNJVjRJVTlyVHc3Nk5tZk4KQi9ML0NORGkzdG0vS3ErNGg0WWhQQVRLdDVSb2Y4ODg2WmpYT1Avc3dObFE4QzVMV0s1R2I5QXV3MkRhY2xWeQp2VXhGbm1HNnY0U0JrZ1BSMG1sOHhRPT0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
                client_key: >-
                  LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlDV3dJQkFBS0JnUURNeGIvUHZSQVc5YkJ0TzA0M2JXMFpMRWNCZS93bWJEbG52bm4rR1dENkpRdVpjN3pWCldGN0FTSXkvb3BZY2lxS1FXOEp6cmwvZnVoWm1EaHZ6ZFpRMlViTEtKUnFEbFRQdFptdDFvWnNjL0F0WVBzWXYKZVp6OWpxcmNEK1E3dXNZYnpqTnV1UW9qR24vQXg1K3QyUmNjb3QzZFFuVFJtcGpVTDY4bXdzeVord0lEQVFBQgpBb0dBUmc3cC94TDZMRURHcWJoK25Dd09CV3pHcGxWYkFYSkplWnNMZGNvTkNjZ2UzZE5oS2NUZ05mMGNXbnd2CnkzZ0xBa1RDbEgxMlE3OFE1cjJ4Qm15VjFocXlFYjlscklxQWxTUzVHam5UV1doeXpzcGNqS1pXUjVQQWpPWW8KTGx4TnBDZWdXRWpPVXBENEx3Zjl5akV1K3hyREdWbXNMRjBQUFJrQU0zMnFoOUVDUVFEMXZ6eUZyL2hTbjdSaAo2SUZGYkxBVmtJdnN5KzFDYTd0RjYvN2J5SENkd3FTNW9VS2FZKzlEQXIwVEUrYnI4N04ySXpVQ1U1WDdDdjc0Cm0rWWlxaEJsQWtFQTFWRGZwcThwdXlJcTJGNkZ0eDB4cFlNdjZYS2h1UnlBemlUL0R6SUJkRlZlT01JZ1V1azAKN0U0VzBOL2dEbVVtRVFGbDNIWXpVZmRaclRVS3pqenEzd0pBWmZsc0tPR0RmdTJza1hCRXJFVlVzQzRpRWlueApFejNYSVVXenBRb0F5VVlxeXFqREZZUGdsZ0w5Nkh1NnVEQ1JTTFdGV3FqS3RMaTBZdjkyT080dkRRSkFTdUFrCllRSERDQ2lxR1dDMFZ0NHNld2hkWFBnYnhEbzVEQ0w0VklFYytaU3RpZ2E2Q2VCSjcxaEpzZStqV2VvdlBuRGIKTEZOaEdEaFdoZkhFWlRnRXlRSkFYTnV5cERTNWw3M0xQdmMreWR1UFppTkV0d2FlOUtiV2FaVXdDNjgzYTgxcwpta1Q3dXJvTll5SzlwdFpyei9MTUpKb3RrcUNqaWdYYUEza3V6dU5VQ1E9PQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQo
                server_cert: >-
                  LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUVYRENDQTBTZ0F3SUJBZ0lFT0dPNVpqQU5CZ2txaGtpRzl3MEJBUVVGQURDQnRERVVNQklHQTFVRUNoTUwKUlc1MGNuVnpkQzV1WlhReFFEQStCZ05WQkFzVU4zZDNkeTVsYm5SeWRYTjBMbTVsZEM5RFVGTmZNakEwT0NCcApibU52Y25BdUlHSjVJSEpsWmk0Z0tHeHBiV2wwY3lCc2FXRmlMaWt4SlRBakJnTlZCQXNUSENoaktTQXhPVGs1CklFVnVkSEoxYzNRdWJtVjBJRXhwYldsMFpXUXhNekF4QmdOVkJBTVRLa1Z1ZEhKMWMzUXVibVYwSUVObGNuUnAKWm1sallYUnBiMjRnUVhWMGFHOXlhWFI1SUNneU1EUTRLVEFlRncwNU9URXlNalF4TnpVd05URmFGdzB4T1RFeQpNalF4T0RJd05URmFNSUcwTVJRd0VnWURWUVFLRXd0RmJuUnlkWE4wTG01bGRERkFNRDRHQTFVRUN4UTNkM2QzCkxtVnVkSEoxYzNRdWJtVjBMME5RVTE4eU1EUTRJR2x1WTI5eWNDNGdZbmtnY21WbUxpQW9iR2x0YVhSeklHeHAKWVdJdUtURWxNQ01HQTFVRUN4TWNLR01wSURFNU9Ua2dSVzUwY25WemRDNXVaWFFnVEdsdGFYUmxaREV6TURFRwpBMVVFQXhNcVJXNTBjblZ6ZEM1dVpYUWdRMlZ5ZEdsbWFXTmhkR2x2YmlCQmRYUm9iM0pwZEhrZ0tESXdORGdwCk1JSUJJakFOQmdrcWhraUc5dzBCQVFFRkFBT0NBUThBTUlJQkNnS0NBUUVBclUxTHFSS0dzdXFqSUFjVkZtUXEKSzB2UnZ3dEtUWTd0Z0hhbFo3ZDRRTUJ6UXNob3dOdFRLOTFldUhhWU5aT0xHcDE4RXpvT0gxdTNIcy9sSkJRZQpzWUdwalgyNHpHdExBL0VDRE55cnBVQWtBSDkwbEtHZENDbXppQXYxaDNlZFZjM2t3MzdYYW1TcmhSU0dsVnVYCk1sQnZQY2k2Wmd6ai9MMjRTY0YyaVVrWi9jQ292WW1qWnkvR243eHhHV0M0TGVrc3laQjJabnVVNHE5NDFtVlQKWFR6V25MTFBLUVA1TDZSUXN0Ukl6Z1V5VllyOXNtUk1EdVNZQjNYYmY5KzVDRlZnaFRBcCtYdElwR21HNHpVLwpIb1pkZW5vVnZlOEFqaFVpVkJjQWtDYVR2QTVKYUpHLytFZlRuWlZDd1E1TjMyOG16OE1ZSVdKbVEzRFcxY0FICjRRSURBUUFCbzNRd2NqQVJCZ2xnaGtnQmh2aENBUUVFQkFNQ0FBY3dId1lEVlIwakJCZ3dGb0FVVmVTQjBSR0EKdnRpSnVRaWpNZm1oSkFrV3VYQXdIUVlEVlIwT0JCWUVGRlhrZ2RFUmdMN1lpYmtJb3pINW9TUUpGcmx3TUIwRwpDU3FHU0liMmZRZEJBQVFRTUE0YkNGWTFMakE2TkM0d0F3SUVrREFOQmdrcWhraUc5dzBCQVFVRkFBT0NBUUVBCldVZXNJWVNLRjhtY2lWTWV1b0NGR3NZOFRqNnhuTFo4eHBKZEdHUUM0OU1HQ0JGaGZHUGpLNTB4QTNCMjBxTW8Kb1BTN21tTno3VzNsS3R2dEZLa3J4allSMEN2ckI0dWwycDVjR1oxV0V2VlVLY2dGN2JJU0tvMzBBeHYvNTVJUQpoN0E2dGNPZEJUY1NvOGYwRmJuVnBEa1dtMU02STVIeHFJS2lhb2hvd1hrQ0lyeXFwdGF1MzdBVVg3aUgwTjE4CmYzdi9yeHpQNXRzSHJWN2JoWjNRS3cwejJ3VFI1a2xBRXl0Mit6N3BuSWtQRmM0WXNJVjRJVTlyVHc3Nk5tZk4KQi9ML0NORGkzdG0vS3ErNGg0WWhQQVRLdDVSb2Y4ODg2WmpYT1Avc3dObFE4QzVMV0s1R2I5QXV3MkRhY2xWeQp2VXhGbm1HNnY0U0JrZ1BSMG1sOHhRPT0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
                websocket_cert: >-
                  LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUVYRENDQTBTZ0F3SUJBZ0lFT0dPNVpqQU5CZ2txaGtpRzl3MEJBUVVGQURDQnRERVVNQklHQTFVRUNoTUwKUlc1MGNuVnpkQzV1WlhReFFEQStCZ05WQkFzVU4zZDNkeTVsYm5SeWRYTjBMbTVsZEM5RFVGTmZNakEwT0NCcApibU52Y25BdUlHSjVJSEpsWmk0Z0tHeHBiV2wwY3lCc2FXRmlMaWt4SlRBakJnTlZCQXNUSENoaktTQXhPVGs1CklFVnVkSEoxYzNRdWJtVjBJRXhwYldsMFpXUXhNekF4QmdOVkJBTVRLa1Z1ZEhKMWMzUXVibVYwSUVObGNuUnAKWm1sallYUnBiMjRnUVhWMGFHOXlhWFI1SUNneU1EUTRLVEFlRncwNU9URXlNalF4TnpVd05URmFGdzB4T1RFeQpNalF4T0RJd05URmFNSUcwTVJRd0VnWURWUVFLRXd0RmJuUnlkWE4wTG01bGRERkFNRDRHQTFVRUN4UTNkM2QzCkxtVnVkSEoxYzNRdWJtVjBMME5RVTE4eU1EUTRJR2x1WTI5eWNDNGdZbmtnY21WbUxpQW9iR2x0YVhSeklHeHAKWVdJdUtURWxNQ01HQTFVRUN4TWNLR01wSURFNU9Ua2dSVzUwY25WemRDNXVaWFFnVEdsdGFYUmxaREV6TURFRwpBMVVFQXhNcVJXNTBjblZ6ZEM1dVpYUWdRMlZ5ZEdsbWFXTmhkR2x2YmlCQmRYUm9iM0pwZEhrZ0tESXdORGdwCk1JSUJJakFOQmdrcWhraUc5dzBCQVFFRkFBT0NBUThBTUlJQkNnS0NBUUVBclUxTHFSS0dzdXFqSUFjVkZtUXEKSzB2UnZ3dEtUWTd0Z0hhbFo3ZDRRTUJ6UXNob3dOdFRLOTFldUhhWU5aT0xHcDE4RXpvT0gxdTNIcy9sSkJRZQpzWUdwalgyNHpHdExBL0VDRE55cnBVQWtBSDkwbEtHZENDbXppQXYxaDNlZFZjM2t3MzdYYW1TcmhSU0dsVnVYCk1sQnZQY2k2Wmd6ai9MMjRTY0YyaVVrWi9jQ292WW1qWnkvR243eHhHV0M0TGVrc3laQjJabnVVNHE5NDFtVlQKWFR6V25MTFBLUVA1TDZSUXN0Ukl6Z1V5VllyOXNtUk1EdVNZQjNYYmY5KzVDRlZnaFRBcCtYdElwR21HNHpVLwpIb1pkZW5vVnZlOEFqaFVpVkJjQWtDYVR2QTVKYUpHLytFZlRuWlZDd1E1TjMyOG16OE1ZSVdKbVEzRFcxY0FICjRRSURBUUFCbzNRd2NqQVJCZ2xnaGtnQmh2aENBUUVFQkFNQ0FBY3dId1lEVlIwakJCZ3dGb0FVVmVTQjBSR0EKdnRpSnVRaWpNZm1oSkFrV3VYQXdIUVlEVlIwT0JCWUVGRlhrZ2RFUmdMN1lpYmtJb3pINW9TUUpGcmx3TUIwRwpDU3FHU0liMmZRZEJBQVFRTUE0YkNGWTFMakE2TkM0d0F3SUVrREFOQmdrcWhraUc5dzBCQVFVRkFBT0NBUUVBCldVZXNJWVNLRjhtY2lWTWV1b0NGR3NZOFRqNnhuTFo4eHBKZEdHUUM0OU1HQ0JGaGZHUGpLNTB4QTNCMjBxTW8Kb1BTN21tTno3VzNsS3R2dEZLa3J4allSMEN2ckI0dWwycDVjR1oxV0V2VlVLY2dGN2JJU0tvMzBBeHYvNTVJUQpoN0E2dGNPZEJUY1NvOGYwRmJuVnBEa1dtMU02STVIeHFJS2lhb2hvd1hrQ0lyeXFwdGF1MzdBVVg3aUgwTjE4CmYzdi9yeHpQNXRzSHJWN2JoWjNRS3cwejJ3VFI1a2xBRXl0Mit6N3BuSWtQRmM0WXNJVjRJVTlyVHc3Nk5tZk4KQi9ML0NORGkzdG0vS3ErNGg0WWhQQVRLdDVSb2Y4ODg2WmpYT1Avc3dObFE4QzVMV0s1R2I5QXV3MkRhY2xWeQp2VXhGbm1HNnY0U0JrZ1BSMG1sOHhRPT0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
                websocket_cert_der: >-
                  MIIEXDCCA0SgAwIBAgIEOGO5ZjANBgkqhkiG9w0BAQUFADCBtDEUMBIGA1UEChMLRW50cnVzdC5uZXQxQDA+BgNVBAsUN3d3dy5lbnRydXN0Lm5ldC9DUFNfMjA0OCBpbmNvcnAuIGJ5IHJlZi4gKGxpbWl0cyBsaWFiLikxJTAjBgNVBAsTHChjKSAxOTk5IEVudHJ1c3QubmV0IExpbWl0ZWQxMzAxBgNVBAMTKkVudHJ1c3QubmV0IENlcnRpZmljYXRpb24gQXV0aG9yaXR5ICgyMDQ4KTAeFw05OTEyMjQxNzUwNTFaFw0xOTEyMjQxODIwNTFaMIG0MRQwEgYDVQQKEwtFbnRydXN0Lm5ldDFAMD4GA1UECxQ3d3d3LmVudHJ1c3QubmV0L0NQU18yMDQ4IGluY29ycC4gYnkgcmVmLiAobGltaXRzIGxpYWIuKTElMCMGA1UECxMcKGMpIDE5OTkgRW50cnVzdC5uZXQgTGltaXRlZDEzMDEGA1UEAxMqRW50cnVzdC5uZXQgQ2VydGlmaWNhdGlvbiBBdXRob3JpdHkgKDIwNDgpMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEArU1LqRKGsuqjIAcVFmQqK0vRvwtKTY7tgHalZ7d4QMBzQshowNtTK91euHaYNZOLGp18EzoOH1u3Hs/lJBQesYGpjX24zGtLA/ECDNyrpUAkAH90lKGdCCmziAv1h3edVc3kw37XamSrhRSGlVuXMlBvPci6Zgzj/L24ScF2iUkZ/cCovYmjZy/Gn7xxGWC4LeksyZB2ZnuU4q941mVTXTzWnLLPKQP5L6RQstRIzgUyVYr9smRMDuSYB3Xbf9+5CFVghTAp+XtIpGmG4zU/HoZdenoVve8AjhUiVBcAkCaTvA5JaJG/+EfTnZVCwQ5N328mz8MYIWJmQ3DW1cAH4QIDAQABo3QwcjARBglghkgBhvhCAQEEBAMCAAcwHwYDVR0jBBgwFoAUVeSB0RGAvtiJuQijMfmhJAkWuXAwHQYDVR0OBBYEFFXkgdERgL7YibkIozH5oSQJFrlwMB0GCSqGSIb2fQdBAAQQMA4bCFY1LjA6NC4wAwIEkDANBgkqhkiG9w0BAQUFAAOCAQEAWUesIYSKF8mciVMeuoCFGsY8Tj6xnLZ8xpJdGGQC49MGCBFhfGPjK50xA3B20qMooPS7mmNz7W3lKtvtFKkrxjYR0CvrB4ul2p5cGZ1WEvVUKcgF7bISKo30Axv/55IQh7A6tcOdBTcSo8f0FbnVpDkWm1M6I5HxqIKiaohowXkCIryqptau37AUX7iH0N18f3v/rxzP5tsHrV7bhZ3QKw0z2wTR5klAEyt2+z7pnIkPFc4YsIV4IU9rTw76NmfNB/L/CNDi3tm/Kq+4h4YhPATKt5Rof8886ZjXOP/swNlQ8C5LWK5Gb9Auw2DaclVyvUxFnmG6v4SBkgPR0ml8xQ==
                websocket_key: >-
                  LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlDV3dJQkFBS0JnUURNeGIvUHZSQVc5YkJ0TzA0M2JXMFpMRWNCZS93bWJEbG52bm4rR1dENkpRdVpjN3pWCldGN0FTSXkvb3BZY2lxS1FXOEp6cmwvZnVoWm1EaHZ6ZFpRMlViTEtKUnFEbFRQdFptdDFvWnNjL0F0WVBzWXYKZVp6OWpxcmNEK1E3dXNZYnpqTnV1UW9qR24vQXg1K3QyUmNjb3QzZFFuVFJtcGpVTDY4bXdzeVord0lEQVFBQgpBb0dBUmc3cC94TDZMRURHcWJoK25Dd09CV3pHcGxWYkFYSkplWnNMZGNvTkNjZ2UzZE5oS2NUZ05mMGNXbnd2CnkzZ0xBa1RDbEgxMlE3OFE1cjJ4Qm15VjFocXlFYjlscklxQWxTUzVHam5UV1doeXpzcGNqS1pXUjVQQWpPWW8KTGx4TnBDZWdXRWpPVXBENEx3Zjl5akV1K3hyREdWbXNMRjBQUFJrQU0zMnFoOUVDUVFEMXZ6eUZyL2hTbjdSaAo2SUZGYkxBVmtJdnN5KzFDYTd0RjYvN2J5SENkd3FTNW9VS2FZKzlEQXIwVEUrYnI4N04ySXpVQ1U1WDdDdjc0Cm0rWWlxaEJsQWtFQTFWRGZwcThwdXlJcTJGNkZ0eDB4cFlNdjZYS2h1UnlBemlUL0R6SUJkRlZlT01JZ1V1azAKN0U0VzBOL2dEbVVtRVFGbDNIWXpVZmRaclRVS3pqenEzd0pBWmZsc0tPR0RmdTJza1hCRXJFVlVzQzRpRWlueApFejNYSVVXenBRb0F5VVlxeXFqREZZUGdsZ0w5Nkh1NnVEQ1JTTFdGV3FqS3RMaTBZdjkyT080dkRRSkFTdUFrCllRSERDQ2lxR1dDMFZ0NHNld2hkWFBnYnhEbzVEQ0w0VklFYytaU3RpZ2E2Q2VCSjcxaEpzZStqV2VvdlBuRGIKTEZOaEdEaFdoZkhFWlRnRXlRSkFYTnV5cERTNWw3M0xQdmMreWR1UFppTkV0d2FlOUtiV2FaVXdDNjgzYTgxcwpta1Q3dXJvTll5SzlwdFpyei9MTUpKb3RrcUNqaWdYYUEza3V6dU5VQ1E9PQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQo
        '500':
          $ref: '#/components/responses/InternalServerError'
      x-code-samples:
        - lang: Java_okhttp
          source: |-
            OkHttpClient client = new OkHttpClient();

            Request request = new Request.Builder()
              .url("https://api.meetflo.com//api/v1/pairing/qr/icd/%7Bicd_id%7D")
              .get()
              .addHeader("authorization", "Bearer REPLACE_BEARER_TOKEN")
              .build();

            Response response = client.newCall(request).execute();
        - lang: Javascript_xhr
          source: >-
            var data = null;


            var xhr = new XMLHttpRequest();

            xhr.withCredentials = true;


            xhr.addEventListener("readystatechange", function () {
              if (this.readyState === this.DONE) {
                console.log(this.responseText);
              }
            });


            xhr.open("GET",
            "https://api.meetflo.com//api/v1/pairing/qr/icd/%7Bicd_id%7D");

            xhr.setRequestHeader("authorization", "Bearer
            REPLACE_BEARER_TOKEN");


            xhr.send(data);
        - lang: Node_native
          source: |-
            var http = require("https");

            var options = {
              "method": "GET",
              "hostname": "api.meetflo.com",
              "port": null,
              "path": "//api/v1/pairing/qr/icd/%7Bicd_id%7D",
              "headers": {
                "authorization": "Bearer REPLACE_BEARER_TOKEN"
              }
            };

            var req = http.request(options, function (res) {
              var chunks = [];

              res.on("data", function (chunk) {
                chunks.push(chunk);
              });

              res.on("end", function () {
                var body = Buffer.concat(chunks);
                console.log(body.toString());
              });
            });

            req.end();
        - lang: Python_python3
          source: >-
            import http.client


            conn = http.client.HTTPSConnection("api.meetflo.com")


            headers = { 'authorization': "Bearer REPLACE_BEARER_TOKEN" }


            conn.request("GET", "//api/v1/pairing/qr/icd/%7Bicd_id%7D",
            headers=headers)


            res = conn.getresponse()

            data = res.read()


            print(data.decode("utf-8"))
        - lang: Python_requests
          source: |-
            import requests

            url = "https://api.meetflo.com//api/v1/pairing/qr/icd/%7Bicd_id%7D"

            headers = {'authorization': 'Bearer REPLACE_BEARER_TOKEN'}

            response = requests.request("GET", url, headers=headers)

            print(response.text)
        - lang: Shell_curl
          source: |-
            curl --request GET \
              --url https://api.meetflo.com//api/v1/pairing/qr/icd/%7Bicd_id%7D \
              --header 'authorization: Bearer REPLACE_BEARER_TOKEN'
  '/api/v1/pairing/unpair/{icd_id}':
    post:
      operationId: unpair
      security:
        - OAuth2:
            - user
      summary: Unpair
      description: |
        Remove a Flo device pairing
      tags:
        - Pairing
      parameters:
        - $ref: '#/components/parameters/Authorization'
        - name: icd_id
          in: path
          description: Unique pairing ID of the device
          required: true
          schema:
            $ref: '#/components/schemas/Uuid'
      responses:
        '200':
          description: Successful response.
        '500':
          $ref: '#/components/responses/InternalServerError'
      x-code-samples:
        - lang: Java_okhttp
          source: |-
            OkHttpClient client = new OkHttpClient();

            Request request = new Request.Builder()
              .url("https://api.meetflo.com//api/v1/pairing/unpair/%7Bicd_id%7D")
              .post(null)
              .addHeader("authorization", "Bearer REPLACE_BEARER_TOKEN")
              .build();

            Response response = client.newCall(request).execute();
        - lang: Javascript_xhr
          source: >-
            var data = null;


            var xhr = new XMLHttpRequest();

            xhr.withCredentials = true;


            xhr.addEventListener("readystatechange", function () {
              if (this.readyState === this.DONE) {
                console.log(this.responseText);
              }
            });


            xhr.open("POST",
            "https://api.meetflo.com//api/v1/pairing/unpair/%7Bicd_id%7D");

            xhr.setRequestHeader("authorization", "Bearer
            REPLACE_BEARER_TOKEN");


            xhr.send(data);
        - lang: Node_native
          source: |-
            var http = require("https");

            var options = {
              "method": "POST",
              "hostname": "api.meetflo.com",
              "port": null,
              "path": "//api/v1/pairing/unpair/%7Bicd_id%7D",
              "headers": {
                "authorization": "Bearer REPLACE_BEARER_TOKEN"
              }
            };

            var req = http.request(options, function (res) {
              var chunks = [];

              res.on("data", function (chunk) {
                chunks.push(chunk);
              });

              res.on("end", function () {
                var body = Buffer.concat(chunks);
                console.log(body.toString());
              });
            });

            req.end();
        - lang: Python_python3
          source: >-
            import http.client


            conn = http.client.HTTPSConnection("api.meetflo.com")


            headers = { 'authorization': "Bearer REPLACE_BEARER_TOKEN" }


            conn.request("POST", "//api/v1/pairing/unpair/%7Bicd_id%7D",
            headers=headers)


            res = conn.getresponse()

            data = res.read()


            print(data.decode("utf-8"))
        - lang: Python_requests
          source: |-
            import requests

            url = "https://api.meetflo.com//api/v1/pairing/unpair/%7Bicd_id%7D"

            headers = {'authorization': 'Bearer REPLACE_BEARER_TOKEN'}

            response = requests.request("POST", url, headers=headers)

            print(response.text)
        - lang: Shell_curl
          source: |-
            curl --request POST \
              --url https://api.meetflo.com//api/v1/pairing/unpair/%7Bicd_id%7D \
              --header 'authorization: Bearer REPLACE_BEARER_TOKEN'

  /api/v1/locales:
    get:
      operationId: getLocales
      security:
        - OAuth2:
            - user
      summary: Get locales
      description: |
        Retrieves locales
      tags:
        - Locales
      responses:
        '200':
          description: Successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Locales'
        '500':
          $ref: '#/components/responses/InternalServerError'
      x-code-samples:
        - lang: Java_okhttp
          source: |-
            OkHttpClient client = new OkHttpClient();

            Request request = new Request.Builder()
              .url("https://api.meetflo.com//api/v1/locales")
              .get()
              .addHeader("authorization", "Bearer REPLACE_BEARER_TOKEN")
              .build();

            Response response = client.newCall(request).execute();
        - lang: Javascript_xhr
          source: >-
            var data = null;


            var xhr = new XMLHttpRequest();

            xhr.withCredentials = true;


            xhr.addEventListener("readystatechange", function () {
              if (this.readyState === this.DONE) {
                console.log(this.responseText);
              }
            });


            xhr.open("GET", "https://api.meetflo.com//api/v1/locales");

            xhr.setRequestHeader("authorization", "Bearer
            REPLACE_BEARER_TOKEN");


            xhr.send(data);
        - lang: Node_native
          source: |-
            var http = require("https");

            var options = {
              "method": "GET",
              "hostname": "api.meetflo.com",
              "port": null,
              "path": "//api/v1/locales",
              "headers": {
                "authorization": "Bearer REPLACE_BEARER_TOKEN"
              }
            };

            var req = http.request(options, function (res) {
              var chunks = [];

              res.on("data", function (chunk) {
                chunks.push(chunk);
              });

              res.on("end", function () {
                var body = Buffer.concat(chunks);
                console.log(body.toString());
              });
            });

            req.end();
        - lang: Python_python3
          source: |-
            import http.client

            conn = http.client.HTTPSConnection("api.meetflo.com")

            headers = { 'authorization': "Bearer REPLACE_BEARER_TOKEN" }

            conn.request("GET", "//api/v1/locales", headers=headers)

            res = conn.getresponse()
            data = res.read()

            print(data.decode("utf-8"))
        - lang: Python_requests
          source: |-
            import requests

            url = "https://api.meetflo.com//api/v1/locales"

            headers = {'authorization': 'Bearer REPLACE_BEARER_TOKEN'}

            response = requests.request("GET", url, headers=headers)

            print(response.text)
        - lang: Shell_curl
          source: |-
            curl --request GET \
              --url https://api.meetflo.com//api/v1/locales \
              --header 'authorization: Bearer REPLACE_BEARER_TOKEN'
  /api/v1/locales/locale:
    get:
      operationId: getLocale
      security:
        - OAuth2:
            - user
      summary: Get locale
      description: |
        Retrieves locale
      tags:
        - Locales
      responses:
        '200':
          description: Successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Locale'
        '500':
          $ref: '#/components/responses/InternalServerError'
      x-code-samples:
        - lang: Java_okhttp
          source: |-
            OkHttpClient client = new OkHttpClient();

            Request request = new Request.Builder()
              .url("https://api.meetflo.com//api/v1/locales/locale")
              .get()
              .addHeader("authorization", "Bearer REPLACE_BEARER_TOKEN")
              .build();

            Response response = client.newCall(request).execute();
        - lang: Javascript_xhr
          source: >-
            var data = null;


            var xhr = new XMLHttpRequest();

            xhr.withCredentials = true;


            xhr.addEventListener("readystatechange", function () {
              if (this.readyState === this.DONE) {
                console.log(this.responseText);
              }
            });


            xhr.open("GET", "https://api.meetflo.com//api/v1/locales/locale");

            xhr.setRequestHeader("authorization", "Bearer
            REPLACE_BEARER_TOKEN");


            xhr.send(data);
        - lang: Node_native
          source: |-
            var http = require("https");

            var options = {
              "method": "GET",
              "hostname": "api.meetflo.com",
              "port": null,
              "path": "//api/v1/locales/locale",
              "headers": {
                "authorization": "Bearer REPLACE_BEARER_TOKEN"
              }
            };

            var req = http.request(options, function (res) {
              var chunks = [];

              res.on("data", function (chunk) {
                chunks.push(chunk);
              });

              res.on("end", function () {
                var body = Buffer.concat(chunks);
                console.log(body.toString());
              });
            });

            req.end();
        - lang: Python_python3
          source: |-
            import http.client

            conn = http.client.HTTPSConnection("api.meetflo.com")

            headers = { 'authorization': "Bearer REPLACE_BEARER_TOKEN" }

            conn.request("GET", "//api/v1/locales/locale", headers=headers)

            res = conn.getresponse()
            data = res.read()

            print(data.decode("utf-8"))
        - lang: Python_requests
          source: |-
            import requests

            url = "https://api.meetflo.com//api/v1/locales/locale"

            headers = {'authorization': 'Bearer REPLACE_BEARER_TOKEN'}

            response = requests.request("GET", url, headers=headers)

            print(response.text)
        - lang: Shell_curl
          source: |-
            curl --request GET \
              --url https://api.meetflo.com//api/v1/locales/locale \
              --header 'authorization: Bearer REPLACE_BEARER_TOKEN'
  /api/v1/locales/units/systems:
    get:
      operationId: getLocaleUnitSystems
      security:
        - OAuth2:
            - user
      summary: List LocaleUnitSystems
      description: |
        Retrieves LocaleUnitSystems
      tags:
        - Locales
      responses:
        '200':
          description: Successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LocaleUnitSystems'
        '500':
          $ref: '#/components/responses/InternalServerError'
      x-code-samples:
        - lang: Java_okhttp
          source: |-
            OkHttpClient client = new OkHttpClient();

            Request request = new Request.Builder()
              .url("https://api.meetflo.com//api/v1/locales/units/systems")
              .get()
              .addHeader("authorization", "Bearer REPLACE_BEARER_TOKEN")
              .build();

            Response response = client.newCall(request).execute();
        - lang: Javascript_xhr
          source: >-
            var data = null;


            var xhr = new XMLHttpRequest();

            xhr.withCredentials = true;


            xhr.addEventListener("readystatechange", function () {
              if (this.readyState === this.DONE) {
                console.log(this.responseText);
              }
            });


            xhr.open("GET",
            "https://api.meetflo.com//api/v1/locales/units/systems");

            xhr.setRequestHeader("authorization", "Bearer
            REPLACE_BEARER_TOKEN");


            xhr.send(data);
        - lang: Node_native
          source: |-
            var http = require("https");

            var options = {
              "method": "GET",
              "hostname": "api.meetflo.com",
              "port": null,
              "path": "//api/v1/locales/units/systems",
              "headers": {
                "authorization": "Bearer REPLACE_BEARER_TOKEN"
              }
            };

            var req = http.request(options, function (res) {
              var chunks = [];

              res.on("data", function (chunk) {
                chunks.push(chunk);
              });

              res.on("end", function () {
                var body = Buffer.concat(chunks);
                console.log(body.toString());
              });
            });

            req.end();
        - lang: Python_python3
          source: >-
            import http.client


            conn = http.client.HTTPSConnection("api.meetflo.com")


            headers = { 'authorization': "Bearer REPLACE_BEARER_TOKEN" }


            conn.request("GET", "//api/v1/locales/units/systems",
            headers=headers)


            res = conn.getresponse()

            data = res.read()


            print(data.decode("utf-8"))
        - lang: Python_requests
          source: |-
            import requests

            url = "https://api.meetflo.com//api/v1/locales/units/systems"

            headers = {'authorization': 'Bearer REPLACE_BEARER_TOKEN'}

            response = requests.request("GET", url, headers=headers)

            print(response.text)
        - lang: Shell_curl
          source: |-
            curl --request GET \
              --url https://api.meetflo.com//api/v1/locales/units/systems \
              --header 'authorization: Bearer REPLACE_BEARER_TOKEN'
  '/api/v1/locales/units/systems/{system_id}':
    get:
      operationId: getLocaleUnitSystem
      security:
        - OAuth2:
            - user
      summary: Get specific LocaleUnitSystem
      description: |
        Retrieves the specific LocaleUnitSystem
      tags:
        - Locales
      parameters:
        - $ref: '#/components/parameters/Authorization'
        - name: system_id
          in: path
          description: >-
            Identifier of the unit system. Can use default to retrieve the
            default system.
          required: true
          schema:
            type: string
            example: imperial_us
      responses:
        '200':
          description: Successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LocaleUnitSystem'
        '500':
          $ref: '#/components/responses/InternalServerError'
      x-code-samples:
        - lang: Java_okhttp
          source: |-
            OkHttpClient client = new OkHttpClient();

            Request request = new Request.Builder()
              .url("https://api.meetflo.com//api/v1/locales/units/systems/%7Bsystem_id%7D")
              .get()
              .addHeader("authorization", "Bearer REPLACE_BEARER_TOKEN")
              .build();

            Response response = client.newCall(request).execute();
        - lang: Javascript_xhr
          source: >-
            var data = null;


            var xhr = new XMLHttpRequest();

            xhr.withCredentials = true;


            xhr.addEventListener("readystatechange", function () {
              if (this.readyState === this.DONE) {
                console.log(this.responseText);
              }
            });


            xhr.open("GET",
            "https://api.meetflo.com//api/v1/locales/units/systems/%7Bsystem_id%7D");

            xhr.setRequestHeader("authorization", "Bearer
            REPLACE_BEARER_TOKEN");


            xhr.send(data);
        - lang: Node_native
          source: |-
            var http = require("https");

            var options = {
              "method": "GET",
              "hostname": "api.meetflo.com",
              "port": null,
              "path": "//api/v1/locales/units/systems/%7Bsystem_id%7D",
              "headers": {
                "authorization": "Bearer REPLACE_BEARER_TOKEN"
              }
            };

            var req = http.request(options, function (res) {
              var chunks = [];

              res.on("data", function (chunk) {
                chunks.push(chunk);
              });

              res.on("end", function () {
                var body = Buffer.concat(chunks);
                console.log(body.toString());
              });
            });

            req.end();
        - lang: Python_python3
          source: >-
            import http.client


            conn = http.client.HTTPSConnection("api.meetflo.com")


            headers = { 'authorization': "Bearer REPLACE_BEARER_TOKEN" }


            conn.request("GET",
            "//api/v1/locales/units/systems/%7Bsystem_id%7D", headers=headers)


            res = conn.getresponse()

            data = res.read()


            print(data.decode("utf-8"))
        - lang: Python_requests
          source: >-
            import requests


            url =
            "https://api.meetflo.com//api/v1/locales/units/systems/%7Bsystem_id%7D"


            headers = {'authorization': 'Bearer REPLACE_BEARER_TOKEN'}


            response = requests.request("GET", url, headers=headers)


            print(response.text)
        - lang: Shell_curl
          source: |-
            curl --request GET \
              --url https://api.meetflo.com//api/v1/locales/units/systems/%7Bsystem_id%7D \
              --header 'authorization: Bearer REPLACE_BEARER_TOKEN'
  /api/v1/locales/units/systems/default:
    get:
      operationId: getDefaultLocaleUnitSystem
      security:
        - OAuth2:
            - user
      summary: Get default LocaleUnitSystem
      description: |
        Retrieves the default LocaleUnitSystem
      tags:
        - Locales
      responses:
        '200':
          description: Successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LocaleUnitSystem'
        '500':
          $ref: '#/components/responses/InternalServerError'
      x-code-samples:
        - lang: Java_okhttp
          source: |-
            OkHttpClient client = new OkHttpClient();

            Request request = new Request.Builder()
              .url("https://api.meetflo.com//api/v1/locales/units/systems/default")
              .get()
              .addHeader("authorization", "Bearer REPLACE_BEARER_TOKEN")
              .build();

            Response response = client.newCall(request).execute();
        - lang: Javascript_xhr
          source: >-
            var data = null;


            var xhr = new XMLHttpRequest();

            xhr.withCredentials = true;


            xhr.addEventListener("readystatechange", function () {
              if (this.readyState === this.DONE) {
                console.log(this.responseText);
              }
            });


            xhr.open("GET",
            "https://api.meetflo.com//api/v1/locales/units/systems/default");

            xhr.setRequestHeader("authorization", "Bearer
            REPLACE_BEARER_TOKEN");


            xhr.send(data);
        - lang: Node_native
          source: |-
            var http = require("https");

            var options = {
              "method": "GET",
              "hostname": "api.meetflo.com",
              "port": null,
              "path": "//api/v1/locales/units/systems/default",
              "headers": {
                "authorization": "Bearer REPLACE_BEARER_TOKEN"
              }
            };

            var req = http.request(options, function (res) {
              var chunks = [];

              res.on("data", function (chunk) {
                chunks.push(chunk);
              });

              res.on("end", function () {
                var body = Buffer.concat(chunks);
                console.log(body.toString());
              });
            });

            req.end();
        - lang: Python_python3
          source: >-
            import http.client


            conn = http.client.HTTPSConnection("api.meetflo.com")


            headers = { 'authorization': "Bearer REPLACE_BEARER_TOKEN" }


            conn.request("GET", "//api/v1/locales/units/systems/default",
            headers=headers)


            res = conn.getresponse()

            data = res.read()


            print(data.decode("utf-8"))
        - lang: Python_requests
          source: >-
            import requests


            url =
            "https://api.meetflo.com//api/v1/locales/units/systems/default"


            headers = {'authorization': 'Bearer REPLACE_BEARER_TOKEN'}


            response = requests.request("GET", url, headers=headers)


            print(response.text)
        - lang: Shell_curl
          source: |-
            curl --request GET \
              --url https://api.meetflo.com//api/v1/locales/units/systems/default \
              --header 'authorization: Bearer REPLACE_BEARER_TOKEN'
  '/alerts/icd/{icd_id}/pending':
    get:
      operationId: getPendingAlertsByIcdId
      security:
        - OAuth2:
            - user
      summary: List pending alerts by icd id
      description: |
        Retrieves pending alerts for a given Flo device.
      tags:
        - Alerts
      parameters:
        - $ref: '#/components/parameters/Authorization'
        - name: icd_id
          in: path
          description: >-
            The icd_id (i.e. pairing ID) of the Flo device whose pending alerts
            we wish to retrieve
          required: true
          schema:
            $ref: '#/components/schemas/Uuid'
        - name: page
          in: query
          description: Page number. (Default = 1)
          required: false
          schema:
            type: integer
            default: 1
            example: 1
        - name: size
          in: query
          description: Maximum number of records to return in a page. (Default = 10)
          required: false
          schema:
            type: integer
            default: 10
            example: 10
      responses:
        '200':
          description: Successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Alerts'
        '500':
          $ref: '#/components/responses/InternalServerError'
      x-code-samples:
        - lang: Java_okhttp
          source: |-
            OkHttpClient client = new OkHttpClient();

            Request request = new Request.Builder()
              .url("https://api.meetflo.com//alerts/icd/%7Bicd_id%7D/pending?page=SOME_INTEGER_VALUE&size=SOME_INTEGER_VALUE")
              .get()
              .addHeader("authorization", "Bearer REPLACE_BEARER_TOKEN")
              .build();

            Response response = client.newCall(request).execute();
        - lang: Javascript_xhr
          source: >-
            var data = null;


            var xhr = new XMLHttpRequest();

            xhr.withCredentials = true;


            xhr.addEventListener("readystatechange", function () {
              if (this.readyState === this.DONE) {
                console.log(this.responseText);
              }
            });


            xhr.open("GET",
            "https://api.meetflo.com//alerts/icd/%7Bicd_id%7D/pending?page=SOME_INTEGER_VALUE&size=SOME_INTEGER_VALUE");

            xhr.setRequestHeader("authorization", "Bearer
            REPLACE_BEARER_TOKEN");


            xhr.send(data);
        - lang: Node_native
          source: |-
            var http = require("https");

            var options = {
              "method": "GET",
              "hostname": "api.meetflo.com",
              "port": null,
              "path": "//alerts/icd/%7Bicd_id%7D/pending?page=SOME_INTEGER_VALUE&size=SOME_INTEGER_VALUE",
              "headers": {
                "authorization": "Bearer REPLACE_BEARER_TOKEN"
              }
            };

            var req = http.request(options, function (res) {
              var chunks = [];

              res.on("data", function (chunk) {
                chunks.push(chunk);
              });

              res.on("end", function () {
                var body = Buffer.concat(chunks);
                console.log(body.toString());
              });
            });

            req.end();
        - lang: Python_python3
          source: >-
            import http.client


            conn = http.client.HTTPSConnection("api.meetflo.com")


            headers = { 'authorization': "Bearer REPLACE_BEARER_TOKEN" }


            conn.request("GET",
            "//alerts/icd/%7Bicd_id%7D/pending?page=SOME_INTEGER_VALUE&size=SOME_INTEGER_VALUE",
            headers=headers)


            res = conn.getresponse()

            data = res.read()


            print(data.decode("utf-8"))
        - lang: Python_requests
          source: >-
            import requests


            url = "https://api.meetflo.com//alerts/icd/%7Bicd_id%7D/pending"


            querystring =
            {"page":"SOME_INTEGER_VALUE","size":"SOME_INTEGER_VALUE"}


            headers = {'authorization': 'Bearer REPLACE_BEARER_TOKEN'}


            response = requests.request("GET", url, headers=headers,
            params=querystring)


            print(response.text)
        - lang: Shell_curl
          source: |-
            curl --request GET \
              --url 'https://api.meetflo.com//alerts/icd/%7Bicd_id%7D/pending?page=SOME_INTEGER_VALUE&size=SOME_INTEGER_VALUE' \
              --header 'authorization: Bearer REPLACE_BEARER_TOKEN'
  '/alerts/icd/{icd_id}/pending/severity':
    get:
      operationId: getSeverityPendingAlertsByIcdId
      security:
        - OAuth2:
            - user
      summary: List severity pending alerts by icd id
      description: >
        Retrieves pending alerts bucketed by severity for a given Flo device.
        Note, pagination on this endpoint occurs on each bucket. So if you
        specify ?size=25&page=2, then each severity bucket will have maximum
        page size of 25 and each bucket will retrieve the second data page.


        *Example*


        If you want to retrieve the most recent alarm with the highest severity
        (i.e. replace the behavior of the deprecated /me/severe endpoint), then
        you could make a request thusly


        ```

        GET /alerts/icd/:icd_id/pending/severity?size=1

        ```


        The value `response.aggregations[0].alerts[0]` would then be the most
        recent alarm with the highest severity.
      tags:
        - Alerts
      parameters:
        - $ref: '#/components/parameters/Authorization'
        - name: icd_id
          in: path
          description: >-
            The icd_id (i.e. pairing ID) of the Flo device whose pending alerts
            we wish to retrieve
          required: true
          schema:
            $ref: '#/components/schemas/Uuid'
        - name: page
          in: query
          description: Page number. (Default = 1)
          required: false
          schema:
            type: integer
            default: 1
        - name: size
          in: query
          description: Maximum number of records to return in a page. (Default = 10)
          required: false
          schema:
            type: integer
            default: 10
      responses:
        '200':
          description: Successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PendingAlerts'
        '500':
          $ref: '#/components/responses/InternalServerError'
      x-code-samples:
        - lang: Java_okhttp
          source: |-
            OkHttpClient client = new OkHttpClient();

            Request request = new Request.Builder()
              .url("https://api.meetflo.com//alerts/icd/%7Bicd_id%7D/pending/severity?page=SOME_INTEGER_VALUE&size=SOME_INTEGER_VALUE")
              .get()
              .addHeader("authorization", "Bearer REPLACE_BEARER_TOKEN")
              .build();

            Response response = client.newCall(request).execute();
        - lang: Javascript_xhr
          source: >-
            var data = null;


            var xhr = new XMLHttpRequest();

            xhr.withCredentials = true;


            xhr.addEventListener("readystatechange", function () {
              if (this.readyState === this.DONE) {
                console.log(this.responseText);
              }
            });


            xhr.open("GET",
            "https://api.meetflo.com//alerts/icd/%7Bicd_id%7D/pending/severity?page=SOME_INTEGER_VALUE&size=SOME_INTEGER_VALUE");

            xhr.setRequestHeader("authorization", "Bearer
            REPLACE_BEARER_TOKEN");


            xhr.send(data);
        - lang: Node_native
          source: |-
            var http = require("https");

            var options = {
              "method": "GET",
              "hostname": "api.meetflo.com",
              "port": null,
              "path": "//alerts/icd/%7Bicd_id%7D/pending/severity?page=SOME_INTEGER_VALUE&size=SOME_INTEGER_VALUE",
              "headers": {
                "authorization": "Bearer REPLACE_BEARER_TOKEN"
              }
            };

            var req = http.request(options, function (res) {
              var chunks = [];

              res.on("data", function (chunk) {
                chunks.push(chunk);
              });

              res.on("end", function () {
                var body = Buffer.concat(chunks);
                console.log(body.toString());
              });
            });

            req.end();
        - lang: Python_python3
          source: >-
            import http.client


            conn = http.client.HTTPSConnection("api.meetflo.com")


            headers = { 'authorization': "Bearer REPLACE_BEARER_TOKEN" }


            conn.request("GET",
            "//alerts/icd/%7Bicd_id%7D/pending/severity?page=SOME_INTEGER_VALUE&size=SOME_INTEGER_VALUE",
            headers=headers)


            res = conn.getresponse()

            data = res.read()


            print(data.decode("utf-8"))
        - lang: Python_requests
          source: >-
            import requests


            url =
            "https://api.meetflo.com//alerts/icd/%7Bicd_id%7D/pending/severity"


            querystring =
            {"page":"SOME_INTEGER_VALUE","size":"SOME_INTEGER_VALUE"}


            headers = {'authorization': 'Bearer REPLACE_BEARER_TOKEN'}


            response = requests.request("GET", url, headers=headers,
            params=querystring)


            print(response.text)
        - lang: Shell_curl
          source: |-
            curl --request GET \
              --url 'https://api.meetflo.com//alerts/icd/%7Bicd_id%7D/pending/severity?page=SOME_INTEGER_VALUE&size=SOME_INTEGER_VALUE' \
              --header 'authorization: Bearer REPLACE_BEARER_TOKEN'
  '/alerts/icd/{icd_id}/cleared':
    get:
      operationId: getClearedAlertsByIcdId
      security:
        - OAuth2:
            - user
      summary: List cleared alerts by icd id
      description: |
        Retrieves cleared/resolved alerts for a given Flo device.
      tags:
        - Alerts
      parameters:
        - $ref: '#/components/parameters/Authorization'
        - name: icd_id
          in: path
          description: >-
            The icd_id (i.e. pairing ID) of the Flo device whose pending alerts
            we wish to retrieve
          required: true
          schema:
            $ref: '#/components/schemas/Uuid'
        - name: page
          in: query
          description: Page number. (Default = 1)
          required: false
          schema:
            type: integer
            default: 1
        - name: size
          in: query
          description: Maximum number of records to return in a page. (Default = 10)
          required: false
          schema:
            type: integer
            default: 10
      responses:
        '200':
          description: Successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Alerts'
        '500':
          $ref: '#/components/responses/InternalServerError'
      x-code-samples:
        - lang: Java_okhttp
          source: |-
            OkHttpClient client = new OkHttpClient();

            Request request = new Request.Builder()
              .url("https://api.meetflo.com//alerts/icd/%7Bicd_id%7D/cleared?page=SOME_INTEGER_VALUE&size=SOME_INTEGER_VALUE")
              .get()
              .addHeader("authorization", "Bearer REPLACE_BEARER_TOKEN")
              .build();

            Response response = client.newCall(request).execute();
        - lang: Javascript_xhr
          source: >-
            var data = null;


            var xhr = new XMLHttpRequest();

            xhr.withCredentials = true;


            xhr.addEventListener("readystatechange", function () {
              if (this.readyState === this.DONE) {
                console.log(this.responseText);
              }
            });


            xhr.open("GET",
            "https://api.meetflo.com//alerts/icd/%7Bicd_id%7D/cleared?page=SOME_INTEGER_VALUE&size=SOME_INTEGER_VALUE");

            xhr.setRequestHeader("authorization", "Bearer
            REPLACE_BEARER_TOKEN");


            xhr.send(data);
        - lang: Node_native
          source: |-
            var http = require("https");

            var options = {
              "method": "GET",
              "hostname": "api.meetflo.com",
              "port": null,
              "path": "//alerts/icd/%7Bicd_id%7D/cleared?page=SOME_INTEGER_VALUE&size=SOME_INTEGER_VALUE",
              "headers": {
                "authorization": "Bearer REPLACE_BEARER_TOKEN"
              }
            };

            var req = http.request(options, function (res) {
              var chunks = [];

              res.on("data", function (chunk) {
                chunks.push(chunk);
              });

              res.on("end", function () {
                var body = Buffer.concat(chunks);
                console.log(body.toString());
              });
            });

            req.end();
        - lang: Python_python3
          source: >-
            import http.client


            conn = http.client.HTTPSConnection("api.meetflo.com")


            headers = { 'authorization': "Bearer REPLACE_BEARER_TOKEN" }


            conn.request("GET",
            "//alerts/icd/%7Bicd_id%7D/cleared?page=SOME_INTEGER_VALUE&size=SOME_INTEGER_VALUE",
            headers=headers)


            res = conn.getresponse()

            data = res.read()


            print(data.decode("utf-8"))
        - lang: Python_requests
          source: >-
            import requests


            url = "https://api.meetflo.com//alerts/icd/%7Bicd_id%7D/cleared"


            querystring =
            {"page":"SOME_INTEGER_VALUE","size":"SOME_INTEGER_VALUE"}


            headers = {'authorization': 'Bearer REPLACE_BEARER_TOKEN'}


            response = requests.request("GET", url, headers=headers,
            params=querystring)


            print(response.text)
        - lang: Shell_curl
          source: |-
            curl --request GET \
              --url 'https://api.meetflo.com//alerts/icd/%7Bicd_id%7D/cleared?page=SOME_INTEGER_VALUE&size=SOME_INTEGER_VALUE' \
              --header 'authorization: Bearer REPLACE_BEARER_TOKEN'
  '/alerts/icd/{icd_id}':
    get:
      operationId: getAlertsByIcdId
      security:
        - OAuth2:
            - user
      summary: List alerts by icd id
      description: |
        Retrieves full activity for a given Flo device.
      tags:
        - Alerts
      parameters:
        - $ref: '#/components/parameters/Authorization'
        - name: icd_id
          in: path
          description: >-
            The icd_id (i.e. pairing ID) of the Flo device whose pending alerts
            we wish to retrieve
          required: true
          schema:
            $ref: '#/components/schemas/Uuid'
        - name: page
          in: query
          description: Page number. (Default = 1)
          required: false
          schema:
            type: integer
            default: 1
        - name: size
          in: query
          description: Maximum number of records to return in a page. (Default = 10)
          required: false
          schema:
            type: integer
            default: 10
      responses:
        '200':
          description: Successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Alerts'
        '500':
          $ref: '#/components/responses/InternalServerError'
      x-code-samples:
        - lang: Java_okhttp
          source: |-
            OkHttpClient client = new OkHttpClient();

            Request request = new Request.Builder()
              .url("https://api.meetflo.com//alerts/icd/%7Bicd_id%7D?page=SOME_INTEGER_VALUE&size=SOME_INTEGER_VALUE")
              .get()
              .addHeader("authorization", "Bearer REPLACE_BEARER_TOKEN")
              .build();

            Response response = client.newCall(request).execute();
        - lang: Javascript_xhr
          source: >-
            var data = null;


            var xhr = new XMLHttpRequest();

            xhr.withCredentials = true;


            xhr.addEventListener("readystatechange", function () {
              if (this.readyState === this.DONE) {
                console.log(this.responseText);
              }
            });


            xhr.open("GET",
            "https://api.meetflo.com//alerts/icd/%7Bicd_id%7D?page=SOME_INTEGER_VALUE&size=SOME_INTEGER_VALUE");

            xhr.setRequestHeader("authorization", "Bearer
            REPLACE_BEARER_TOKEN");


            xhr.send(data);
        - lang: Node_native
          source: |-
            var http = require("https");

            var options = {
              "method": "GET",
              "hostname": "api.meetflo.com",
              "port": null,
              "path": "//alerts/icd/%7Bicd_id%7D?page=SOME_INTEGER_VALUE&size=SOME_INTEGER_VALUE",
              "headers": {
                "authorization": "Bearer REPLACE_BEARER_TOKEN"
              }
            };

            var req = http.request(options, function (res) {
              var chunks = [];

              res.on("data", function (chunk) {
                chunks.push(chunk);
              });

              res.on("end", function () {
                var body = Buffer.concat(chunks);
                console.log(body.toString());
              });
            });

            req.end();
        - lang: Python_python3
          source: >-
            import http.client


            conn = http.client.HTTPSConnection("api.meetflo.com")


            headers = { 'authorization': "Bearer REPLACE_BEARER_TOKEN" }


            conn.request("GET",
            "//alerts/icd/%7Bicd_id%7D?page=SOME_INTEGER_VALUE&size=SOME_INTEGER_VALUE",
            headers=headers)


            res = conn.getresponse()

            data = res.read()


            print(data.decode("utf-8"))
        - lang: Python_requests
          source: >-
            import requests


            url = "https://api.meetflo.com//alerts/icd/%7Bicd_id%7D"


            querystring =
            {"page":"SOME_INTEGER_VALUE","size":"SOME_INTEGER_VALUE"}


            headers = {'authorization': 'Bearer REPLACE_BEARER_TOKEN'}


            response = requests.request("GET", url, headers=headers,
            params=querystring)


            print(response.text)
        - lang: Shell_curl
          source: |-
            curl --request GET \
              --url 'https://api.meetflo.com//alerts/icd/%7Bicd_id%7D?page=SOME_INTEGER_VALUE&size=SOME_INTEGER_VALUE' \
              --header 'authorization: Bearer REPLACE_BEARER_TOKEN'
  '/alerts/icd/{icd_id}/clear':
    post:
      operationId: clearAlerts
      security:
        - OAuth2:
            - user
      summary: Clear alerts by icd id
      description: >
        Alerts are cleared by their alarm_id & system_mode. Clearing an alarm of
        a specific alarm_id & system_mode, clears all alerts pending alerts of
        that alarm_id & system_mode. The alarm_id & system_mode are provided in
        the POST body of the request as a JSON array
      tags:
        - Alerts
      parameters:
        - $ref: '#/components/parameters/Authorization'
        - name: icd_id
          in: path
          description: >-
            The icd_id (i.e. pairing ID) of the Flo device whose pending alerts
            we wish to retrieve
          required: true
          schema:
            $ref: '#/components/schemas/Uuid'
      responses:
        '200':
          description: Successful response.
          content:
            application/json:
              schema:
                title: ListOfClearedAlert
                type: array
                items:
                  $ref: '#/components/schemas/ClearedAlert'
        '500':
          $ref: '#/components/responses/InternalServerError'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ClearedAlerts'
        description: Specific alarm_id & system_mode
      x-code-samples:
        - lang: Java_okhttp
          source: >-
            OkHttpClient client = new OkHttpClient();


            MediaType mediaType = MediaType.parse("application/json");

            RequestBody body = RequestBody.create(mediaType,
            "{\"data\":[{\"alarm_id\":33,\"system_mode\":2}]}");

            Request request = new Request.Builder()
              .url("https://api.meetflo.com//alerts/icd/%7Bicd_id%7D/clear")
              .post(body)
              .addHeader("content-type", "application/json")
              .addHeader("authorization", "Bearer REPLACE_BEARER_TOKEN")
              .build();

            Response response = client.newCall(request).execute();
        - lang: Javascript_xhr
          source: >-
            var data = JSON.stringify({
              "data": [
                {
                  "alarm_id": 33,
                  "system_mode": 2
                }
              ]
            });


            var xhr = new XMLHttpRequest();

            xhr.withCredentials = true;


            xhr.addEventListener("readystatechange", function () {
              if (this.readyState === this.DONE) {
                console.log(this.responseText);
              }
            });


            xhr.open("POST",
            "https://api.meetflo.com//alerts/icd/%7Bicd_id%7D/clear");

            xhr.setRequestHeader("content-type", "application/json");

            xhr.setRequestHeader("authorization", "Bearer
            REPLACE_BEARER_TOKEN");


            xhr.send(data);
        - lang: Node_native
          source: >-
            var http = require("https");


            var options = {
              "method": "POST",
              "hostname": "api.meetflo.com",
              "port": null,
              "path": "//alerts/icd/%7Bicd_id%7D/clear",
              "headers": {
                "content-type": "application/json",
                "authorization": "Bearer REPLACE_BEARER_TOKEN"
              }
            };


            var req = http.request(options, function (res) {
              var chunks = [];

              res.on("data", function (chunk) {
                chunks.push(chunk);
              });

              res.on("end", function () {
                var body = Buffer.concat(chunks);
                console.log(body.toString());
              });
            });


            req.write(JSON.stringify({ data: [ { alarm_id: 33, system_mode: 2 }
            ] }));

            req.end();
        - lang: Python_python3
          source: >-
            import http.client


            conn = http.client.HTTPSConnection("api.meetflo.com")


            payload = "{\"data\":[{\"alarm_id\":33,\"system_mode\":2}]}"


            headers = {
                'content-type': "application/json",
                'authorization': "Bearer REPLACE_BEARER_TOKEN"
                }

            conn.request("POST", "//alerts/icd/%7Bicd_id%7D/clear", payload,
            headers)


            res = conn.getresponse()

            data = res.read()


            print(data.decode("utf-8"))
        - lang: Python_requests
          source: >-
            import requests


            url = "https://api.meetflo.com//alerts/icd/%7Bicd_id%7D/clear"


            payload = "{\"data\":[{\"alarm_id\":33,\"system_mode\":2}]}"

            headers = {
                'content-type': "application/json",
                'authorization': "Bearer REPLACE_BEARER_TOKEN"
                }

            response = requests.request("POST", url, data=payload,
            headers=headers)


            print(response.text)
        - lang: Shell_curl
          source: |-
            curl --request POST \
              --url https://api.meetflo.com//alerts/icd/%7Bicd_id%7D/clear \
              --header 'authorization: Bearer REPLACE_BEARER_TOKEN' \
              --header 'content-type: application/json' \
              --data '{"data":[{"alarm_id":33,"system_mode":2}]}'
  /api/v1/pushnotificationtokens/ios:
    post:
      operationId: addPushNotificationTokenIos
      security:
        - OAuth2:
            - user
      summary: Add Push Notification Token for iOS
      description: |
        Adds a push notification token associated with a user's mobile device.
      tags:
        - Notification Tokens
      parameters:
        - $ref: '#/components/parameters/Authorization'
      responses:
        '200':
          description: Successful response.
        '500':
          $ref: '#/components/responses/InternalServerError'
      requestBody:
        $ref: '#/components/requestBodies/AddNotificationToken'
      x-code-samples:
        - lang: Java_okhttp
          source: |-
            OkHttpClient client = new OkHttpClient();

            Request request = new Request.Builder()
              .url("https://api.meetflo.com//api/v1/pushnotificationtokens/ios")
              .post(null)
              .addHeader("authorization", "Bearer REPLACE_BEARER_TOKEN")
              .build();

            Response response = client.newCall(request).execute();
        - lang: Javascript_xhr
          source: >-
            var data = null;


            var xhr = new XMLHttpRequest();

            xhr.withCredentials = true;


            xhr.addEventListener("readystatechange", function () {
              if (this.readyState === this.DONE) {
                console.log(this.responseText);
              }
            });


            xhr.open("POST",
            "https://api.meetflo.com//api/v1/pushnotificationtokens/ios");

            xhr.setRequestHeader("authorization", "Bearer
            REPLACE_BEARER_TOKEN");


            xhr.send(data);
        - lang: Node_native
          source: |-
            var http = require("https");

            var options = {
              "method": "POST",
              "hostname": "api.meetflo.com",
              "port": null,
              "path": "//api/v1/pushnotificationtokens/ios",
              "headers": {
                "authorization": "Bearer REPLACE_BEARER_TOKEN"
              }
            };

            var req = http.request(options, function (res) {
              var chunks = [];

              res.on("data", function (chunk) {
                chunks.push(chunk);
              });

              res.on("end", function () {
                var body = Buffer.concat(chunks);
                console.log(body.toString());
              });
            });

            req.end();
        - lang: Python_python3
          source: >-
            import http.client


            conn = http.client.HTTPSConnection("api.meetflo.com")


            headers = { 'authorization': "Bearer REPLACE_BEARER_TOKEN" }


            conn.request("POST", "//api/v1/pushnotificationtokens/ios",
            headers=headers)


            res = conn.getresponse()

            data = res.read()


            print(data.decode("utf-8"))
        - lang: Python_requests
          source: |-
            import requests

            url = "https://api.meetflo.com//api/v1/pushnotificationtokens/ios"

            headers = {'authorization': 'Bearer REPLACE_BEARER_TOKEN'}

            response = requests.request("POST", url, headers=headers)

            print(response.text)
        - lang: Shell_curl
          source: |-
            curl --request POST \
              --url https://api.meetflo.com//api/v1/pushnotificationtokens/ios \
              --header 'authorization: Bearer REPLACE_BEARER_TOKEN'
  /api/v1/pushnotificationtokens/android:
    post:
      operationId: addPushNotificationToken
      security:
        - OAuth2:
            - user
      summary: Add Push Notification Token for Android
      description: |
        Adds a push notification token associated with a user's mobile device.
      tags:
        - Notification Tokens
      parameters:
        - $ref: '#/components/parameters/Authorization'
      responses:
        '200':
          description: Successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotificationToken'
        '500':
          $ref: '#/components/responses/InternalServerError'
      requestBody:
        $ref: '#/components/requestBodies/AddNotificationToken'
      x-code-samples:
        - lang: Java_okhttp
          source: |-
            OkHttpClient client = new OkHttpClient();

            Request request = new Request.Builder()
              .url("https://api.meetflo.com//api/v1/pushnotificationtokens/android")
              .post(null)
              .addHeader("authorization", "Bearer REPLACE_BEARER_TOKEN")
              .build();

            Response response = client.newCall(request).execute();
        - lang: Javascript_xhr
          source: >-
            var data = null;


            var xhr = new XMLHttpRequest();

            xhr.withCredentials = true;


            xhr.addEventListener("readystatechange", function () {
              if (this.readyState === this.DONE) {
                console.log(this.responseText);
              }
            });


            xhr.open("POST",
            "https://api.meetflo.com//api/v1/pushnotificationtokens/android");

            xhr.setRequestHeader("authorization", "Bearer
            REPLACE_BEARER_TOKEN");


            xhr.send(data);
        - lang: Node_native
          source: |-
            var http = require("https");

            var options = {
              "method": "POST",
              "hostname": "api.meetflo.com",
              "port": null,
              "path": "//api/v1/pushnotificationtokens/android",
              "headers": {
                "authorization": "Bearer REPLACE_BEARER_TOKEN"
              }
            };

            var req = http.request(options, function (res) {
              var chunks = [];

              res.on("data", function (chunk) {
                chunks.push(chunk);
              });

              res.on("end", function () {
                var body = Buffer.concat(chunks);
                console.log(body.toString());
              });
            });

            req.end();
        - lang: Python_python3
          source: >-
            import http.client


            conn = http.client.HTTPSConnection("api.meetflo.com")


            headers = { 'authorization': "Bearer REPLACE_BEARER_TOKEN" }


            conn.request("POST", "//api/v1/pushnotificationtokens/android",
            headers=headers)


            res = conn.getresponse()

            data = res.read()


            print(data.decode("utf-8"))
        - lang: Python_requests
          source: >-
            import requests


            url =
            "https://api.meetflo.com//api/v1/pushnotificationtokens/android"


            headers = {'authorization': 'Bearer REPLACE_BEARER_TOKEN'}


            response = requests.request("POST", url, headers=headers)


            print(response.text)
        - lang: Shell_curl
          source: |-
            curl --request POST \
              --url https://api.meetflo.com//api/v1/pushnotificationtokens/android \
              --header 'authorization: Bearer REPLACE_BEARER_TOKEN'
  '/api/v1/pushnotificationtokens/user/{user_id}':
    get:
      operationId: getPushNotificationTokens
      security:
        - OAuth2:
            - admin
      summary: Get Push Notification Token
      description: |
        Retrieve all notification tokens for a user
      tags:
        - Notification Tokens
      parameters:
        - $ref: '#/components/parameters/AdminAuthorization'
        - name: user_id
          in: path
          description: ID of user
          required: true
          schema:
            $ref: '#/components/schemas/Uuid'
      responses:
        '200':
          description: Successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotificationToken'
        '500':
          $ref: '#/components/responses/InternalServerError'
      x-code-samples:
        - lang: Java_okhttp
          source: |-
            OkHttpClient client = new OkHttpClient();

            Request request = new Request.Builder()
              .url("https://api.meetflo.com//api/v1/pushnotificationtokens/user/%7Buser_id%7D")
              .get()
              .addHeader("authorization", "Bearer REPLACE_BEARER_TOKEN")
              .build();

            Response response = client.newCall(request).execute();
        - lang: Javascript_xhr
          source: >-
            var data = null;


            var xhr = new XMLHttpRequest();

            xhr.withCredentials = true;


            xhr.addEventListener("readystatechange", function () {
              if (this.readyState === this.DONE) {
                console.log(this.responseText);
              }
            });


            xhr.open("GET",
            "https://api.meetflo.com//api/v1/pushnotificationtokens/user/%7Buser_id%7D");

            xhr.setRequestHeader("authorization", "Bearer
            REPLACE_BEARER_TOKEN");


            xhr.send(data);
        - lang: Node_native
          source: |-
            var http = require("https");

            var options = {
              "method": "GET",
              "hostname": "api.meetflo.com",
              "port": null,
              "path": "//api/v1/pushnotificationtokens/user/%7Buser_id%7D",
              "headers": {
                "authorization": "Bearer REPLACE_BEARER_TOKEN"
              }
            };

            var req = http.request(options, function (res) {
              var chunks = [];

              res.on("data", function (chunk) {
                chunks.push(chunk);
              });

              res.on("end", function () {
                var body = Buffer.concat(chunks);
                console.log(body.toString());
              });
            });

            req.end();
        - lang: Python_python3
          source: >-
            import http.client


            conn = http.client.HTTPSConnection("api.meetflo.com")


            headers = { 'authorization': "Bearer REPLACE_BEARER_TOKEN" }


            conn.request("GET",
            "//api/v1/pushnotificationtokens/user/%7Buser_id%7D",
            headers=headers)


            res = conn.getresponse()

            data = res.read()


            print(data.decode("utf-8"))
        - lang: Python_requests
          source: >-
            import requests


            url =
            "https://api.meetflo.com//api/v1/pushnotificationtokens/user/%7Buser_id%7D"


            headers = {'authorization': 'Bearer REPLACE_BEARER_TOKEN'}


            response = requests.request("GET", url, headers=headers)


            print(response.text)
        - lang: Shell_curl
          source: |-
            curl --request GET \
              --url https://api.meetflo.com//api/v1/pushnotificationtokens/user/%7Buser_id%7D \
              --header 'authorization: Bearer REPLACE_BEARER_TOKEN'
  /api/v1/logout:
    post:
      operationId: logout
      security:
        - OAuth2:
            - user
      summary: Logout
      description: >
        Logs a user out by invalidating their OAuth2 access token and refresh
        token and clearing their push notification token.
      tags:
        - Notification Tokens
      parameters:
        - $ref: '#/components/parameters/Authorization'
      responses:
        '200':
          description: Successful response.
        '500':
          $ref: '#/components/responses/InternalServerError'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Logout'
        required: true
      x-code-samples:
        - lang: Java_okhttp
          source: >-
            OkHttpClient client = new OkHttpClient();


            MediaType mediaType = MediaType.parse("application/json");

            RequestBody body = RequestBody.create(mediaType,
            "{\"mobile_device_id\":\"ffffffffffffffff\"}");

            Request request = new Request.Builder()
              .url("https://api.meetflo.com//api/v1/logout")
              .post(body)
              .addHeader("content-type", "application/json")
              .addHeader("authorization", "Bearer REPLACE_BEARER_TOKEN")
              .build();

            Response response = client.newCall(request).execute();
        - lang: Javascript_xhr
          source: >-
            var data = JSON.stringify({
              "mobile_device_id": "ffffffffffffffff"
            });


            var xhr = new XMLHttpRequest();

            xhr.withCredentials = true;


            xhr.addEventListener("readystatechange", function () {
              if (this.readyState === this.DONE) {
                console.log(this.responseText);
              }
            });


            xhr.open("POST", "https://api.meetflo.com//api/v1/logout");

            xhr.setRequestHeader("content-type", "application/json");

            xhr.setRequestHeader("authorization", "Bearer
            REPLACE_BEARER_TOKEN");


            xhr.send(data);
        - lang: Node_native
          source: |-
            var http = require("https");

            var options = {
              "method": "POST",
              "hostname": "api.meetflo.com",
              "port": null,
              "path": "//api/v1/logout",
              "headers": {
                "content-type": "application/json",
                "authorization": "Bearer REPLACE_BEARER_TOKEN"
              }
            };

            var req = http.request(options, function (res) {
              var chunks = [];

              res.on("data", function (chunk) {
                chunks.push(chunk);
              });

              res.on("end", function () {
                var body = Buffer.concat(chunks);
                console.log(body.toString());
              });
            });

            req.write(JSON.stringify({ mobile_device_id: 'ffffffffffffffff' }));
            req.end();
        - lang: Python_python3
          source: |-
            import http.client

            conn = http.client.HTTPSConnection("api.meetflo.com")

            payload = "{\"mobile_device_id\":\"ffffffffffffffff\"}"

            headers = {
                'content-type': "application/json",
                'authorization': "Bearer REPLACE_BEARER_TOKEN"
                }

            conn.request("POST", "//api/v1/logout", payload, headers)

            res = conn.getresponse()
            data = res.read()

            print(data.decode("utf-8"))
        - lang: Python_requests
          source: >-
            import requests


            url = "https://api.meetflo.com//api/v1/logout"


            payload = "{\"mobile_device_id\":\"ffffffffffffffff\"}"

            headers = {
                'content-type': "application/json",
                'authorization': "Bearer REPLACE_BEARER_TOKEN"
                }

            response = requests.request("POST", url, data=payload,
            headers=headers)


            print(response.text)
        - lang: Shell_curl
          source: |-
            curl --request POST \
              --url https://api.meetflo.com//api/v1/logout \
              --header 'authorization: Bearer REPLACE_BEARER_TOKEN' \
              --header 'content-type: application/json' \
              --data '{"mobile_device_id":"ffffffffffffffff"}'
  /api/v1/userregistration:
    post:
      operationId: register
      summary: Register
      description: ''
      tags:
        - Registration
      responses:
        '200':
          description: Successful response.
        '400':
          description: Email already registered. Or  Email already pending registration.
        '500':
          $ref: '#/components/responses/InternalServerError'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Registration'
        description: Registration
        required: true
      x-code-samples:
        - lang: Java_okhttp
          source: >-
            OkHttpClient client = new OkHttpClient();


            MediaType mediaType = MediaType.parse("application/json");

            RequestBody body = RequestBody.create(mediaType,
            "{\"email\":\"user@example.com\",\"password\":\"pa$$word\",\"password_conf\":\"pa$$word\",\"firstname\":\"Andrew\",\"lastname\":\"Chen\",\"country\":\"Taiwan\",\"phone_mobile\":\"+886912345678\"}");

            Request request = new Request.Builder()
              .url("https://api.meetflo.com//api/v1/userregistration")
              .post(body)
              .addHeader("content-type", "application/json")
              .build();

            Response response = client.newCall(request).execute();
        - lang: Javascript_xhr
          source: >-
            var data = JSON.stringify({
              "email": "user@example.com",
              "password": "pa$$word",
              "password_conf": "pa$$word",
              "firstname": "Andrew",
              "lastname": "Chen",
              "country": "Taiwan",
              "phone_mobile": "+886912345678"
            });


            var xhr = new XMLHttpRequest();

            xhr.withCredentials = true;


            xhr.addEventListener("readystatechange", function () {
              if (this.readyState === this.DONE) {
                console.log(this.responseText);
              }
            });


            xhr.open("POST",
            "https://api.meetflo.com//api/v1/userregistration");

            xhr.setRequestHeader("content-type", "application/json");


            xhr.send(data);
        - lang: Node_native
          source: |-
            var http = require("https");

            var options = {
              "method": "POST",
              "hostname": "api.meetflo.com",
              "port": null,
              "path": "//api/v1/userregistration",
              "headers": {
                "content-type": "application/json"
              }
            };

            var req = http.request(options, function (res) {
              var chunks = [];

              res.on("data", function (chunk) {
                chunks.push(chunk);
              });

              res.on("end", function () {
                var body = Buffer.concat(chunks);
                console.log(body.toString());
              });
            });

            req.write(JSON.stringify({ email: 'user@example.com',
              password: 'pa$$word',
              password_conf: 'pa$$word',
              firstname: 'Andrew',
              lastname: 'Chen',
              country: 'Taiwan',
              phone_mobile: '+886912345678' }));
            req.end();
        - lang: Python_python3
          source: >-
            import http.client


            conn = http.client.HTTPSConnection("api.meetflo.com")


            payload =
            "{\"email\":\"user@example.com\",\"password\":\"pa$$word\",\"password_conf\":\"pa$$word\",\"firstname\":\"Andrew\",\"lastname\":\"Chen\",\"country\":\"Taiwan\",\"phone_mobile\":\"+886912345678\"}"


            headers = { 'content-type': "application/json" }


            conn.request("POST", "//api/v1/userregistration", payload, headers)


            res = conn.getresponse()

            data = res.read()


            print(data.decode("utf-8"))
        - lang: Python_requests
          source: >-
            import requests


            url = "https://api.meetflo.com//api/v1/userregistration"


            payload =
            "{\"email\":\"user@example.com\",\"password\":\"pa$$word\",\"password_conf\":\"pa$$word\",\"firstname\":\"Andrew\",\"lastname\":\"Chen\",\"country\":\"Taiwan\",\"phone_mobile\":\"+886912345678\"}"

            headers = {'content-type': 'application/json'}


            response = requests.request("POST", url, data=payload,
            headers=headers)


            print(response.text)
        - lang: Shell_curl
          source: |-
            curl --request POST \
              --url https://api.meetflo.com//api/v1/userregistration \
              --header 'content-type: application/json' \
              --data '{"email":"user@example.com","password":"pa$$word","password_conf":"pa$$word","firstname":"Andrew","lastname":"Chen","country":"Taiwan","phone_mobile":"+886912345678"}'
  /api/v1/userregistration/verify:
    post:
      operationId: verifyAuth
      summary: Verify Authentication Token
      description: ''
      tags:
        - Registration
      responses:
        '200':
          description: Successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthToken'
        '500':
          $ref: '#/components/responses/InternalServerError'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VerifyAuthToken'
        description: Verify Authentication Token
        required: true
      x-code-samples:
        - lang: Java_okhttp
          source: >-
            OkHttpClient client = new OkHttpClient();


            MediaType mediaType = MediaType.parse("application/json");

            RequestBody body = RequestBody.create(mediaType,
            "{\"token\":\"ffffffffffffffff\"}");

            Request request = new Request.Builder()
              .url("https://api.meetflo.com//api/v1/userregistration/verify")
              .post(body)
              .addHeader("content-type", "application/json")
              .build();

            Response response = client.newCall(request).execute();
        - lang: Javascript_xhr
          source: >-
            var data = JSON.stringify({
              "token": "ffffffffffffffff"
            });


            var xhr = new XMLHttpRequest();

            xhr.withCredentials = true;


            xhr.addEventListener("readystatechange", function () {
              if (this.readyState === this.DONE) {
                console.log(this.responseText);
              }
            });


            xhr.open("POST",
            "https://api.meetflo.com//api/v1/userregistration/verify");

            xhr.setRequestHeader("content-type", "application/json");


            xhr.send(data);
        - lang: Node_native
          source: |-
            var http = require("https");

            var options = {
              "method": "POST",
              "hostname": "api.meetflo.com",
              "port": null,
              "path": "//api/v1/userregistration/verify",
              "headers": {
                "content-type": "application/json"
              }
            };

            var req = http.request(options, function (res) {
              var chunks = [];

              res.on("data", function (chunk) {
                chunks.push(chunk);
              });

              res.on("end", function () {
                var body = Buffer.concat(chunks);
                console.log(body.toString());
              });
            });

            req.write(JSON.stringify({ token: 'ffffffffffffffff' }));
            req.end();
        - lang: Python_python3
          source: >-
            import http.client


            conn = http.client.HTTPSConnection("api.meetflo.com")


            payload = "{\"token\":\"ffffffffffffffff\"}"


            headers = { 'content-type': "application/json" }


            conn.request("POST", "//api/v1/userregistration/verify", payload,
            headers)


            res = conn.getresponse()

            data = res.read()


            print(data.decode("utf-8"))
        - lang: Python_requests
          source: >-
            import requests


            url = "https://api.meetflo.com//api/v1/userregistration/verify"


            payload = "{\"token\":\"ffffffffffffffff\"}"

            headers = {'content-type': 'application/json'}


            response = requests.request("POST", url, data=payload,
            headers=headers)


            print(response.text)
        - lang: Shell_curl
          source: |-
            curl --request POST \
              --url https://api.meetflo.com//api/v1/userregistration/verify \
              --header 'content-type: application/json' \
              --data '{"token":"ffffffffffffffff"}'
  /api/v1/userregistration/verify/oauth2:
    post:
      operationId: verifyOauthToken
      summary: Verify Oauth2 Token
      description: ''
      tags:
        - Registration
      responses:
        '200':
          description: Successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OauthToken'
              example:
                access_token: >-
                  eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJjbGllbnRfaWQiOiJmZmZmZmZmZi1mZmZmLTRmZmYtOGZmZi1mZmZmZmZmZmZmZmYiLCJ1c2VyX2lkIjoiZmZmZmZmZmYtZmZmZi00ZmZmLThmZmYtZmZmZmZmZmZmZmZmIiwiaWF0IjoxNTQ4NzQ0ODg2LCJleHAiOjE1NDg4MzEyODYsImp0aSI6ImZmZmZmZmZmLWZmZmYtNGZmZi04ZmZmLWZmZmZmZmZmZmZmZiJ9.Xh7tDNBCHUZBr_oqolwYUJVkSBm3BGiXli76qjldZD8
                token_type: Bearer
                refresh_token: >-
                  eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJjbGllbnRfaWQiOiJmZmZmZmZmZi1mZmZmLTRmZmYtOGZmZi1mZmZmZmZmZmZmZmYiLCJ1c2VyX2lkIjoiZmZmZmZmZmYtZmZmZi00ZmZmLThmZmYtZmZmZmZmZmZmZmZmIiwiaWF0IjoxNTQ4NzQ0ODg2LCJleHAiOjE1NDg4MzEyODYsImp0aSI6ImZmZmZmZmZmLWZmZmYtNGZmZi04ZmZmLWZmZmZmZmZmZmZmZiJ9.Xh7tDNBCHUZBr_oqolwYUJVkSBm3BGiXli76qjldZD8
                expires_in: 86400
                expires_at: '2019-01-01T16:58:51.639Z'
                issued_at: '2019-01-01T16:58:51.639Z'
                user_id: ffffffff-ffff-4fff-8fff-ffffffffffff
        '500':
          $ref: '#/components/responses/InternalServerError'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VerifyOauthToken'
        description: Verify Oauth2 Token
        required: true
      x-code-samples:
        - lang: Java_okhttp
          source: >-
            OkHttpClient client = new OkHttpClient();


            MediaType mediaType = MediaType.parse("application/json");

            RequestBody body = RequestBody.create(mediaType,
            "{\"client_id\":\"ffffffff-ffff-4fff-8fff-ffffffffffff\",\"client_secret\":\"ffffffff-ffff-4fff-8fff-ffffffffffff\",\"token\":\"ffffffffffff\"}");

            Request request = new Request.Builder()
              .url("https://api.meetflo.com//api/v1/userregistration/verify/oauth2")
              .post(body)
              .addHeader("content-type", "application/json")
              .build();

            Response response = client.newCall(request).execute();
        - lang: Javascript_xhr
          source: >-
            var data = JSON.stringify({
              "client_id": "ffffffff-ffff-4fff-8fff-ffffffffffff",
              "client_secret": "ffffffff-ffff-4fff-8fff-ffffffffffff",
              "token": "ffffffffffff"
            });


            var xhr = new XMLHttpRequest();

            xhr.withCredentials = true;


            xhr.addEventListener("readystatechange", function () {
              if (this.readyState === this.DONE) {
                console.log(this.responseText);
              }
            });


            xhr.open("POST",
            "https://api.meetflo.com//api/v1/userregistration/verify/oauth2");

            xhr.setRequestHeader("content-type", "application/json");


            xhr.send(data);
        - lang: Node_native
          source: >-
            var http = require("https");


            var options = {
              "method": "POST",
              "hostname": "api.meetflo.com",
              "port": null,
              "path": "//api/v1/userregistration/verify/oauth2",
              "headers": {
                "content-type": "application/json"
              }
            };


            var req = http.request(options, function (res) {
              var chunks = [];

              res.on("data", function (chunk) {
                chunks.push(chunk);
              });

              res.on("end", function () {
                var body = Buffer.concat(chunks);
                console.log(body.toString());
              });
            });


            req.write(JSON.stringify({ client_id:
            'ffffffff-ffff-4fff-8fff-ffffffffffff',
              client_secret: 'ffffffff-ffff-4fff-8fff-ffffffffffff',
              token: 'ffffffffffff' }));
            req.end();
        - lang: Python_python3
          source: >-
            import http.client


            conn = http.client.HTTPSConnection("api.meetflo.com")


            payload =
            "{\"client_id\":\"ffffffff-ffff-4fff-8fff-ffffffffffff\",\"client_secret\":\"ffffffff-ffff-4fff-8fff-ffffffffffff\",\"token\":\"ffffffffffff\"}"


            headers = { 'content-type': "application/json" }


            conn.request("POST", "//api/v1/userregistration/verify/oauth2",
            payload, headers)


            res = conn.getresponse()

            data = res.read()


            print(data.decode("utf-8"))
        - lang: Python_requests
          source: >-
            import requests


            url =
            "https://api.meetflo.com//api/v1/userregistration/verify/oauth2"


            payload =
            "{\"client_id\":\"ffffffff-ffff-4fff-8fff-ffffffffffff\",\"client_secret\":\"ffffffff-ffff-4fff-8fff-ffffffffffff\",\"token\":\"ffffffffffff\"}"

            headers = {'content-type': 'application/json'}


            response = requests.request("POST", url, data=payload,
            headers=headers)


            print(response.text)
        - lang: Shell_curl
          source: |-
            curl --request POST \
              --url https://api.meetflo.com//api/v1/userregistration/verify/oauth2 \
              --header 'content-type: application/json' \
              --data '{"client_id":"ffffffff-ffff-4fff-8fff-ffffffffffff","client_secret":"ffffffff-ffff-4fff-8fff-ffffffffffff","token":"ffffffffffff"}'
  /api/v1/userregistration/email:
    post:
      operationId: verifyEmail
      summary: Verify email
      description: Verifying email availability
      tags:
        - Registration
      responses:
        '200':
          description: Successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VerifiedEmail'
        '500':
          $ref: '#/components/responses/InternalServerError'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Email'
        description: Verify Email
        required: true
      x-code-samples:
        - lang: Java_okhttp
          source: >-
            OkHttpClient client = new OkHttpClient();


            MediaType mediaType = MediaType.parse("application/json");

            RequestBody body = RequestBody.create(mediaType,
            "{\"email\":\"user@example.com\"}");

            Request request = new Request.Builder()
              .url("https://api.meetflo.com//api/v1/userregistration/email")
              .post(body)
              .addHeader("content-type", "application/json")
              .build();

            Response response = client.newCall(request).execute();
        - lang: Javascript_xhr
          source: >-
            var data = JSON.stringify({
              "email": "user@example.com"
            });


            var xhr = new XMLHttpRequest();

            xhr.withCredentials = true;


            xhr.addEventListener("readystatechange", function () {
              if (this.readyState === this.DONE) {
                console.log(this.responseText);
              }
            });


            xhr.open("POST",
            "https://api.meetflo.com//api/v1/userregistration/email");

            xhr.setRequestHeader("content-type", "application/json");


            xhr.send(data);
        - lang: Node_native
          source: |-
            var http = require("https");

            var options = {
              "method": "POST",
              "hostname": "api.meetflo.com",
              "port": null,
              "path": "//api/v1/userregistration/email",
              "headers": {
                "content-type": "application/json"
              }
            };

            var req = http.request(options, function (res) {
              var chunks = [];

              res.on("data", function (chunk) {
                chunks.push(chunk);
              });

              res.on("end", function () {
                var body = Buffer.concat(chunks);
                console.log(body.toString());
              });
            });

            req.write(JSON.stringify({ email: 'user@example.com' }));
            req.end();
        - lang: Python_python3
          source: >-
            import http.client


            conn = http.client.HTTPSConnection("api.meetflo.com")


            payload = "{\"email\":\"user@example.com\"}"


            headers = { 'content-type': "application/json" }


            conn.request("POST", "//api/v1/userregistration/email", payload,
            headers)


            res = conn.getresponse()

            data = res.read()


            print(data.decode("utf-8"))
        - lang: Python_requests
          source: >-
            import requests


            url = "https://api.meetflo.com//api/v1/userregistration/email"


            payload = "{\"email\":\"user@example.com\"}"

            headers = {'content-type': 'application/json'}


            response = requests.request("POST", url, data=payload,
            headers=headers)


            print(response.text)
        - lang: Shell_curl
          source: |-
            curl --request POST \
              --url https://api.meetflo.com//api/v1/userregistration/email \
              --header 'content-type: application/json' \
              --data '{"email":"user@example.com"}'
  /api/v1/userregistration/resend:
    post:
      operationId: resendEmail
      summary: Resend email
      description: ''
      tags:
        - Registration
      responses:
        '200':
          description: Successful response.
        '404':
          description: >-
            Registration not found - There is no pending registration
            confirmation to resend. Either there is no registration, email is
            already confirmed, or registration has expired
        '500':
          $ref: '#/components/responses/InternalServerError'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Email'
        description: Resned Email
        required: true
      x-code-samples:
        - lang: Java_okhttp
          source: >-
            OkHttpClient client = new OkHttpClient();


            MediaType mediaType = MediaType.parse("application/json");

            RequestBody body = RequestBody.create(mediaType,
            "{\"email\":\"user@example.com\"}");

            Request request = new Request.Builder()
              .url("https://api.meetflo.com//api/v1/userregistration/resend")
              .post(body)
              .addHeader("content-type", "application/json")
              .build();

            Response response = client.newCall(request).execute();
        - lang: Javascript_xhr
          source: >-
            var data = JSON.stringify({
              "email": "user@example.com"
            });


            var xhr = new XMLHttpRequest();

            xhr.withCredentials = true;


            xhr.addEventListener("readystatechange", function () {
              if (this.readyState === this.DONE) {
                console.log(this.responseText);
              }
            });


            xhr.open("POST",
            "https://api.meetflo.com//api/v1/userregistration/resend");

            xhr.setRequestHeader("content-type", "application/json");


            xhr.send(data);
        - lang: Node_native
          source: |-
            var http = require("https");

            var options = {
              "method": "POST",
              "hostname": "api.meetflo.com",
              "port": null,
              "path": "//api/v1/userregistration/resend",
              "headers": {
                "content-type": "application/json"
              }
            };

            var req = http.request(options, function (res) {
              var chunks = [];

              res.on("data", function (chunk) {
                chunks.push(chunk);
              });

              res.on("end", function () {
                var body = Buffer.concat(chunks);
                console.log(body.toString());
              });
            });

            req.write(JSON.stringify({ email: 'user@example.com' }));
            req.end();
        - lang: Python_python3
          source: >-
            import http.client


            conn = http.client.HTTPSConnection("api.meetflo.com")


            payload = "{\"email\":\"user@example.com\"}"


            headers = { 'content-type': "application/json" }


            conn.request("POST", "//api/v1/userregistration/resend", payload,
            headers)


            res = conn.getresponse()

            data = res.read()


            print(data.decode("utf-8"))
        - lang: Python_requests
          source: >-
            import requests


            url = "https://api.meetflo.com//api/v1/userregistration/resend"


            payload = "{\"email\":\"user@example.com\"}"

            headers = {'content-type': 'application/json'}


            response = requests.request("POST", url, data=payload,
            headers=headers)


            print(response.text)
        - lang: Shell_curl
          source: |-
            curl --request POST \
              --url https://api.meetflo.com//api/v1/userregistration/resend \
              --header 'content-type: application/json' \
              --data '{"email":"user@example.com"}'
  /api/v1/useraccounts/:
    post:
      operationId: addUser
      summary: Add User
      security:
        - OAuth2:
            - admin
      description: Add User Account
      tags:
        - Automated User Creation
      parameters:
        - $ref: '#/components/parameters/AdminAuthorization'
      responses:
        '200':
          description: Successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserAccountResult'
        '500':
          $ref: '#/components/responses/InternalServerError'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserAccount'
        description: User
        required: true
      x-code-samples:
        - lang: Java_okhttp
          source: >-
            OkHttpClient client = new OkHttpClient();


            MediaType mediaType = MediaType.parse("application/json");

            RequestBody body = RequestBody.create(mediaType,
            "{\"group_id\":\"ffffffff-ffff-4fff-8fff-ffffffffffff\",\"email\":\"user@example.com\",\"password\":\"passw0rd\",\"firstname\":\"Andrew\",\"lastname\":\"Chen\",\"phone_mobile\":310123456,\"address\":\"3750
            Robertson Blvd\",\"address2\":\"string\",\"city\":\"Los
            Angeles\",\"state\":\"CA\",\"country\":\"us\",\"postalcode\":0,\"timezone\":\"US/Pacific\"}");

            Request request = new Request.Builder()
              .url("https://api.meetflo.com//api/v1/useraccounts/")
              .post(body)
              .addHeader("content-type", "application/json")
              .addHeader("authorization", "Bearer REPLACE_BEARER_TOKEN")
              .build();

            Response response = client.newCall(request).execute();
        - lang: Javascript_xhr
          source: >-
            var data = JSON.stringify({
              "group_id": "ffffffff-ffff-4fff-8fff-ffffffffffff",
              "email": "user@example.com",
              "password": "passw0rd",
              "firstname": "Andrew",
              "lastname": "Chen",
              "phone_mobile": 310123456,
              "address": "3750 Robertson Blvd",
              "address2": "string",
              "city": "Los Angeles",
              "state": "CA",
              "country": "us",
              "postalcode": 0,
              "timezone": "US/Pacific"
            });


            var xhr = new XMLHttpRequest();

            xhr.withCredentials = true;


            xhr.addEventListener("readystatechange", function () {
              if (this.readyState === this.DONE) {
                console.log(this.responseText);
              }
            });


            xhr.open("POST", "https://api.meetflo.com//api/v1/useraccounts/");

            xhr.setRequestHeader("content-type", "application/json");

            xhr.setRequestHeader("authorization", "Bearer
            REPLACE_BEARER_TOKEN");


            xhr.send(data);
        - lang: Node_native
          source: >-
            var http = require("https");


            var options = {
              "method": "POST",
              "hostname": "api.meetflo.com",
              "port": null,
              "path": "//api/v1/useraccounts/",
              "headers": {
                "content-type": "application/json",
                "authorization": "Bearer REPLACE_BEARER_TOKEN"
              }
            };


            var req = http.request(options, function (res) {
              var chunks = [];

              res.on("data", function (chunk) {
                chunks.push(chunk);
              });

              res.on("end", function () {
                var body = Buffer.concat(chunks);
                console.log(body.toString());
              });
            });


            req.write(JSON.stringify({ group_id:
            'ffffffff-ffff-4fff-8fff-ffffffffffff',
              email: 'user@example.com',
              password: 'passw0rd',
              firstname: 'Andrew',
              lastname: 'Chen',
              phone_mobile: 310123456,
              address: '3750 Robertson Blvd',
              address2: 'string',
              city: 'Los Angeles',
              state: 'CA',
              country: 'us',
              postalcode: 0,
              timezone: 'US/Pacific' }));
            req.end();
        - lang: Python_python3
          source: >-
            import http.client


            conn = http.client.HTTPSConnection("api.meetflo.com")


            payload =
            "{\"group_id\":\"ffffffff-ffff-4fff-8fff-ffffffffffff\",\"email\":\"user@example.com\",\"password\":\"passw0rd\",\"firstname\":\"Andrew\",\"lastname\":\"Chen\",\"phone_mobile\":310123456,\"address\":\"3750
            Robertson Blvd\",\"address2\":\"string\",\"city\":\"Los
            Angeles\",\"state\":\"CA\",\"country\":\"us\",\"postalcode\":0,\"timezone\":\"US/Pacific\"}"


            headers = {
                'content-type': "application/json",
                'authorization': "Bearer REPLACE_BEARER_TOKEN"
                }

            conn.request("POST", "//api/v1/useraccounts/", payload, headers)


            res = conn.getresponse()

            data = res.read()


            print(data.decode("utf-8"))
        - lang: Python_requests
          source: >-
            import requests


            url = "https://api.meetflo.com//api/v1/useraccounts/"


            payload =
            "{\"group_id\":\"ffffffff-ffff-4fff-8fff-ffffffffffff\",\"email\":\"user@example.com\",\"password\":\"passw0rd\",\"firstname\":\"Andrew\",\"lastname\":\"Chen\",\"phone_mobile\":310123456,\"address\":\"3750
            Robertson Blvd\",\"address2\":\"string\",\"city\":\"Los
            Angeles\",\"state\":\"CA\",\"country\":\"us\",\"postalcode\":0,\"timezone\":\"US/Pacific\"}"

            headers = {
                'content-type': "application/json",
                'authorization': "Bearer REPLACE_BEARER_TOKEN"
                }

            response = requests.request("POST", url, data=payload,
            headers=headers)


            print(response.text)
        - lang: Shell_curl
          source: |-
            curl --request POST \
              --url https://api.meetflo.com//api/v1/useraccounts/ \
              --header 'authorization: Bearer REPLACE_BEARER_TOKEN' \
              --header 'content-type: application/json' \
              --data '{"group_id":"ffffffff-ffff-4fff-8fff-ffffffffffff","email":"user@example.com","password":"passw0rd","firstname":"Andrew","lastname":"Chen","phone_mobile":310123456,"address":"3750 Robertson Blvd","address2":"string","city":"Los Angeles","state":"CA","country":"us","postalcode":0,"timezone":"US/Pacific"}'
  '/api/v1/subscriptions/user/{user_id}':
    get:
      operationId: subscription
      summary: Get Subscription
      security:
        - OAuth2:
            - user
      description: >
        If account or user does not exist, then response body will be empty


        If no subscription data is found for an existing account or user, then
        an empty object will be returned:


        ```

        { }

        ```


        If subscription data is found, an object with the following schema will
        be returned:


        ```

        {
          "account_id": UUID,
          "stripe_customer_id": String,
          "plan_id": String,
          "source_id": String,
          "status": Status,
          "created_at": Date,
          "updated_at": Date,
          "current_period_end": Date,
          "current_period_start": Date,
          "canceled_at": Optional<Date>,
          "ended_at": Optional<Date>
        }

        ```
      tags:
        - Account Subscriptions
      parameters:
        - $ref: '#/components/parameters/Authorization'
        - name: user_id
          in: path
          description: User ID
          required: true
          schema:
            $ref: '#/components/schemas/Uuid'
      responses:
        '200':
          description: Successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Subscription'
        '500':
          $ref: '#/components/responses/InternalServerError'
      x-code-samples:
        - lang: Java_okhttp
          source: |-
            OkHttpClient client = new OkHttpClient();

            Request request = new Request.Builder()
              .url("https://api.meetflo.com//api/v1/subscriptions/user/%7Buser_id%7D")
              .get()
              .addHeader("authorization", "Bearer REPLACE_BEARER_TOKEN")
              .build();

            Response response = client.newCall(request).execute();
        - lang: Javascript_xhr
          source: >-
            var data = null;


            var xhr = new XMLHttpRequest();

            xhr.withCredentials = true;


            xhr.addEventListener("readystatechange", function () {
              if (this.readyState === this.DONE) {
                console.log(this.responseText);
              }
            });


            xhr.open("GET",
            "https://api.meetflo.com//api/v1/subscriptions/user/%7Buser_id%7D");

            xhr.setRequestHeader("authorization", "Bearer
            REPLACE_BEARER_TOKEN");


            xhr.send(data);
        - lang: Node_native
          source: |-
            var http = require("https");

            var options = {
              "method": "GET",
              "hostname": "api.meetflo.com",
              "port": null,
              "path": "//api/v1/subscriptions/user/%7Buser_id%7D",
              "headers": {
                "authorization": "Bearer REPLACE_BEARER_TOKEN"
              }
            };

            var req = http.request(options, function (res) {
              var chunks = [];

              res.on("data", function (chunk) {
                chunks.push(chunk);
              });

              res.on("end", function () {
                var body = Buffer.concat(chunks);
                console.log(body.toString());
              });
            });

            req.end();
        - lang: Python_python3
          source: >-
            import http.client


            conn = http.client.HTTPSConnection("api.meetflo.com")


            headers = { 'authorization': "Bearer REPLACE_BEARER_TOKEN" }


            conn.request("GET", "//api/v1/subscriptions/user/%7Buser_id%7D",
            headers=headers)


            res = conn.getresponse()

            data = res.read()


            print(data.decode("utf-8"))
        - lang: Python_requests
          source: >-
            import requests


            url =
            "https://api.meetflo.com//api/v1/subscriptions/user/%7Buser_id%7D"


            headers = {'authorization': 'Bearer REPLACE_BEARER_TOKEN'}


            response = requests.request("GET", url, headers=headers)


            print(response.text)
        - lang: Shell_curl
          source: |-
            curl --request GET \
              --url https://api.meetflo.com//api/v1/subscriptions/user/%7Buser_id%7D \
              --header 'authorization: Bearer REPLACE_BEARER_TOKEN'
  '/api/v1/subscriptions/plan/{plan_id}':
    get:
      operationId: getPlan
      summary: Get Plan
      tags:
        - Account Subscriptions
      parameters:
        - name: plan_id
          in: path
          description: ID of the subscription plan
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Plan'
        '500':
          $ref: '#/components/responses/InternalServerError'
      x-code-samples:
        - lang: Java_okhttp
          source: |-
            OkHttpClient client = new OkHttpClient();

            Request request = new Request.Builder()
              .url("https://api.meetflo.com//api/v1/subscriptions/plan/%7Bplan_id%7D")
              .get()
              .build();

            Response response = client.newCall(request).execute();
        - lang: Javascript_xhr
          source: >-
            var data = null;


            var xhr = new XMLHttpRequest();

            xhr.withCredentials = true;


            xhr.addEventListener("readystatechange", function () {
              if (this.readyState === this.DONE) {
                console.log(this.responseText);
              }
            });


            xhr.open("GET",
            "https://api.meetflo.com//api/v1/subscriptions/plan/%7Bplan_id%7D");


            xhr.send(data);
        - lang: Node_native
          source: |-
            var http = require("https");

            var options = {
              "method": "GET",
              "hostname": "api.meetflo.com",
              "port": null,
              "path": "//api/v1/subscriptions/plan/%7Bplan_id%7D",
              "headers": {}
            };

            var req = http.request(options, function (res) {
              var chunks = [];

              res.on("data", function (chunk) {
                chunks.push(chunk);
              });

              res.on("end", function () {
                var body = Buffer.concat(chunks);
                console.log(body.toString());
              });
            });

            req.end();
        - lang: Python_python3
          source: |-
            import http.client

            conn = http.client.HTTPSConnection("api.meetflo.com")

            conn.request("GET", "//api/v1/subscriptions/plan/%7Bplan_id%7D")

            res = conn.getresponse()
            data = res.read()

            print(data.decode("utf-8"))
        - lang: Python_requests
          source: >-
            import requests


            url =
            "https://api.meetflo.com//api/v1/subscriptions/plan/%7Bplan_id%7D"


            response = requests.request("GET", url)


            print(response.text)
        - lang: Shell_curl
          source: |-
            curl --request GET \
              --url https://api.meetflo.com//api/v1/subscriptions/plan/%7Bplan_id%7D
  '/api/v1/subscriptions/user/{user_id}/payment/stripe':
    post:
      operationId: addPayment
      summary: Add Payment / Subscribe
      security:
        - OAuth2:
            - user
      tags:
        - Account Subscriptions
      parameters:
        - $ref: '#/components/parameters/Authorization'
        - name: user_id
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/Uuid'
      responses:
        '200':
          description: Successful response.
        '500':
          $ref: '#/components/responses/InternalServerError'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Payment'
        description: >-
          ID of the user being subscribed. Currently this is limited to the
          owner of the account.
        required: true
      x-code-samples:
        - lang: Java_okhttp
          source: >-
            OkHttpClient client = new OkHttpClient();


            MediaType mediaType = MediaType.parse("application/json");

            RequestBody body = RequestBody.create(mediaType,
            "{\"stripe_token\":\"string\",\"plan_id\":\"string\",\"source_id\":\"string\"}");

            Request request = new Request.Builder()
              .url("https://api.meetflo.com//api/v1/subscriptions/user/%7Buser_id%7D/payment/stripe")
              .post(body)
              .addHeader("content-type", "application/json")
              .addHeader("authorization", "Bearer REPLACE_BEARER_TOKEN")
              .build();

            Response response = client.newCall(request).execute();
        - lang: Javascript_xhr
          source: >-
            var data = JSON.stringify({
              "stripe_token": "string",
              "plan_id": "string",
              "source_id": "string"
            });


            var xhr = new XMLHttpRequest();

            xhr.withCredentials = true;


            xhr.addEventListener("readystatechange", function () {
              if (this.readyState === this.DONE) {
                console.log(this.responseText);
              }
            });


            xhr.open("POST",
            "https://api.meetflo.com//api/v1/subscriptions/user/%7Buser_id%7D/payment/stripe");

            xhr.setRequestHeader("content-type", "application/json");

            xhr.setRequestHeader("authorization", "Bearer
            REPLACE_BEARER_TOKEN");


            xhr.send(data);
        - lang: Node_native
          source: |-
            var http = require("https");

            var options = {
              "method": "POST",
              "hostname": "api.meetflo.com",
              "port": null,
              "path": "//api/v1/subscriptions/user/%7Buser_id%7D/payment/stripe",
              "headers": {
                "content-type": "application/json",
                "authorization": "Bearer REPLACE_BEARER_TOKEN"
              }
            };

            var req = http.request(options, function (res) {
              var chunks = [];

              res.on("data", function (chunk) {
                chunks.push(chunk);
              });

              res.on("end", function () {
                var body = Buffer.concat(chunks);
                console.log(body.toString());
              });
            });

            req.write(JSON.stringify({ stripe_token: 'string',
              plan_id: 'string',
              source_id: 'string' }));
            req.end();
        - lang: Python_python3
          source: >-
            import http.client


            conn = http.client.HTTPSConnection("api.meetflo.com")


            payload =
            "{\"stripe_token\":\"string\",\"plan_id\":\"string\",\"source_id\":\"string\"}"


            headers = {
                'content-type': "application/json",
                'authorization': "Bearer REPLACE_BEARER_TOKEN"
                }

            conn.request("POST",
            "//api/v1/subscriptions/user/%7Buser_id%7D/payment/stripe", payload,
            headers)


            res = conn.getresponse()

            data = res.read()


            print(data.decode("utf-8"))
        - lang: Python_requests
          source: >-
            import requests


            url =
            "https://api.meetflo.com//api/v1/subscriptions/user/%7Buser_id%7D/payment/stripe"


            payload =
            "{\"stripe_token\":\"string\",\"plan_id\":\"string\",\"source_id\":\"string\"}"

            headers = {
                'content-type': "application/json",
                'authorization': "Bearer REPLACE_BEARER_TOKEN"
                }

            response = requests.request("POST", url, data=payload,
            headers=headers)


            print(response.text)
        - lang: Shell_curl
          source: |-
            curl --request POST \
              --url https://api.meetflo.com//api/v1/subscriptions/user/%7Buser_id%7D/payment/stripe \
              --header 'authorization: Bearer REPLACE_BEARER_TOKEN' \
              --header 'content-type: application/json' \
              --data '{"stripe_token":"string","plan_id":"string","source_id":"string"}'
  '/api/v1/directives/icd/{icd_id}/openvalve':
    post:
      operationId: openVavle
      summary: Open Valve
      description: >-
        The result of this endpoint is asynchronous, meaning that the response
        return before resulting valve state change actually succeeds or fails.
        Validating that the valve state has successfully been changed must be
        done by monitoring the telemetry stream for a change in the valve
        property.
      security:
        - OAuth2:
            - user
      tags:
        - Directives
      parameters:
        - $ref: '#/components/parameters/Authorization'
        - name: icd_id
          description: UUID of paired device
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/Uuid'
      responses:
        '200':
          description: System mode change request initiated.
        '400':
          $ref: '#/components/responses/DataValidataionError'
        '401':
          $ref: '#/components/responses/InvalidAuthTokenError'
        '403':
          $ref: '#/components/responses/NoPermissionError'
        '500':
          $ref: '#/components/responses/InternalServerError'
      x-code-samples:
        - lang: Java_okhttp
          source: |-
            OkHttpClient client = new OkHttpClient();

            Request request = new Request.Builder()
              .url("https://api.meetflo.com//api/v1/directives/icd/%7Bicd_id%7D/openvalve")
              .post(null)
              .addHeader("authorization", "Bearer REPLACE_BEARER_TOKEN")
              .build();

            Response response = client.newCall(request).execute();
        - lang: Javascript_xhr
          source: >-
            var data = null;


            var xhr = new XMLHttpRequest();

            xhr.withCredentials = true;


            xhr.addEventListener("readystatechange", function () {
              if (this.readyState === this.DONE) {
                console.log(this.responseText);
              }
            });


            xhr.open("POST",
            "https://api.meetflo.com//api/v1/directives/icd/%7Bicd_id%7D/openvalve");

            xhr.setRequestHeader("authorization", "Bearer
            REPLACE_BEARER_TOKEN");


            xhr.send(data);
        - lang: Node_native
          source: |-
            var http = require("https");

            var options = {
              "method": "POST",
              "hostname": "api.meetflo.com",
              "port": null,
              "path": "//api/v1/directives/icd/%7Bicd_id%7D/openvalve",
              "headers": {
                "authorization": "Bearer REPLACE_BEARER_TOKEN"
              }
            };

            var req = http.request(options, function (res) {
              var chunks = [];

              res.on("data", function (chunk) {
                chunks.push(chunk);
              });

              res.on("end", function () {
                var body = Buffer.concat(chunks);
                console.log(body.toString());
              });
            });

            req.end();
        - lang: Python_python3
          source: >-
            import http.client


            conn = http.client.HTTPSConnection("api.meetflo.com")


            headers = { 'authorization': "Bearer REPLACE_BEARER_TOKEN" }


            conn.request("POST",
            "//api/v1/directives/icd/%7Bicd_id%7D/openvalve", headers=headers)


            res = conn.getresponse()

            data = res.read()


            print(data.decode("utf-8"))
        - lang: Python_requests
          source: >-
            import requests


            url =
            "https://api.meetflo.com//api/v1/directives/icd/%7Bicd_id%7D/openvalve"


            headers = {'authorization': 'Bearer REPLACE_BEARER_TOKEN'}


            response = requests.request("POST", url, headers=headers)


            print(response.text)
        - lang: Shell_curl
          source: |-
            curl --request POST \
              --url https://api.meetflo.com//api/v1/directives/icd/%7Bicd_id%7D/openvalve \
              --header 'authorization: Bearer REPLACE_BEARER_TOKEN'
  '/api/v1/directives/icd/{icd_id}/closevalve':
    post:
      operationId: closeVavle
      summary: Close Valve
      description: >-
        The result of this endpoint is asynchronous, meaning that the response
        return before resulting valve state change actually succeeds or fails.
        Validating that the valve state has successfully been changed must be
        done by monitoring the telemetry stream for a change in the valve
        property.
      security:
        - OAuth2:
            - user
      tags:
        - Directives
      parameters:
        - $ref: '#/components/parameters/Authorization'
        - name: icd_id
          description: UUID of paired device
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/Uuid'
      responses:
        '200':
          description: System mode change request initiated.
        '400':
          $ref: '#/components/responses/DataValidataionError'
        '401':
          $ref: '#/components/responses/InvalidAuthTokenError'
        '403':
          $ref: '#/components/responses/NoPermissionError'
        '500':
          $ref: '#/components/responses/InternalServerError'
      x-code-samples:
        - lang: Java_okhttp
          source: |-
            OkHttpClient client = new OkHttpClient();

            Request request = new Request.Builder()
              .url("https://api.meetflo.com//api/v1/directives/icd/%7Bicd_id%7D/closevalve")
              .post(null)
              .addHeader("authorization", "Bearer REPLACE_BEARER_TOKEN")
              .build();

            Response response = client.newCall(request).execute();
        - lang: Javascript_xhr
          source: >-
            var data = null;


            var xhr = new XMLHttpRequest();

            xhr.withCredentials = true;


            xhr.addEventListener("readystatechange", function () {
              if (this.readyState === this.DONE) {
                console.log(this.responseText);
              }
            });


            xhr.open("POST",
            "https://api.meetflo.com//api/v1/directives/icd/%7Bicd_id%7D/closevalve");

            xhr.setRequestHeader("authorization", "Bearer
            REPLACE_BEARER_TOKEN");


            xhr.send(data);
        - lang: Node_native
          source: |-
            var http = require("https");

            var options = {
              "method": "POST",
              "hostname": "api.meetflo.com",
              "port": null,
              "path": "//api/v1/directives/icd/%7Bicd_id%7D/closevalve",
              "headers": {
                "authorization": "Bearer REPLACE_BEARER_TOKEN"
              }
            };

            var req = http.request(options, function (res) {
              var chunks = [];

              res.on("data", function (chunk) {
                chunks.push(chunk);
              });

              res.on("end", function () {
                var body = Buffer.concat(chunks);
                console.log(body.toString());
              });
            });

            req.end();
        - lang: Python_python3
          source: >-
            import http.client


            conn = http.client.HTTPSConnection("api.meetflo.com")


            headers = { 'authorization': "Bearer REPLACE_BEARER_TOKEN" }


            conn.request("POST",
            "//api/v1/directives/icd/%7Bicd_id%7D/closevalve", headers=headers)


            res = conn.getresponse()

            data = res.read()


            print(data.decode("utf-8"))
        - lang: Python_requests
          source: >-
            import requests


            url =
            "https://api.meetflo.com//api/v1/directives/icd/%7Bicd_id%7D/closevalve"


            headers = {'authorization': 'Bearer REPLACE_BEARER_TOKEN'}


            response = requests.request("POST", url, headers=headers)


            print(response.text)
        - lang: Shell_curl
          source: |-
            curl --request POST \
              --url https://api.meetflo.com//api/v1/directives/icd/%7Bicd_id%7D/closevalve \
              --header 'authorization: Bearer REPLACE_BEARER_TOKEN'
  '/api/v1/devicesystemmode/icd/{icd_id}/setsystemmode':
    post:
      operationId: setSystemMode
      summary: Set System Mode
      description: >-
        Requests a change to the system mode of the Flo device. The result of
        this endpoint is asynchronous, meaning that the response return before
        resulting system mode change actually succeeds or fails. Validating that
        the system mode has successfully been changed must be done by monitoring
        the telemetry stream for a change in the system mode property,
      security:
        - OAuth2:
            - user
      tags:
        - Device System Mode
      parameters:
        - $ref: '#/components/parameters/Authorization'
        - name: icd_id
          description: UUID of paired device
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/Uuid'
      responses:
        '200':
          description: System mode change request initiated.
        '400':
          $ref: '#/components/responses/DataValidataionError'
        '401':
          $ref: '#/components/responses/InvalidAuthTokenError'
        '403':
          $ref: '#/components/responses/NoPermissionError'
        '500':
          $ref: '#/components/responses/InternalServerError'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              description: SystemMode
              properties:
                system_mode:
                  $ref: '#/components/schemas/SystemMode'
              required:
                - system_mode
        required: true
      x-code-samples:
        - lang: Java_okhttp
          source: >-
            OkHttpClient client = new OkHttpClient();


            MediaType mediaType = MediaType.parse("application/json");

            RequestBody body = RequestBody.create(mediaType,
            "{\"system_mode\":2}");

            Request request = new Request.Builder()
              .url("https://api.meetflo.com//api/v1/devicesystemmode/icd/%7Bicd_id%7D/setsystemmode")
              .post(body)
              .addHeader("content-type", "application/json")
              .addHeader("authorization", "Bearer REPLACE_BEARER_TOKEN")
              .build();

            Response response = client.newCall(request).execute();
        - lang: Javascript_xhr
          source: >-
            var data = JSON.stringify({
              "system_mode": 2
            });


            var xhr = new XMLHttpRequest();

            xhr.withCredentials = true;


            xhr.addEventListener("readystatechange", function () {
              if (this.readyState === this.DONE) {
                console.log(this.responseText);
              }
            });


            xhr.open("POST",
            "https://api.meetflo.com//api/v1/devicesystemmode/icd/%7Bicd_id%7D/setsystemmode");

            xhr.setRequestHeader("content-type", "application/json");

            xhr.setRequestHeader("authorization", "Bearer
            REPLACE_BEARER_TOKEN");


            xhr.send(data);
        - lang: Node_native
          source: |-
            var http = require("https");

            var options = {
              "method": "POST",
              "hostname": "api.meetflo.com",
              "port": null,
              "path": "//api/v1/devicesystemmode/icd/%7Bicd_id%7D/setsystemmode",
              "headers": {
                "content-type": "application/json",
                "authorization": "Bearer REPLACE_BEARER_TOKEN"
              }
            };

            var req = http.request(options, function (res) {
              var chunks = [];

              res.on("data", function (chunk) {
                chunks.push(chunk);
              });

              res.on("end", function () {
                var body = Buffer.concat(chunks);
                console.log(body.toString());
              });
            });

            req.write(JSON.stringify({ system_mode: 2 }));
            req.end();
        - lang: Python_python3
          source: >-
            import http.client


            conn = http.client.HTTPSConnection("api.meetflo.com")


            payload = "{\"system_mode\":2}"


            headers = {
                'content-type': "application/json",
                'authorization': "Bearer REPLACE_BEARER_TOKEN"
                }

            conn.request("POST",
            "//api/v1/devicesystemmode/icd/%7Bicd_id%7D/setsystemmode", payload,
            headers)


            res = conn.getresponse()

            data = res.read()


            print(data.decode("utf-8"))
        - lang: Python_requests
          source: >-
            import requests


            url =
            "https://api.meetflo.com//api/v1/devicesystemmode/icd/%7Bicd_id%7D/setsystemmode"


            payload = "{\"system_mode\":2}"

            headers = {
                'content-type': "application/json",
                'authorization': "Bearer REPLACE_BEARER_TOKEN"
                }

            response = requests.request("POST", url, data=payload,
            headers=headers)


            print(response.text)
        - lang: Shell_curl
          source: |-
            curl --request POST \
              --url https://api.meetflo.com//api/v1/devicesystemmode/icd/%7Bicd_id%7D/setsystemmode \
              --header 'authorization: Bearer REPLACE_BEARER_TOKEN' \
              --header 'content-type: application/json' \
              --data '{"system_mode":2}'
  '/api/v1/devicesystemmode/icd/{icd_id}/sleep':
    post:
      operationId: sleep
      summary: Set Sleep System Mode
      description: >-
        Puts the Flo device to "sleep" for a defined period of time. The device
        system mode will change to 5 (manual mode) then change to a specified
        system mode after a specified period of time. The result of this
        endpoint is asynchronous, meaning that the response return before
        resulting system mode change actually succeeds or fails. Validating that
        the system mode has successfully been changed must be done by monitoring
        the telemetry stream for a change in the system mode property,
      security:
        - OAuth2:
            - user
      tags:
        - Device System Mode
      parameters:
        - $ref: '#/components/parameters/Authorization'
        - name: icd_id
          description: UUID of paired device
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/Uuid'
      responses:
        '200':
          description: System mode change request initiated.
        '400':
          $ref: '#/components/responses/DataValidataionError'
        '401':
          $ref: '#/components/responses/InvalidAuthTokenError'
        '403':
          $ref: '#/components/responses/NoPermissionError'
        '500':
          $ref: '#/components/responses/InternalServerError'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SleepMode'
        required: true
      x-code-samples:
        - lang: Java_okhttp
          source: >-
            OkHttpClient client = new OkHttpClient();


            MediaType mediaType = MediaType.parse("application/json");

            RequestBody body = RequestBody.create(mediaType,
            "{\"sleep_minutes\":60,\"wake_up_system_mode\":2}");

            Request request = new Request.Builder()
              .url("https://api.meetflo.com//api/v1/devicesystemmode/icd/%7Bicd_id%7D/sleep")
              .post(body)
              .addHeader("content-type", "application/json")
              .addHeader("authorization", "Bearer REPLACE_BEARER_TOKEN")
              .build();

            Response response = client.newCall(request).execute();
        - lang: Javascript_xhr
          source: >-
            var data = JSON.stringify({
              "sleep_minutes": 60,
              "wake_up_system_mode": 2
            });


            var xhr = new XMLHttpRequest();

            xhr.withCredentials = true;


            xhr.addEventListener("readystatechange", function () {
              if (this.readyState === this.DONE) {
                console.log(this.responseText);
              }
            });


            xhr.open("POST",
            "https://api.meetflo.com//api/v1/devicesystemmode/icd/%7Bicd_id%7D/sleep");

            xhr.setRequestHeader("content-type", "application/json");

            xhr.setRequestHeader("authorization", "Bearer
            REPLACE_BEARER_TOKEN");


            xhr.send(data);
        - lang: Node_native
          source: >-
            var http = require("https");


            var options = {
              "method": "POST",
              "hostname": "api.meetflo.com",
              "port": null,
              "path": "//api/v1/devicesystemmode/icd/%7Bicd_id%7D/sleep",
              "headers": {
                "content-type": "application/json",
                "authorization": "Bearer REPLACE_BEARER_TOKEN"
              }
            };


            var req = http.request(options, function (res) {
              var chunks = [];

              res.on("data", function (chunk) {
                chunks.push(chunk);
              });

              res.on("end", function () {
                var body = Buffer.concat(chunks);
                console.log(body.toString());
              });
            });


            req.write(JSON.stringify({ sleep_minutes: 60, wake_up_system_mode: 2
            }));

            req.end();
        - lang: Python_python3
          source: >-
            import http.client


            conn = http.client.HTTPSConnection("api.meetflo.com")


            payload = "{\"sleep_minutes\":60,\"wake_up_system_mode\":2}"


            headers = {
                'content-type': "application/json",
                'authorization': "Bearer REPLACE_BEARER_TOKEN"
                }

            conn.request("POST",
            "//api/v1/devicesystemmode/icd/%7Bicd_id%7D/sleep", payload,
            headers)


            res = conn.getresponse()

            data = res.read()


            print(data.decode("utf-8"))
        - lang: Python_requests
          source: >-
            import requests


            url =
            "https://api.meetflo.com//api/v1/devicesystemmode/icd/%7Bicd_id%7D/sleep"


            payload = "{\"sleep_minutes\":60,\"wake_up_system_mode\":2}"

            headers = {
                'content-type': "application/json",
                'authorization': "Bearer REPLACE_BEARER_TOKEN"
                }

            response = requests.request("POST", url, data=payload,
            headers=headers)


            print(response.text)
        - lang: Shell_curl
          source: |-
            curl --request POST \
              --url https://api.meetflo.com//api/v1/devicesystemmode/icd/%7Bicd_id%7D/sleep \
              --header 'authorization: Bearer REPLACE_BEARER_TOKEN' \
              --header 'content-type: application/json' \
              --data '{"sleep_minutes":60,"wake_up_system_mode":2}'
  '/api/v1/firmware/features/{version}':
    get:
      operationId: getFloDeviceFeatures
      summary: Get Flo Device Features
      description: >-
        Retrieves supported features versions that the requested firmware
        support
      security:
        - OAuth2:
            - user
      tags:
        - Firmware Features
      parameters:
        - $ref: '#/components/parameters/Authorization'
        - name: version
          description: Version Name
          in: path
          required: true
          schema:
            type: string
            example: 3.5.8
      responses:
        '200':
          description: System mode change request initiated.
          content:
            application/json:
              schema:
                type: object
                properties:
                  features:
                    type: array
                    items:
                      $ref: '#/components/schemas/Feature'
                    description: Each list item will composed by a name and version.
                example:
                  features:
                    - name: away_mode
                      version: 2.0.0
                    - name: health_test
                      version: 1.0.5
                    - name: leak_detection
                      version: 3.1.0
              example:
                features:
                  - name: away_mode
                    version: 2.0.0
                  - name: health_test
                    version: 1.0.5
                  - name: leak_detection
                    version: 3.1.0
        '400':
          $ref: '#/components/responses/DataValidataionError'
        '401':
          $ref: '#/components/responses/InvalidAuthTokenError'
        '403':
          $ref: '#/components/responses/NoPermissionError'
        '500':
          $ref: '#/components/responses/InternalServerError'
      x-code-samples:
        - lang: Java_okhttp
          source: |-
            OkHttpClient client = new OkHttpClient();

            Request request = new Request.Builder()
              .url("https://api.meetflo.com//api/v1/firmware/features/%7Bversion%7D")
              .get()
              .addHeader("authorization", "Bearer REPLACE_BEARER_TOKEN")
              .build();

            Response response = client.newCall(request).execute();
        - lang: Javascript_xhr
          source: >-
            var data = null;


            var xhr = new XMLHttpRequest();

            xhr.withCredentials = true;


            xhr.addEventListener("readystatechange", function () {
              if (this.readyState === this.DONE) {
                console.log(this.responseText);
              }
            });


            xhr.open("GET",
            "https://api.meetflo.com//api/v1/firmware/features/%7Bversion%7D");

            xhr.setRequestHeader("authorization", "Bearer
            REPLACE_BEARER_TOKEN");


            xhr.send(data);
        - lang: Node_native
          source: |-
            var http = require("https");

            var options = {
              "method": "GET",
              "hostname": "api.meetflo.com",
              "port": null,
              "path": "//api/v1/firmware/features/%7Bversion%7D",
              "headers": {
                "authorization": "Bearer REPLACE_BEARER_TOKEN"
              }
            };

            var req = http.request(options, function (res) {
              var chunks = [];

              res.on("data", function (chunk) {
                chunks.push(chunk);
              });

              res.on("end", function () {
                var body = Buffer.concat(chunks);
                console.log(body.toString());
              });
            });

            req.end();
        - lang: Python_python3
          source: >-
            import http.client


            conn = http.client.HTTPSConnection("api.meetflo.com")


            headers = { 'authorization': "Bearer REPLACE_BEARER_TOKEN" }


            conn.request("GET", "//api/v1/firmware/features/%7Bversion%7D",
            headers=headers)


            res = conn.getresponse()

            data = res.read()


            print(data.decode("utf-8"))
        - lang: Python_requests
          source: >-
            import requests


            url =
            "https://api.meetflo.com//api/v1/firmware/features/%7Bversion%7D"


            headers = {'authorization': 'Bearer REPLACE_BEARER_TOKEN'}


            response = requests.request("GET", url, headers=headers)


            print(response.text)
        - lang: Shell_curl
          source: |-
            curl --request GET \
              --url https://api.meetflo.com//api/v1/firmware/features/%7Bversion%7D \
              --header 'authorization: Bearer REPLACE_BEARER_TOKEN'
  '/api/v1/flodetect/{device_id}':
    post:
      operationId: addFloDetect
      summary: Add FloDetect
      description: Endpoint to log executed computations for a device
      security:
        - OAuth2:
            - user
      tags:
        - Flo Detect
      parameters:
        - $ref: '#/components/parameters/Authorization'
        - name: device_id
          in: path
          description: Device ID of the device for which the computation was performed
          required: true
          schema:
            type: string
      responses:
        '200':
          $ref: '#/components/responses/Ok'
        '400':
          $ref: '#/components/responses/DataValidataionError'
        '401':
          $ref: '#/components/responses/InvalidAuthTokenError'
        '403':
          $ref: '#/components/responses/NoPermissionError'
        '500':
          $ref: '#/components/responses/InternalServerError'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddFloDetect'
        required: true
      x-code-samples:
        - lang: Java_okhttp
          source: >-
            OkHttpClient client = new OkHttpClient();


            MediaType mediaType = MediaType.parse("application/json");

            RequestBody body = RequestBody.create(mediaType,
            "{\"compute_end_date\":\"2019-01-10T06:42:41.244267\",\"fixtures\":[{\"name\":\"shower/bath\",\"index\":0,\"type\":1,\"gallons\":19.6176,\"ratio\":0.1508,\"num_events\":1},{\"name\":\"toilet\",\"index\":1,\"type\":2,\"gallons\":15.7767,\"ratio\":0.1213,\"num_events\":9},{\"name\":\"appliance\",\"index\":2,\"type\":3,\"gallons\":74.4954,\"ratio\":0.5726,\"num_events\":9},{\"name\":\"faucet\",\"index\":3,\"type\":4,\"gallons\":20.2066,\"ratio\":0.1553,\"num_events\":20},{\"name\":\"other\",\"index\":4,\"type\":5,\"gallons\":0,\"ratio\":0,\"num_events\":0},{\"name\":\"irrigation\",\"index\":5,\"type\":6,\"gallons\":0,\"ratio\":0,\"num_events\":0},{\"name\":\"pool/hot
            tub\",\"index\":6,\"type\":7,\"gallons\":0,\"ratio\":0,\"num_events\":0}],\"end_date\":\"2019-01-10T06:00:34.906Z\",\"status\":\"executed\",\"device_id\":\"ffffffffffff\",\"event_chronology\":[{\"fixture\":\"faucet\",\"not_label\":[],\"duration\":23,\"cluster_means\":[0.26727133811566733,0.6972295776930452,23],\"gpm\":0.6972295776930452,\"start\":\"2019-01-10T04:05:12.025Z\",\"end\":\"2019-01-10T04:05:34.025Z\",\"predicted_fixture\":\"pool/hot
            tub\",\"type\":4,\"flow\":0.26727133811566733},{\"fixture\":\"faucet\",\"not_label\":[],\"duration\":15,\"cluster_means\":[0.14796972950898996,0.5918789180359598,15],\"gpm\":0.5918789180359598,\"start\":\"2019-01-10T03:46:50.024Z\",\"end\":\"2019-01-10T03:47:04.024Z\",\"predicted_fixture\":\"pool/hot
            tub\",\"type\":4,\"flow\":0.14796972950898996},{\"fixture\":\"faucet\",\"not_label\":[],\"duration\":11,\"cluster_means\":[0.0955861132858243,0.5213787997408598,11],\"gpm\":0.5213787997408598,\"start\":\"2019-01-10T03:19:30.024Z\",\"end\":\"2019-01-10T03:19:40.025Z\",\"predicted_fixture\":\"pool/hot
            tub\",\"type\":4,\"flow\":0.0955861132858243},{\"fixture\":\"faucet\",\"not_label\":[],\"duration\":15,\"cluster_means\":[0.11051073981146763,0.4420429592458705,15],\"gpm\":0.4420429592458705,\"start\":\"2019-01-10T03:18:52.024Z\",\"end\":\"2019-01-10T03:19:06.024Z\",\"predicted_fixture\":\"pool/hot
            tub\",\"type\":4,\"flow\":0.11051073981146763},{\"fixture\":\"faucet\",\"not_label\":[],\"duration\":13,\"cluster_means\":[0.07248914106551661,0.3345652664562305,13],\"gpm\":0.3345652664562305,\"start\":\"2019-01-10T03:08:33.027Z\",\"end\":\"2019-01-10T03:08:45.027Z\",\"predicted_fixture\":\"pool/hot
            tub\",\"type\":4,\"flow\":0.07248914106551661},{\"fixture\":\"faucet\",\"not_label\":[],\"duration\":52,\"cluster_means\":[0.7232994692494259,0.8345763106724146,52],\"gpm\":0.8345763106724146,\"start\":\"2019-01-10T02:54:47.027Z\",\"end\":\"2019-01-10T02:55:38.027Z\",\"predicted_fixture\":\"pool/hot
            tub\",\"type\":4,\"flow\":0.7232994692494259},{\"fixture\":\"faucet\",\"not_label\":[],\"duration\":17,\"cluster_means\":[0.14906867004605714,0.5261247178096135,17],\"gpm\":0.5261247178096135,\"start\":\"2019-01-10T02:51:41.027Z\",\"end\":\"2019-01-10T02:51:57.027Z\",\"predicted_fixture\":\"pool/hot
            tub\",\"type\":4,\"flow\":0.14906867004605714},{\"fixture\":\"toilet\",\"sub_label\":{\"all\":[2],\"individual\":2},\"duration\":51,\"is_from_ml_profile\":true,\"cluster_means\":[1.7252895749080555,2.0297524410683003,51],\"gpm\":2.0297524410683003,\"start\":\"2019-01-09T20:34:07.020Z\",\"end\":\"2019-01-09T20:34:57.020Z\",\"label\":[0,5,6,9,13,14],\"type\":2,\"flow\":1.7252895749080555},{\"fixture\":\"toilet\",\"sub_label\":{\"all\":[2],\"individual\":2},\"duration\":39,\"is_from_ml_profile\":true,\"cluster_means\":[2.1283035190830626,3.274313106281635,39],\"gpm\":3.274313106281635,\"start\":\"2019-01-09T20:28:28.021Z\",\"end\":\"2019-01-09T20:29:06.021Z\",\"label\":[0,5,6,9,13,14],\"type\":2,\"flow\":2.1283035190830626},{\"fixture\":\"appliance\",\"sub_label\":{\"all\":[4],\"individual\":3},\"duration\":133,\"is_from_ml_profile\":true,\"cluster_means\":[8.186598550571112,3.6932023536411034,133],\"gpm\":3.6932023536411034,\"start\":\"2019-01-09T20:24:16.021Z\",\"end\":\"2019-01-09T20:26:28.021Z\",\"label\":[0,5,6,9,13,14],\"type\":3,\"flow\":8.186598550571112},{\"fixture\":\"faucet\",\"not_label\":[],\"duration\":64,\"cluster_means\":[1.4331223502416752,1.3435522033515706,64],\"gpm\":1.3435522033515706,\"start\":\"2019-01-09T20:17:06.022Z\",\"end\":\"2019-01-09T20:18:09.022Z\",\"predicted_fixture\":\"pool/hot
            tub\",\"type\":4,\"flow\":1.4331223502416752},{\"fixture\":\"faucet\",\"not_label\":[],\"duration\":76,\"cluster_means\":[1.8181129920589458,1.4353523621517994,76],\"gpm\":1.4353523621517994,\"start\":\"2019-01-09T20:09:04.023Z\",\"end\":\"2019-01-09T20:10:19.022Z\",\"predicted_fixture\":\"pool/hot
            tub\",\"type\":4,\"flow\":1.8181129920589458},{\"fixture\":\"faucet\",\"not_label\":[],\"duration\":36,\"cluster_means\":[0.5133975225489927,0.8556625375816546,36],\"gpm\":0.8556625375816546,\"start\":\"2019-01-09T19:59:57.024Z\",\"end\":\"2019-01-09T20:00:32.023Z\",\"predicted_fixture\":\"pool/hot
            tub\",\"type\":4,\"flow\":0.5133975225489927},{\"fixture\":\"faucet\",\"not_label\":[],\"duration\":19,\"cluster_means\":[0.2532803971332305,0.7998328330523067,19],\"gpm\":0.7998328330523067,\"start\":\"2019-01-09T19:55:16.024Z\",\"end\":\"2019-01-09T19:55:34.024Z\",\"predicted_fixture\":\"pool/hot
            tub\",\"type\":4,\"flow\":0.2532803971332305},{\"fixture\":\"faucet\",\"not_label\":[],\"duration\":23,\"cluster_means\":[0.1702594873385425,0.44415518436141516,23],\"gpm\":0.44415518436141516,\"start\":\"2019-01-09T19:34:57.028Z\",\"end\":\"2019-01-09T19:35:19.028Z\",\"predicted_fixture\":\"pool/hot
            tub\",\"type\":4,\"flow\":0.1702594873385425},{\"fixture\":\"appliance\",\"sub_label\":{\"all\":[4],\"individual\":3},\"duration\":137,\"is_from_ml_profile\":true,\"cluster_means\":[2.8342919026645013,1.241295723794672,137],\"gpm\":1.241295723794672,\"start\":\"2019-01-09T19:32:00.019Z\",\"end\":\"2019-01-09T19:34:16.028Z\",\"label\":[0,5,6,9,13,14],\"type\":3,\"flow\":2.8342919026645013},{\"fixture\":\"appliance\",\"sub_label\":{\"all\":[4],\"individual\":3},\"duration\":137,\"is_from_ml_profile\":true,\"cluster_means\":[4.679273849977214,2.049317014588561,137],\"gpm\":2.049317014588561,\"start\":\"2019-01-09T19:24:15.025Z\",\"end\":\"2019-01-09T19:26:31.022Z\",\"label\":[0,5,6,9,13,14],\"type\":3,\"flow\":4.679273849977214},{\"fixture\":\"faucet\",\"not_label\":[],\"duration\":20,\"cluster_means\":[0.23631201035015875,0.7089360310504763,20],\"gpm\":0.7089360310504763,\"start\":\"2019-01-09T19:15:12.028Z\",\"end\":\"2019-01-09T19:15:31.028Z\",\"predicted_fixture\":\"pool/hot
            tub\",\"type\":4,\"flow\":0.23631201035015875},{\"fixture\":\"appliance\",\"sub_label\":{\"all\":[4],\"individual\":3},\"duration\":421,\"is_from_ml_profile\":true,\"cluster_means\":[18.83973087059194,2.6849972737185666,421],\"gpm\":2.6849972737185666,\"start\":\"2019-01-09T19:08:01.028Z\",\"end\":\"2019-01-09T19:15:01.028Z\",\"label\":[0,5,6,9,13,14],\"type\":3,\"flow\":18.83973087059194},{\"fixture\":\"faucet\",\"not_label\":[],\"duration\":111,\"cluster_means\":[4.38310410029996,2.3692454596215997,111],\"gpm\":2.3692454596215997,\"start\":\"2019-01-09T19:05:33.018Z\",\"end\":\"2019-01-09T19:07:23.028Z\",\"predicted_fixture\":\"pool/hot
            tub\",\"type\":4,\"flow\":4.38310410029996},{\"fixture\":\"shower/bath\",\"sub_label\":{\"all\":[0,1,2,3,4],\"individual\":1},\"duration\":343,\"is_from_ml_profile\":true,\"cluster_means\":[19.617605857850336,3.4316511704694466,343],\"gpm\":3.4316511704694466,\"start\":\"2019-01-09T18:58:51.020Z\",\"end\":\"2019-01-09T19:04:33.019Z\",\"label\":[1,7,8,11,14],\"type\":1,\"flow\":19.617605857850336},{\"fixture\":\"toilet\",\"sub_label\":{\"all\":[2],\"individual\":2},\"duration\":34,\"is_from_ml_profile\":true,\"cluster_means\":[1.5995345282566789,2.8227079910411983,34],\"gpm\":2.8227079910411983,\"start\":\"2019-01-09T18:56:05.022Z\",\"end\":\"2019-01-09T18:56:38.021Z\",\"label\":[0,5,6,9,13,14],\"type\":2,\"flow\":1.5995345282566789},{\"fixture\":\"faucet\",\"not_label\":[],\"duration\":79,\"cluster_means\":[2.94967820075584,2.2402619246246886,79],\"gpm\":2.2402619246246886,\"start\":\"2019-01-09T18:50:43.027Z\",\"end\":\"2019-01-09T18:52:01.025Z\",\"predicted_fixture\":\"pool/hot
            tub\",\"type\":4,\"flow\":2.94967820075584},{\"fixture\":\"appliance\",\"sub_label\":{\"all\":[4],\"individual\":3},\"duration\":126,\"is_from_ml_profile\":true,\"cluster_means\":[6.579340706928584,3.133019384251707,126],\"gpm\":3.133019384251707,\"start\":\"2019-01-09T18:46:09.021Z\",\"end\":\"2019-01-09T18:48:14.020Z\",\"label\":[0,5,6,9,13,14],\"type\":3,\"flow\":6.579340706928584},{\"fixture\":\"faucet\",\"not_label\":[],\"duration\":71,\"cluster_means\":[3.574718429932732,3.020888814027661,71],\"gpm\":3.020888814027661,\"start\":\"2019-01-09T17:57:11.018Z\",\"end\":\"2019-01-09T17:58:21.019Z\",\"predicted_fixture\":\"pool/hot
            tub\",\"type\":4,\"flow\":3.574718429932732},{\"fixture\":\"toilet\",\"sub_label\":{\"all\":[2],\"individual\":2},\"duration\":49,\"is_from_ml_profile\":true,\"cluster_means\":[1.6635324458452192,2.0369785051165947,49],\"gpm\":2.0369785051165947,\"start\":\"2019-01-09T17:53:33.027Z\",\"end\":\"2019-01-09T17:54:21.028Z\",\"label\":[0,5,6,9,13,14],\"type\":2,\"flow\":1.6635324458452192},{\"fixture\":\"faucet\",\"not_label\":[],\"duration\":33,\"cluster_means\":[0.5784211677311059,1.0516748504201925,33],\"gpm\":1.0516748504201925,\"start\":\"2019-01-09T17:43:39.028Z\",\"end\":\"2019-01-09T17:44:11.027Z\",\"predicted_fixture\":\"pool/hot
            tub\",\"type\":4,\"flow\":0.5784211677311059},{\"fixture\":\"toilet\",\"sub_label\":{\"all\":[2],\"individual\":2},\"duration\":46,\"is_from_ml_profile\":true,\"cluster_means\":[1.5521737706842185,2.0245744835011545,46],\"gpm\":2.0245744835011545,\"start\":\"2019-01-09T17:41:14.019Z\",\"end\":\"2019-01-09T17:41:59.018Z\",\"label\":[0,5,6,9,13,14],\"type\":2,\"flow\":1.5521737706842185},{\"fixture\":\"appliance\",\"sub_label\":{\"all\":[4],\"individual\":3},\"duration\":157,\"is_from_ml_profile\":true,\"cluster_means\":[6.658405406763418,2.544613531247166,157],\"gpm\":2.544613531247166,\"start\":\"2019-01-09T17:30:44.025Z\",\"end\":\"2019-01-09T17:33:20.027Z\",\"label\":[0,5,6,9,13,14],\"type\":3,\"flow\":6.658405406763418},{\"fixture\":\"toilet\",\"sub_label\":{\"all\":[2],\"individual\":2},\"duration\":39,\"is_from_ml_profile\":true,\"cluster_means\":[2.1638215890492845,3.328956290845053,39],\"gpm\":3.328956290845053,\"start\":\"2019-01-09T17:21:47.019Z\",\"end\":\"2019-01-09T17:22:25.019Z\",\"label\":[0,5,6,9,13,14],\"type\":2,\"flow\":2.1638215890492845},{\"fixture\":\"appliance\",\"sub_label\":{\"all\":[4],\"individual\":3},\"duration\":243,\"is_from_ml_profile\":true,\"cluster_means\":[11.833409229070583,2.9218294392766873,243],\"gpm\":2.9218294392766873,\"start\":\"2019-01-09T17:08:30.024Z\",\"end\":\"2019-01-09T17:12:32.024Z\",\"label\":[0,5,6,9,13,14],\"type\":3,\"flow\":11.833409229070583},{\"fixture\":\"faucet\",\"not_label\":[],\"duration\":51,\"cluster_means\":[1.3019696089453185,1.5317289517003747,51],\"gpm\":1.5317289517003747,\"start\":\"2019-01-09T17:04:18.023Z\",\"end\":\"2019-01-09T17:05:08.024Z\",\"predicted_fixture\":\"pool/hot
            tub\",\"type\":4,\"flow\":1.3019696089453185},{\"fixture\":\"toilet\",\"sub_label\":{\"all\":[2],\"individual\":2},\"duration\":49,\"is_from_ml_profile\":true,\"cluster_means\":[2.005257473942795,2.455417315031994,49],\"gpm\":2.455417315031994,\"start\":\"2019-01-09T17:00:28.021Z\",\"end\":\"2019-01-09T17:01:16.021Z\",\"label\":[0,5,6,9,13,14],\"type\":2,\"flow\":2.005257473942795},{\"fixture\":\"appliance\",\"sub_label\":{\"all\":[4],\"individual\":3},\"duration\":131,\"is_from_ml_profile\":true,\"cluster_means\":[1.5478383417909314,0.7089335916599686,131],\"gpm\":0.7089335916599686,\"start\":\"2019-01-09T16:49:25.025Z\",\"end\":\"2019-01-09T16:51:35.026Z\",\"label\":[0,5,6,9,13,14],\"type\":3,\"flow\":1.5478383417909314},{\"fixture\":\"appliance\",\"sub_label\":{\"all\":[4],\"individual\":3},\"duration\":261,\"is_from_ml_profile\":true,\"cluster_means\":[13.336472316367077,3.065855704911972,261],\"gpm\":3.065855704911972,\"start\":\"2019-01-09T16:44:03.026Z\",\"end\":\"2019-01-09T16:48:23.025Z\",\"label\":[0,5,6,9,13,14],\"type\":3,\"flow\":13.336472316367077},{\"fixture\":\"toilet\",\"sub_label\":{\"all\":[2],\"individual\":2},\"duration\":51,\"is_from_ml_profile\":true,\"cluster_means\":[1.5779291293621456,1.856387211014289,51],\"gpm\":1.856387211014289,\"start\":\"2019-01-09T16:04:00.024Z\",\"end\":\"2019-01-09T16:04:50.024Z\",\"label\":[0,5,6,9,13,14],\"type\":2,\"flow\":1.5779291293621456},{\"fixture\":\"toilet\",\"sub_label\":{\"all\":[2],\"individual\":2},\"duration\":45,\"is_from_ml_profile\":true,\"cluster_means\":[1.3608589541886653,1.8144786055848872,45],\"gpm\":1.8144786055848872,\"start\":\"2019-01-09T07:41:24.024Z\",\"end\":\"2019-01-09T07:42:08.024Z\",\"label\":[0,5,6,9,13,14],\"type\":2,\"flow\":1.3608589541886653},{\"fixture\":\"faucet\",\"not_label\":[],\"duration\":88,\"cluster_means\":[0.8221554134942862,0.5605605092006497,88],\"gpm\":0.5605605092006497,\"start\":\"2019-01-09T07:35:38.022Z\",\"end\":\"2019-01-09T07:37:05.023Z\",\"predicted_fixture\":\"pool/hot
            tub\",\"type\":4,\"flow\":0.8221554134942862},{\"fixture\":\"faucet\",\"not_label\":[],\"duration\":49,\"cluster_means\":[0.6059225202302311,0.7419459431390584,49],\"gpm\":0.7419459431390584,\"start\":\"2019-01-09T06:57:02.021Z\",\"end\":\"2019-01-09T06:57:50.021Z\",\"predicted_fixture\":\"pool/hot
            tub\",\"type\":4,\"flow\":0.6059225202302311}],\"known_fixtures\":[\"irrigation\",\"shower/bath\",\"faucet\",\"appliance\",\"pool/hot
            tub\",\"toilet\"],\"compute_start_date\":\"2019-01-10T06:42:34.027618\",\"start_date\":\"2019-01-09T06:00:34.906Z\",\"request_id\":\"ffffffff-ffff-4fff-8fff-ffffffffffff\",\"duration_in_seconds\":86400}");

            Request request = new Request.Builder()
              .url("https://api.meetflo.com//api/v1/flodetect/%7Bdevice_id%7D")
              .post(body)
              .addHeader("content-type", "application/json")
              .addHeader("authorization", "Bearer REPLACE_BEARER_TOKEN")
              .build();

            Response response = client.newCall(request).execute();
        - lang: Javascript_xhr
          source: >-
            var data = JSON.stringify({
              "compute_end_date": "2019-01-10T06:42:41.244267",
              "fixtures": [
                {
                  "name": "shower/bath",
                  "index": 0,
                  "type": 1,
                  "gallons": 19.6176,
                  "ratio": 0.1508,
                  "num_events": 1
                },
                {
                  "name": "toilet",
                  "index": 1,
                  "type": 2,
                  "gallons": 15.7767,
                  "ratio": 0.1213,
                  "num_events": 9
                },
                {
                  "name": "appliance",
                  "index": 2,
                  "type": 3,
                  "gallons": 74.4954,
                  "ratio": 0.5726,
                  "num_events": 9
                },
                {
                  "name": "faucet",
                  "index": 3,
                  "type": 4,
                  "gallons": 20.2066,
                  "ratio": 0.1553,
                  "num_events": 20
                },
                {
                  "name": "other",
                  "index": 4,
                  "type": 5,
                  "gallons": 0,
                  "ratio": 0,
                  "num_events": 0
                },
                {
                  "name": "irrigation",
                  "index": 5,
                  "type": 6,
                  "gallons": 0,
                  "ratio": 0,
                  "num_events": 0
                },
                {
                  "name": "pool/hot tub",
                  "index": 6,
                  "type": 7,
                  "gallons": 0,
                  "ratio": 0,
                  "num_events": 0
                }
              ],
              "end_date": "2019-01-10T06:00:34.906Z",
              "status": "executed",
              "device_id": "ffffffffffff",
              "event_chronology": [
                {
                  "fixture": "faucet",
                  "not_label": [],
                  "duration": 23,
                  "cluster_means": [
                    0.26727133811566733,
                    0.6972295776930452,
                    23
                  ],
                  "gpm": 0.6972295776930452,
                  "start": "2019-01-10T04:05:12.025Z",
                  "end": "2019-01-10T04:05:34.025Z",
                  "predicted_fixture": "pool/hot tub",
                  "type": 4,
                  "flow": 0.26727133811566733
                },
                {
                  "fixture": "faucet",
                  "not_label": [],
                  "duration": 15,
                  "cluster_means": [
                    0.14796972950898996,
                    0.5918789180359598,
                    15
                  ],
                  "gpm": 0.5918789180359598,
                  "start": "2019-01-10T03:46:50.024Z",
                  "end": "2019-01-10T03:47:04.024Z",
                  "predicted_fixture": "pool/hot tub",
                  "type": 4,
                  "flow": 0.14796972950898996
                },
                {
                  "fixture": "faucet",
                  "not_label": [],
                  "duration": 11,
                  "cluster_means": [
                    0.0955861132858243,
                    0.5213787997408598,
                    11
                  ],
                  "gpm": 0.5213787997408598,
                  "start": "2019-01-10T03:19:30.024Z",
                  "end": "2019-01-10T03:19:40.025Z",
                  "predicted_fixture": "pool/hot tub",
                  "type": 4,
                  "flow": 0.0955861132858243
                },
                {
                  "fixture": "faucet",
                  "not_label": [],
                  "duration": 15,
                  "cluster_means": [
                    0.11051073981146763,
                    0.4420429592458705,
                    15
                  ],
                  "gpm": 0.4420429592458705,
                  "start": "2019-01-10T03:18:52.024Z",
                  "end": "2019-01-10T03:19:06.024Z",
                  "predicted_fixture": "pool/hot tub",
                  "type": 4,
                  "flow": 0.11051073981146763
                },
                {
                  "fixture": "faucet",
                  "not_label": [],
                  "duration": 13,
                  "cluster_means": [
                    0.07248914106551661,
                    0.3345652664562305,
                    13
                  ],
                  "gpm": 0.3345652664562305,
                  "start": "2019-01-10T03:08:33.027Z",
                  "end": "2019-01-10T03:08:45.027Z",
                  "predicted_fixture": "pool/hot tub",
                  "type": 4,
                  "flow": 0.07248914106551661
                },
                {
                  "fixture": "faucet",
                  "not_label": [],
                  "duration": 52,
                  "cluster_means": [
                    0.7232994692494259,
                    0.8345763106724146,
                    52
                  ],
                  "gpm": 0.8345763106724146,
                  "start": "2019-01-10T02:54:47.027Z",
                  "end": "2019-01-10T02:55:38.027Z",
                  "predicted_fixture": "pool/hot tub",
                  "type": 4,
                  "flow": 0.7232994692494259
                },
                {
                  "fixture": "faucet",
                  "not_label": [],
                  "duration": 17,
                  "cluster_means": [
                    0.14906867004605714,
                    0.5261247178096135,
                    17
                  ],
                  "gpm": 0.5261247178096135,
                  "start": "2019-01-10T02:51:41.027Z",
                  "end": "2019-01-10T02:51:57.027Z",
                  "predicted_fixture": "pool/hot tub",
                  "type": 4,
                  "flow": 0.14906867004605714
                },
                {
                  "fixture": "toilet",
                  "sub_label": {
                    "all": [
                      2
                    ],
                    "individual": 2
                  },
                  "duration": 51,
                  "is_from_ml_profile": true,
                  "cluster_means": [
                    1.7252895749080555,
                    2.0297524410683003,
                    51
                  ],
                  "gpm": 2.0297524410683003,
                  "start": "2019-01-09T20:34:07.020Z",
                  "end": "2019-01-09T20:34:57.020Z",
                  "label": [
                    0,
                    5,
                    6,
                    9,
                    13,
                    14
                  ],
                  "type": 2,
                  "flow": 1.7252895749080555
                },
                {
                  "fixture": "toilet",
                  "sub_label": {
                    "all": [
                      2
                    ],
                    "individual": 2
                  },
                  "duration": 39,
                  "is_from_ml_profile": true,
                  "cluster_means": [
                    2.1283035190830626,
                    3.274313106281635,
                    39
                  ],
                  "gpm": 3.274313106281635,
                  "start": "2019-01-09T20:28:28.021Z",
                  "end": "2019-01-09T20:29:06.021Z",
                  "label": [
                    0,
                    5,
                    6,
                    9,
                    13,
                    14
                  ],
                  "type": 2,
                  "flow": 2.1283035190830626
                },
                {
                  "fixture": "appliance",
                  "sub_label": {
                    "all": [
                      4
                    ],
                    "individual": 3
                  },
                  "duration": 133,
                  "is_from_ml_profile": true,
                  "cluster_means": [
                    8.186598550571112,
                    3.6932023536411034,
                    133
                  ],
                  "gpm": 3.6932023536411034,
                  "start": "2019-01-09T20:24:16.021Z",
                  "end": "2019-01-09T20:26:28.021Z",
                  "label": [
                    0,
                    5,
                    6,
                    9,
                    13,
                    14
                  ],
                  "type": 3,
                  "flow": 8.186598550571112
                },
                {
                  "fixture": "faucet",
                  "not_label": [],
                  "duration": 64,
                  "cluster_means": [
                    1.4331223502416752,
                    1.3435522033515706,
                    64
                  ],
                  "gpm": 1.3435522033515706,
                  "start": "2019-01-09T20:17:06.022Z",
                  "end": "2019-01-09T20:18:09.022Z",
                  "predicted_fixture": "pool/hot tub",
                  "type": 4,
                  "flow": 1.4331223502416752
                },
                {
                  "fixture": "faucet",
                  "not_label": [],
                  "duration": 76,
                  "cluster_means": [
                    1.8181129920589458,
                    1.4353523621517994,
                    76
                  ],
                  "gpm": 1.4353523621517994,
                  "start": "2019-01-09T20:09:04.023Z",
                  "end": "2019-01-09T20:10:19.022Z",
                  "predicted_fixture": "pool/hot tub",
                  "type": 4,
                  "flow": 1.8181129920589458
                },
                {
                  "fixture": "faucet",
                  "not_label": [],
                  "duration": 36,
                  "cluster_means": [
                    0.5133975225489927,
                    0.8556625375816546,
                    36
                  ],
                  "gpm": 0.8556625375816546,
                  "start": "2019-01-09T19:59:57.024Z",
                  "end": "2019-01-09T20:00:32.023Z",
                  "predicted_fixture": "pool/hot tub",
                  "type": 4,
                  "flow": 0.5133975225489927
                },
                {
                  "fixture": "faucet",
                  "not_label": [],
                  "duration": 19,
                  "cluster_means": [
                    0.2532803971332305,
                    0.7998328330523067,
                    19
                  ],
                  "gpm": 0.7998328330523067,
                  "start": "2019-01-09T19:55:16.024Z",
                  "end": "2019-01-09T19:55:34.024Z",
                  "predicted_fixture": "pool/hot tub",
                  "type": 4,
                  "flow": 0.2532803971332305
                },
                {
                  "fixture": "faucet",
                  "not_label": [],
                  "duration": 23,
                  "cluster_means": [
                    0.1702594873385425,
                    0.44415518436141516,
                    23
                  ],
                  "gpm": 0.44415518436141516,
                  "start": "2019-01-09T19:34:57.028Z",
                  "end": "2019-01-09T19:35:19.028Z",
                  "predicted_fixture": "pool/hot tub",
                  "type": 4,
                  "flow": 0.1702594873385425
                },
                {
                  "fixture": "appliance",
                  "sub_label": {
                    "all": [
                      4
                    ],
                    "individual": 3
                  },
                  "duration": 137,
                  "is_from_ml_profile": true,
                  "cluster_means": [
                    2.8342919026645013,
                    1.241295723794672,
                    137
                  ],
                  "gpm": 1.241295723794672,
                  "start": "2019-01-09T19:32:00.019Z",
                  "end": "2019-01-09T19:34:16.028Z",
                  "label": [
                    0,
                    5,
                    6,
                    9,
                    13,
                    14
                  ],
                  "type": 3,
                  "flow": 2.8342919026645013
                },
                {
                  "fixture": "appliance",
                  "sub_label": {
                    "all": [
                      4
                    ],
                    "individual": 3
                  },
                  "duration": 137,
                  "is_from_ml_profile": true,
                  "cluster_means": [
                    4.679273849977214,
                    2.049317014588561,
                    137
                  ],
                  "gpm": 2.049317014588561,
                  "start": "2019-01-09T19:24:15.025Z",
                  "end": "2019-01-09T19:26:31.022Z",
                  "label": [
                    0,
                    5,
                    6,
                    9,
                    13,
                    14
                  ],
                  "type": 3,
                  "flow": 4.679273849977214
                },
                {
                  "fixture": "faucet",
                  "not_label": [],
                  "duration": 20,
                  "cluster_means": [
                    0.23631201035015875,
                    0.7089360310504763,
                    20
                  ],
                  "gpm": 0.7089360310504763,
                  "start": "2019-01-09T19:15:12.028Z",
                  "end": "2019-01-09T19:15:31.028Z",
                  "predicted_fixture": "pool/hot tub",
                  "type": 4,
                  "flow": 0.23631201035015875
                },
                {
                  "fixture": "appliance",
                  "sub_label": {
                    "all": [
                      4
                    ],
                    "individual": 3
                  },
                  "duration": 421,
                  "is_from_ml_profile": true,
                  "cluster_means": [
                    18.83973087059194,
                    2.6849972737185666,
                    421
                  ],
                  "gpm": 2.6849972737185666,
                  "start": "2019-01-09T19:08:01.028Z",
                  "end": "2019-01-09T19:15:01.028Z",
                  "label": [
                    0,
                    5,
                    6,
                    9,
                    13,
                    14
                  ],
                  "type": 3,
                  "flow": 18.83973087059194
                },
                {
                  "fixture": "faucet",
                  "not_label": [],
                  "duration": 111,
                  "cluster_means": [
                    4.38310410029996,
                    2.3692454596215997,
                    111
                  ],
                  "gpm": 2.3692454596215997,
                  "start": "2019-01-09T19:05:33.018Z",
                  "end": "2019-01-09T19:07:23.028Z",
                  "predicted_fixture": "pool/hot tub",
                  "type": 4,
                  "flow": 4.38310410029996
                },
                {
                  "fixture": "shower/bath",
                  "sub_label": {
                    "all": [
                      0,
                      1,
                      2,
                      3,
                      4
                    ],
                    "individual": 1
                  },
                  "duration": 343,
                  "is_from_ml_profile": true,
                  "cluster_means": [
                    19.617605857850336,
                    3.4316511704694466,
                    343
                  ],
                  "gpm": 3.4316511704694466,
                  "start": "2019-01-09T18:58:51.020Z",
                  "end": "2019-01-09T19:04:33.019Z",
                  "label": [
                    1,
                    7,
                    8,
                    11,
                    14
                  ],
                  "type": 1,
                  "flow": 19.617605857850336
                },
                {
                  "fixture": "toilet",
                  "sub_label": {
                    "all": [
                      2
                    ],
                    "individual": 2
                  },
                  "duration": 34,
                  "is_from_ml_profile": true,
                  "cluster_means": [
                    1.5995345282566789,
                    2.8227079910411983,
                    34
                  ],
                  "gpm": 2.8227079910411983,
                  "start": "2019-01-09T18:56:05.022Z",
                  "end": "2019-01-09T18:56:38.021Z",
                  "label": [
                    0,
                    5,
                    6,
                    9,
                    13,
                    14
                  ],
                  "type": 2,
                  "flow": 1.5995345282566789
                },
                {
                  "fixture": "faucet",
                  "not_label": [],
                  "duration": 79,
                  "cluster_means": [
                    2.94967820075584,
                    2.2402619246246886,
                    79
                  ],
                  "gpm": 2.2402619246246886,
                  "start": "2019-01-09T18:50:43.027Z",
                  "end": "2019-01-09T18:52:01.025Z",
                  "predicted_fixture": "pool/hot tub",
                  "type": 4,
                  "flow": 2.94967820075584
                },
                {
                  "fixture": "appliance",
                  "sub_label": {
                    "all": [
                      4
                    ],
                    "individual": 3
                  },
                  "duration": 126,
                  "is_from_ml_profile": true,
                  "cluster_means": [
                    6.579340706928584,
                    3.133019384251707,
                    126
                  ],
                  "gpm": 3.133019384251707,
                  "start": "2019-01-09T18:46:09.021Z",
                  "end": "2019-01-09T18:48:14.020Z",
                  "label": [
                    0,
                    5,
                    6,
                    9,
                    13,
                    14
                  ],
                  "type": 3,
                  "flow": 6.579340706928584
                },
                {
                  "fixture": "faucet",
                  "not_label": [],
                  "duration": 71,
                  "cluster_means": [
                    3.574718429932732,
                    3.020888814027661,
                    71
                  ],
                  "gpm": 3.020888814027661,
                  "start": "2019-01-09T17:57:11.018Z",
                  "end": "2019-01-09T17:58:21.019Z",
                  "predicted_fixture": "pool/hot tub",
                  "type": 4,
                  "flow": 3.574718429932732
                },
                {
                  "fixture": "toilet",
                  "sub_label": {
                    "all": [
                      2
                    ],
                    "individual": 2
                  },
                  "duration": 49,
                  "is_from_ml_profile": true,
                  "cluster_means": [
                    1.6635324458452192,
                    2.0369785051165947,
                    49
                  ],
                  "gpm": 2.0369785051165947,
                  "start": "2019-01-09T17:53:33.027Z",
                  "end": "2019-01-09T17:54:21.028Z",
                  "label": [
                    0,
                    5,
                    6,
                    9,
                    13,
                    14
                  ],
                  "type": 2,
                  "flow": 1.6635324458452192
                },
                {
                  "fixture": "faucet",
                  "not_label": [],
                  "duration": 33,
                  "cluster_means": [
                    0.5784211677311059,
                    1.0516748504201925,
                    33
                  ],
                  "gpm": 1.0516748504201925,
                  "start": "2019-01-09T17:43:39.028Z",
                  "end": "2019-01-09T17:44:11.027Z",
                  "predicted_fixture": "pool/hot tub",
                  "type": 4,
                  "flow": 0.5784211677311059
                },
                {
                  "fixture": "toilet",
                  "sub_label": {
                    "all": [
                      2
                    ],
                    "individual": 2
                  },
                  "duration": 46,
                  "is_from_ml_profile": true,
                  "cluster_means": [
                    1.5521737706842185,
                    2.0245744835011545,
                    46
                  ],
                  "gpm": 2.0245744835011545,
                  "start": "2019-01-09T17:41:14.019Z",
                  "end": "2019-01-09T17:41:59.018Z",
                  "label": [
                    0,
                    5,
                    6,
                    9,
                    13,
                    14
                  ],
                  "type": 2,
                  "flow": 1.5521737706842185
                },
                {
                  "fixture": "appliance",
                  "sub_label": {
                    "all": [
                      4
                    ],
                    "individual": 3
                  },
                  "duration": 157,
                  "is_from_ml_profile": true,
                  "cluster_means": [
                    6.658405406763418,
                    2.544613531247166,
                    157
                  ],
                  "gpm": 2.544613531247166,
                  "start": "2019-01-09T17:30:44.025Z",
                  "end": "2019-01-09T17:33:20.027Z",
                  "label": [
                    0,
                    5,
                    6,
                    9,
                    13,
                    14
                  ],
                  "type": 3,
                  "flow": 6.658405406763418
                },
                {
                  "fixture": "toilet",
                  "sub_label": {
                    "all": [
                      2
                    ],
                    "individual": 2
                  },
                  "duration": 39,
                  "is_from_ml_profile": true,
                  "cluster_means": [
                    2.1638215890492845,
                    3.328956290845053,
                    39
                  ],
                  "gpm": 3.328956290845053,
                  "start": "2019-01-09T17:21:47.019Z",
                  "end": "2019-01-09T17:22:25.019Z",
                  "label": [
                    0,
                    5,
                    6,
                    9,
                    13,
                    14
                  ],
                  "type": 2,
                  "flow": 2.1638215890492845
                },
                {
                  "fixture": "appliance",
                  "sub_label": {
                    "all": [
                      4
                    ],
                    "individual": 3
                  },
                  "duration": 243,
                  "is_from_ml_profile": true,
                  "cluster_means": [
                    11.833409229070583,
                    2.9218294392766873,
                    243
                  ],
                  "gpm": 2.9218294392766873,
                  "start": "2019-01-09T17:08:30.024Z",
                  "end": "2019-01-09T17:12:32.024Z",
                  "label": [
                    0,
                    5,
                    6,
                    9,
                    13,
                    14
                  ],
                  "type": 3,
                  "flow": 11.833409229070583
                },
                {
                  "fixture": "faucet",
                  "not_label": [],
                  "duration": 51,
                  "cluster_means": [
                    1.3019696089453185,
                    1.5317289517003747,
                    51
                  ],
                  "gpm": 1.5317289517003747,
                  "start": "2019-01-09T17:04:18.023Z",
                  "end": "2019-01-09T17:05:08.024Z",
                  "predicted_fixture": "pool/hot tub",
                  "type": 4,
                  "flow": 1.3019696089453185
                },
                {
                  "fixture": "toilet",
                  "sub_label": {
                    "all": [
                      2
                    ],
                    "individual": 2
                  },
                  "duration": 49,
                  "is_from_ml_profile": true,
                  "cluster_means": [
                    2.005257473942795,
                    2.455417315031994,
                    49
                  ],
                  "gpm": 2.455417315031994,
                  "start": "2019-01-09T17:00:28.021Z",
                  "end": "2019-01-09T17:01:16.021Z",
                  "label": [
                    0,
                    5,
                    6,
                    9,
                    13,
                    14
                  ],
                  "type": 2,
                  "flow": 2.005257473942795
                },
                {
                  "fixture": "appliance",
                  "sub_label": {
                    "all": [
                      4
                    ],
                    "individual": 3
                  },
                  "duration": 131,
                  "is_from_ml_profile": true,
                  "cluster_means": [
                    1.5478383417909314,
                    0.7089335916599686,
                    131
                  ],
                  "gpm": 0.7089335916599686,
                  "start": "2019-01-09T16:49:25.025Z",
                  "end": "2019-01-09T16:51:35.026Z",
                  "label": [
                    0,
                    5,
                    6,
                    9,
                    13,
                    14
                  ],
                  "type": 3,
                  "flow": 1.5478383417909314
                },
                {
                  "fixture": "appliance",
                  "sub_label": {
                    "all": [
                      4
                    ],
                    "individual": 3
                  },
                  "duration": 261,
                  "is_from_ml_profile": true,
                  "cluster_means": [
                    13.336472316367077,
                    3.065855704911972,
                    261
                  ],
                  "gpm": 3.065855704911972,
                  "start": "2019-01-09T16:44:03.026Z",
                  "end": "2019-01-09T16:48:23.025Z",
                  "label": [
                    0,
                    5,
                    6,
                    9,
                    13,
                    14
                  ],
                  "type": 3,
                  "flow": 13.336472316367077
                },
                {
                  "fixture": "toilet",
                  "sub_label": {
                    "all": [
                      2
                    ],
                    "individual": 2
                  },
                  "duration": 51,
                  "is_from_ml_profile": true,
                  "cluster_means": [
                    1.5779291293621456,
                    1.856387211014289,
                    51
                  ],
                  "gpm": 1.856387211014289,
                  "start": "2019-01-09T16:04:00.024Z",
                  "end": "2019-01-09T16:04:50.024Z",
                  "label": [
                    0,
                    5,
                    6,
                    9,
                    13,
                    14
                  ],
                  "type": 2,
                  "flow": 1.5779291293621456
                },
                {
                  "fixture": "toilet",
                  "sub_label": {
                    "all": [
                      2
                    ],
                    "individual": 2
                  },
                  "duration": 45,
                  "is_from_ml_profile": true,
                  "cluster_means": [
                    1.3608589541886653,
                    1.8144786055848872,
                    45
                  ],
                  "gpm": 1.8144786055848872,
                  "start": "2019-01-09T07:41:24.024Z",
                  "end": "2019-01-09T07:42:08.024Z",
                  "label": [
                    0,
                    5,
                    6,
                    9,
                    13,
                    14
                  ],
                  "type": 2,
                  "flow": 1.3608589541886653
                },
                {
                  "fixture": "faucet",
                  "not_label": [],
                  "duration": 88,
                  "cluster_means": [
                    0.8221554134942862,
                    0.5605605092006497,
                    88
                  ],
                  "gpm": 0.5605605092006497,
                  "start": "2019-01-09T07:35:38.022Z",
                  "end": "2019-01-09T07:37:05.023Z",
                  "predicted_fixture": "pool/hot tub",
                  "type": 4,
                  "flow": 0.8221554134942862
                },
                {
                  "fixture": "faucet",
                  "not_label": [],
                  "duration": 49,
                  "cluster_means": [
                    0.6059225202302311,
                    0.7419459431390584,
                    49
                  ],
                  "gpm": 0.7419459431390584,
                  "start": "2019-01-09T06:57:02.021Z",
                  "end": "2019-01-09T06:57:50.021Z",
                  "predicted_fixture": "pool/hot tub",
                  "type": 4,
                  "flow": 0.6059225202302311
                }
              ],
              "known_fixtures": [
                "irrigation",
                "shower/bath",
                "faucet",
                "appliance",
                "pool/hot tub",
                "toilet"
              ],
              "compute_start_date": "2019-01-10T06:42:34.027618",
              "start_date": "2019-01-09T06:00:34.906Z",
              "request_id": "ffffffff-ffff-4fff-8fff-ffffffffffff",
              "duration_in_seconds": 86400
            });


            var xhr = new XMLHttpRequest();

            xhr.withCredentials = true;


            xhr.addEventListener("readystatechange", function () {
              if (this.readyState === this.DONE) {
                console.log(this.responseText);
              }
            });


            xhr.open("POST",
            "https://api.meetflo.com//api/v1/flodetect/%7Bdevice_id%7D");

            xhr.setRequestHeader("content-type", "application/json");

            xhr.setRequestHeader("authorization", "Bearer
            REPLACE_BEARER_TOKEN");


            xhr.send(data);
        - lang: Node_native
          source: >-
            var http = require("https");


            var options = {
              "method": "POST",
              "hostname": "api.meetflo.com",
              "port": null,
              "path": "//api/v1/flodetect/%7Bdevice_id%7D",
              "headers": {
                "content-type": "application/json",
                "authorization": "Bearer REPLACE_BEARER_TOKEN"
              }
            };


            var req = http.request(options, function (res) {
              var chunks = [];

              res.on("data", function (chunk) {
                chunks.push(chunk);
              });

              res.on("end", function () {
                var body = Buffer.concat(chunks);
                console.log(body.toString());
              });
            });


            req.write(JSON.stringify({ compute_end_date:
            '2019-01-10T06:42:41.244267',
              fixtures:
               [ { name: 'shower/bath',
                   index: 0,
                   type: 1,
                   gallons: 19.6176,
                   ratio: 0.1508,
                   num_events: 1 },
                 { name: 'toilet',
                   index: 1,
                   type: 2,
                   gallons: 15.7767,
                   ratio: 0.1213,
                   num_events: 9 },
                 { name: 'appliance',
                   index: 2,
                   type: 3,
                   gallons: 74.4954,
                   ratio: 0.5726,
                   num_events: 9 },
                 { name: 'faucet',
                   index: 3,
                   type: 4,
                   gallons: 20.2066,
                   ratio: 0.1553,
                   num_events: 20 },
                 { name: 'other',
                   index: 4,
                   type: 5,
                   gallons: 0,
                   ratio: 0,
                   num_events: 0 },
                 { name: 'irrigation',
                   index: 5,
                   type: 6,
                   gallons: 0,
                   ratio: 0,
                   num_events: 0 },
                 { name: 'pool/hot tub',
                   index: 6,
                   type: 7,
                   gallons: 0,
                   ratio: 0,
                   num_events: 0 } ],
              end_date: '2019-01-10T06:00:34.906Z',
              status: 'executed',
              device_id: 'ffffffffffff',
              event_chronology:
               [ { fixture: 'faucet',
                   not_label: [],
                   duration: 23,
                   cluster_means: [ 0.26727133811566733, 0.6972295776930452, 23 ],
                   gpm: 0.6972295776930452,
                   start: '2019-01-10T04:05:12.025Z',
                   end: '2019-01-10T04:05:34.025Z',
                   predicted_fixture: 'pool/hot tub',
                   type: 4,
                   flow: 0.26727133811566733 },
                 { fixture: 'faucet',
                   not_label: [],
                   duration: 15,
                   cluster_means: [ 0.14796972950898996, 0.5918789180359598, 15 ],
                   gpm: 0.5918789180359598,
                   start: '2019-01-10T03:46:50.024Z',
                   end: '2019-01-10T03:47:04.024Z',
                   predicted_fixture: 'pool/hot tub',
                   type: 4,
                   flow: 0.14796972950898996 },
                 { fixture: 'faucet',
                   not_label: [],
                   duration: 11,
                   cluster_means: [ 0.0955861132858243, 0.5213787997408598, 11 ],
                   gpm: 0.5213787997408598,
                   start: '2019-01-10T03:19:30.024Z',
                   end: '2019-01-10T03:19:40.025Z',
                   predicted_fixture: 'pool/hot tub',
                   type: 4,
                   flow: 0.0955861132858243 },
                 { fixture: 'faucet',
                   not_label: [],
                   duration: 15,
                   cluster_means: [ 0.11051073981146763, 0.4420429592458705, 15 ],
                   gpm: 0.4420429592458705,
                   start: '2019-01-10T03:18:52.024Z',
                   end: '2019-01-10T03:19:06.024Z',
                   predicted_fixture: 'pool/hot tub',
                   type: 4,
                   flow: 0.11051073981146763 },
                 { fixture: 'faucet',
                   not_label: [],
                   duration: 13,
                   cluster_means: [ 0.07248914106551661, 0.3345652664562305, 13 ],
                   gpm: 0.3345652664562305,
                   start: '2019-01-10T03:08:33.027Z',
                   end: '2019-01-10T03:08:45.027Z',
                   predicted_fixture: 'pool/hot tub',
                   type: 4,
                   flow: 0.07248914106551661 },
                 { fixture: 'faucet',
                   not_label: [],
                   duration: 52,
                   cluster_means: [ 0.7232994692494259, 0.8345763106724146, 52 ],
                   gpm: 0.8345763106724146,
                   start: '2019-01-10T02:54:47.027Z',
                   end: '2019-01-10T02:55:38.027Z',
                   predicted_fixture: 'pool/hot tub',
                   type: 4,
                   flow: 0.7232994692494259 },
                 { fixture: 'faucet',
                   not_label: [],
                   duration: 17,
                   cluster_means: [ 0.14906867004605714, 0.5261247178096135, 17 ],
                   gpm: 0.5261247178096135,
                   start: '2019-01-10T02:51:41.027Z',
                   end: '2019-01-10T02:51:57.027Z',
                   predicted_fixture: 'pool/hot tub',
                   type: 4,
                   flow: 0.14906867004605714 },
                 { fixture: 'toilet',
                   sub_label: { all: [ 2 ], individual: 2 },
                   duration: 51,
                   is_from_ml_profile: true,
                   cluster_means: [ 1.7252895749080555, 2.0297524410683003, 51 ],
                   gpm: 2.0297524410683003,
                   start: '2019-01-09T20:34:07.020Z',
                   end: '2019-01-09T20:34:57.020Z',
                   label: [ 0, 5, 6, 9, 13, 14 ],
                   type: 2,
                   flow: 1.7252895749080555 },
                 { fixture: 'toilet',
                   sub_label: { all: [ 2 ], individual: 2 },
                   duration: 39,
                   is_from_ml_profile: true,
                   cluster_means: [ 2.1283035190830626, 3.274313106281635, 39 ],
                   gpm: 3.274313106281635,
                   start: '2019-01-09T20:28:28.021Z',
                   end: '2019-01-09T20:29:06.021Z',
                   label: [ 0, 5, 6, 9, 13, 14 ],
                   type: 2,
                   flow: 2.1283035190830626 },
                 { fixture: 'appliance',
                   sub_label: { all: [ 4 ], individual: 3 },
                   duration: 133,
                   is_from_ml_profile: true,
                   cluster_means: [ 8.186598550571112, 3.6932023536411034, 133 ],
                   gpm: 3.6932023536411034,
                   start: '2019-01-09T20:24:16.021Z',
                   end: '2019-01-09T20:26:28.021Z',
                   label: [ 0, 5, 6, 9, 13, 14 ],
                   type: 3,
                   flow: 8.186598550571112 },
                 { fixture: 'faucet',
                   not_label: [],
                   duration: 64,
                   cluster_means: [ 1.4331223502416752, 1.3435522033515706, 64 ],
                   gpm: 1.3435522033515706,
                   start: '2019-01-09T20:17:06.022Z',
                   end: '2019-01-09T20:18:09.022Z',
                   predicted_fixture: 'pool/hot tub',
                   type: 4,
                   flow: 1.4331223502416752 },
                 { fixture: 'faucet',
                   not_label: [],
                   duration: 76,
                   cluster_means: [ 1.8181129920589458, 1.4353523621517994, 76 ],
                   gpm: 1.4353523621517994,
                   start: '2019-01-09T20:09:04.023Z',
                   end: '2019-01-09T20:10:19.022Z',
                   predicted_fixture: 'pool/hot tub',
                   type: 4,
                   flow: 1.8181129920589458 },
                 { fixture: 'faucet',
                   not_label: [],
                   duration: 36,
                   cluster_means: [ 0.5133975225489927, 0.8556625375816546, 36 ],
                   gpm: 0.8556625375816546,
                   start: '2019-01-09T19:59:57.024Z',
                   end: '2019-01-09T20:00:32.023Z',
                   predicted_fixture: 'pool/hot tub',
                   type: 4,
                   flow: 0.5133975225489927 },
                 { fixture: 'faucet',
                   not_label: [],
                   duration: 19,
                   cluster_means: [ 0.2532803971332305, 0.7998328330523067, 19 ],
                   gpm: 0.7998328330523067,
                   start: '2019-01-09T19:55:16.024Z',
                   end: '2019-01-09T19:55:34.024Z',
                   predicted_fixture: 'pool/hot tub',
                   type: 4,
                   flow: 0.2532803971332305 },
                 { fixture: 'faucet',
                   not_label: [],
                   duration: 23,
                   cluster_means: [ 0.1702594873385425, 0.44415518436141516, 23 ],
                   gpm: 0.44415518436141516,
                   start: '2019-01-09T19:34:57.028Z',
                   end: '2019-01-09T19:35:19.028Z',
                   predicted_fixture: 'pool/hot tub',
                   type: 4,
                   flow: 0.1702594873385425 },
                 { fixture: 'appliance',
                   sub_label: { all: [ 4 ], individual: 3 },
                   duration: 137,
                   is_from_ml_profile: true,
                   cluster_means: [ 2.8342919026645013, 1.241295723794672, 137 ],
                   gpm: 1.241295723794672,
                   start: '2019-01-09T19:32:00.019Z',
                   end: '2019-01-09T19:34:16.028Z',
                   label: [ 0, 5, 6, 9, 13, 14 ],
                   type: 3,
                   flow: 2.8342919026645013 },
                 { fixture: 'appliance',
                   sub_label: { all: [ 4 ], individual: 3 },
                   duration: 137,
                   is_from_ml_profile: true,
                   cluster_means: [ 4.679273849977214, 2.049317014588561, 137 ],
                   gpm: 2.049317014588561,
                   start: '2019-01-09T19:24:15.025Z',
                   end: '2019-01-09T19:26:31.022Z',
                   label: [ 0, 5, 6, 9, 13, 14 ],
                   type: 3,
                   flow: 4.679273849977214 },
                 { fixture: 'faucet',
                   not_label: [],
                   duration: 20,
                   cluster_means: [ 0.23631201035015875, 0.7089360310504763, 20 ],
                   gpm: 0.7089360310504763,
                   start: '2019-01-09T19:15:12.028Z',
                   end: '2019-01-09T19:15:31.028Z',
                   predicted_fixture: 'pool/hot tub',
                   type: 4,
                   flow: 0.23631201035015875 },
                 { fixture: 'appliance',
                   sub_label: { all: [ 4 ], individual: 3 },
                   duration: 421,
                   is_from_ml_profile: true,
                   cluster_means: [ 18.83973087059194, 2.6849972737185666, 421 ],
                   gpm: 2.6849972737185666,
                   start: '2019-01-09T19:08:01.028Z',
                   end: '2019-01-09T19:15:01.028Z',
                   label: [ 0, 5, 6, 9, 13, 14 ],
                   type: 3,
                   flow: 18.83973087059194 },
                 { fixture: 'faucet',
                   not_label: [],
                   duration: 111,
                   cluster_means: [ 4.38310410029996, 2.3692454596215997, 111 ],
                   gpm: 2.3692454596215997,
                   start: '2019-01-09T19:05:33.018Z',
                   end: '2019-01-09T19:07:23.028Z',
                   predicted_fixture: 'pool/hot tub',
                   type: 4,
                   flow: 4.38310410029996 },
                 { fixture: 'shower/bath',
                   sub_label: { all: [ 0, 1, 2, 3, 4 ], individual: 1 },
                   duration: 343,
                   is_from_ml_profile: true,
                   cluster_means: [ 19.617605857850336, 3.4316511704694466, 343 ],
                   gpm: 3.4316511704694466,
                   start: '2019-01-09T18:58:51.020Z',
                   end: '2019-01-09T19:04:33.019Z',
                   label: [ 1, 7, 8, 11, 14 ],
                   type: 1,
                   flow: 19.617605857850336 },
                 { fixture: 'toilet',
                   sub_label: { all: [ 2 ], individual: 2 },
                   duration: 34,
                   is_from_ml_profile: true,
                   cluster_means: [ 1.5995345282566789, 2.8227079910411983, 34 ],
                   gpm: 2.8227079910411983,
                   start: '2019-01-09T18:56:05.022Z',
                   end: '2019-01-09T18:56:38.021Z',
                   label: [ 0, 5, 6, 9, 13, 14 ],
                   type: 2,
                   flow: 1.5995345282566789 },
                 { fixture: 'faucet',
                   not_label: [],
                   duration: 79,
                   cluster_means: [ 2.94967820075584, 2.2402619246246886, 79 ],
                   gpm: 2.2402619246246886,
                   start: '2019-01-09T18:50:43.027Z',
                   end: '2019-01-09T18:52:01.025Z',
                   predicted_fixture: 'pool/hot tub',
                   type: 4,
                   flow: 2.94967820075584 },
                 { fixture: 'appliance',
                   sub_label: { all: [ 4 ], individual: 3 },
                   duration: 126,
                   is_from_ml_profile: true,
                   cluster_means: [ 6.579340706928584, 3.133019384251707, 126 ],
                   gpm: 3.133019384251707,
                   start: '2019-01-09T18:46:09.021Z',
                   end: '2019-01-09T18:48:14.020Z',
                   label: [ 0, 5, 6, 9, 13, 14 ],
                   type: 3,
                   flow: 6.579340706928584 },
                 { fixture: 'faucet',
                   not_label: [],
                   duration: 71,
                   cluster_means: [ 3.574718429932732, 3.020888814027661, 71 ],
                   gpm: 3.020888814027661,
                   start: '2019-01-09T17:57:11.018Z',
                   end: '2019-01-09T17:58:21.019Z',
                   predicted_fixture: 'pool/hot tub',
                   type: 4,
                   flow: 3.574718429932732 },
                 { fixture: 'toilet',
                   sub_label: { all: [ 2 ], individual: 2 },
                   duration: 49,
                   is_from_ml_profile: true,
                   cluster_means: [ 1.6635324458452192, 2.0369785051165947, 49 ],
                   gpm: 2.0369785051165947,
                   start: '2019-01-09T17:53:33.027Z',
                   end: '2019-01-09T17:54:21.028Z',
                   label: [ 0, 5, 6, 9, 13, 14 ],
                   type: 2,
                   flow: 1.6635324458452192 },
                 { fixture: 'faucet',
                   not_label: [],
                   duration: 33,
                   cluster_means: [ 0.5784211677311059, 1.0516748504201925, 33 ],
                   gpm: 1.0516748504201925,
                   start: '2019-01-09T17:43:39.028Z',
                   end: '2019-01-09T17:44:11.027Z',
                   predicted_fixture: 'pool/hot tub',
                   type: 4,
                   flow: 0.5784211677311059 },
                 { fixture: 'toilet',
                   sub_label: { all: [ 2 ], individual: 2 },
                   duration: 46,
                   is_from_ml_profile: true,
                   cluster_means: [ 1.5521737706842185, 2.0245744835011545, 46 ],
                   gpm: 2.0245744835011545,
                   start: '2019-01-09T17:41:14.019Z',
                   end: '2019-01-09T17:41:59.018Z',
                   label: [ 0, 5, 6, 9, 13, 14 ],
                   type: 2,
                   flow: 1.5521737706842185 },
                 { fixture: 'appliance',
                   sub_label: { all: [ 4 ], individual: 3 },
                   duration: 157,
                   is_from_ml_profile: true,
                   cluster_means: [ 6.658405406763418, 2.544613531247166, 157 ],
                   gpm: 2.544613531247166,
                   start: '2019-01-09T17:30:44.025Z',
                   end: '2019-01-09T17:33:20.027Z',
                   label: [ 0, 5, 6, 9, 13, 14 ],
                   type: 3,
                   flow: 6.658405406763418 },
                 { fixture: 'toilet',
                   sub_label: { all: [ 2 ], individual: 2 },
                   duration: 39,
                   is_from_ml_profile: true,
                   cluster_means: [ 2.1638215890492845, 3.328956290845053, 39 ],
                   gpm: 3.328956290845053,
                   start: '2019-01-09T17:21:47.019Z',
                   end: '2019-01-09T17:22:25.019Z',
                   label: [ 0, 5, 6, 9, 13, 14 ],
                   type: 2,
                   flow: 2.1638215890492845 },
                 { fixture: 'appliance',
                   sub_label: { all: [ 4 ], individual: 3 },
                   duration: 243,
                   is_from_ml_profile: true,
                   cluster_means: [ 11.833409229070583, 2.9218294392766873, 243 ],
                   gpm: 2.9218294392766873,
                   start: '2019-01-09T17:08:30.024Z',
                   end: '2019-01-09T17:12:32.024Z',
                   label: [ 0, 5, 6, 9, 13, 14 ],
                   type: 3,
                   flow: 11.833409229070583 },
                 { fixture: 'faucet',
                   not_label: [],
                   duration: 51,
                   cluster_means: [ 1.3019696089453185, 1.5317289517003747, 51 ],
                   gpm: 1.5317289517003747,
                   start: '2019-01-09T17:04:18.023Z',
                   end: '2019-01-09T17:05:08.024Z',
                   predicted_fixture: 'pool/hot tub',
                   type: 4,
                   flow: 1.3019696089453185 },
                 { fixture: 'toilet',
                   sub_label: { all: [ 2 ], individual: 2 },
                   duration: 49,
                   is_from_ml_profile: true,
                   cluster_means: [ 2.005257473942795, 2.455417315031994, 49 ],
                   gpm: 2.455417315031994,
                   start: '2019-01-09T17:00:28.021Z',
                   end: '2019-01-09T17:01:16.021Z',
                   label: [ 0, 5, 6, 9, 13, 14 ],
                   type: 2,
                   flow: 2.005257473942795 },
                 { fixture: 'appliance',
                   sub_label: { all: [ 4 ], individual: 3 },
                   duration: 131,
                   is_from_ml_profile: true,
                   cluster_means: [ 1.5478383417909314, 0.7089335916599686, 131 ],
                   gpm: 0.7089335916599686,
                   start: '2019-01-09T16:49:25.025Z',
                   end: '2019-01-09T16:51:35.026Z',
                   label: [ 0, 5, 6, 9, 13, 14 ],
                   type: 3,
                   flow: 1.5478383417909314 },
                 { fixture: 'appliance',
                   sub_label: { all: [ 4 ], individual: 3 },
                   duration: 261,
                   is_from_ml_profile: true,
                   cluster_means: [ 13.336472316367077, 3.065855704911972, 261 ],
                   gpm: 3.065855704911972,
                   start: '2019-01-09T16:44:03.026Z',
                   end: '2019-01-09T16:48:23.025Z',
                   label: [ 0, 5, 6, 9, 13, 14 ],
                   type: 3,
                   flow: 13.336472316367077 },
                 { fixture: 'toilet',
                   sub_label: { all: [ 2 ], individual: 2 },
                   duration: 51,
                   is_from_ml_profile: true,
                   cluster_means: [ 1.5779291293621456, 1.856387211014289, 51 ],
                   gpm: 1.856387211014289,
                   start: '2019-01-09T16:04:00.024Z',
                   end: '2019-01-09T16:04:50.024Z',
                   label: [ 0, 5, 6, 9, 13, 14 ],
                   type: 2,
                   flow: 1.5779291293621456 },
                 { fixture: 'toilet',
                   sub_label: { all: [ 2 ], individual: 2 },
                   duration: 45,
                   is_from_ml_profile: true,
                   cluster_means: [ 1.3608589541886653, 1.8144786055848872, 45 ],
                   gpm: 1.8144786055848872,
                   start: '2019-01-09T07:41:24.024Z',
                   end: '2019-01-09T07:42:08.024Z',
                   label: [ 0, 5, 6, 9, 13, 14 ],
                   type: 2,
                   flow: 1.3608589541886653 },
                 { fixture: 'faucet',
                   not_label: [],
                   duration: 88,
                   cluster_means: [ 0.8221554134942862, 0.5605605092006497, 88 ],
                   gpm: 0.5605605092006497,
                   start: '2019-01-09T07:35:38.022Z',
                   end: '2019-01-09T07:37:05.023Z',
                   predicted_fixture: 'pool/hot tub',
                   type: 4,
                   flow: 0.8221554134942862 },
                 { fixture: 'faucet',
                   not_label: [],
                   duration: 49,
                   cluster_means: [ 0.6059225202302311, 0.7419459431390584, 49 ],
                   gpm: 0.7419459431390584,
                   start: '2019-01-09T06:57:02.021Z',
                   end: '2019-01-09T06:57:50.021Z',
                   predicted_fixture: 'pool/hot tub',
                   type: 4,
                   flow: 0.6059225202302311 } ],
              known_fixtures:
               [ 'irrigation',
                 'shower/bath',
                 'faucet',
                 'appliance',
                 'pool/hot tub',
                 'toilet' ],
              compute_start_date: '2019-01-10T06:42:34.027618',
              start_date: '2019-01-09T06:00:34.906Z',
              request_id: 'ffffffff-ffff-4fff-8fff-ffffffffffff',
              duration_in_seconds: 86400 }));
            req.end();
        - lang: Python_python3
          source: >-
            import http.client


            conn = http.client.HTTPSConnection("api.meetflo.com")


            payload =
            "{\"compute_end_date\":\"2019-01-10T06:42:41.244267\",\"fixtures\":[{\"name\":\"shower/bath\",\"index\":0,\"type\":1,\"gallons\":19.6176,\"ratio\":0.1508,\"num_events\":1},{\"name\":\"toilet\",\"index\":1,\"type\":2,\"gallons\":15.7767,\"ratio\":0.1213,\"num_events\":9},{\"name\":\"appliance\",\"index\":2,\"type\":3,\"gallons\":74.4954,\"ratio\":0.5726,\"num_events\":9},{\"name\":\"faucet\",\"index\":3,\"type\":4,\"gallons\":20.2066,\"ratio\":0.1553,\"num_events\":20},{\"name\":\"other\",\"index\":4,\"type\":5,\"gallons\":0,\"ratio\":0,\"num_events\":0},{\"name\":\"irrigation\",\"index\":5,\"type\":6,\"gallons\":0,\"ratio\":0,\"num_events\":0},{\"name\":\"pool/hot
            tub\",\"index\":6,\"type\":7,\"gallons\":0,\"ratio\":0,\"num_events\":0}],\"end_date\":\"2019-01-10T06:00:34.906Z\",\"status\":\"executed\",\"device_id\":\"ffffffffffff\",\"event_chronology\":[{\"fixture\":\"faucet\",\"not_label\":[],\"duration\":23,\"cluster_means\":[0.26727133811566733,0.6972295776930452,23],\"gpm\":0.6972295776930452,\"start\":\"2019-01-10T04:05:12.025Z\",\"end\":\"2019-01-10T04:05:34.025Z\",\"predicted_fixture\":\"pool/hot
            tub\",\"type\":4,\"flow\":0.26727133811566733},{\"fixture\":\"faucet\",\"not_label\":[],\"duration\":15,\"cluster_means\":[0.14796972950898996,0.5918789180359598,15],\"gpm\":0.5918789180359598,\"start\":\"2019-01-10T03:46:50.024Z\",\"end\":\"2019-01-10T03:47:04.024Z\",\"predicted_fixture\":\"pool/hot
            tub\",\"type\":4,\"flow\":0.14796972950898996},{\"fixture\":\"faucet\",\"not_label\":[],\"duration\":11,\"cluster_means\":[0.0955861132858243,0.5213787997408598,11],\"gpm\":0.5213787997408598,\"start\":\"2019-01-10T03:19:30.024Z\",\"end\":\"2019-01-10T03:19:40.025Z\",\"predicted_fixture\":\"pool/hot
            tub\",\"type\":4,\"flow\":0.0955861132858243},{\"fixture\":\"faucet\",\"not_label\":[],\"duration\":15,\"cluster_means\":[0.11051073981146763,0.4420429592458705,15],\"gpm\":0.4420429592458705,\"start\":\"2019-01-10T03:18:52.024Z\",\"end\":\"2019-01-10T03:19:06.024Z\",\"predicted_fixture\":\"pool/hot
            tub\",\"type\":4,\"flow\":0.11051073981146763},{\"fixture\":\"faucet\",\"not_label\":[],\"duration\":13,\"cluster_means\":[0.07248914106551661,0.3345652664562305,13],\"gpm\":0.3345652664562305,\"start\":\"2019-01-10T03:08:33.027Z\",\"end\":\"2019-01-10T03:08:45.027Z\",\"predicted_fixture\":\"pool/hot
            tub\",\"type\":4,\"flow\":0.07248914106551661},{\"fixture\":\"faucet\",\"not_label\":[],\"duration\":52,\"cluster_means\":[0.7232994692494259,0.8345763106724146,52],\"gpm\":0.8345763106724146,\"start\":\"2019-01-10T02:54:47.027Z\",\"end\":\"2019-01-10T02:55:38.027Z\",\"predicted_fixture\":\"pool/hot
            tub\",\"type\":4,\"flow\":0.7232994692494259},{\"fixture\":\"faucet\",\"not_label\":[],\"duration\":17,\"cluster_means\":[0.14906867004605714,0.5261247178096135,17],\"gpm\":0.5261247178096135,\"start\":\"2019-01-10T02:51:41.027Z\",\"end\":\"2019-01-10T02:51:57.027Z\",\"predicted_fixture\":\"pool/hot
            tub\",\"type\":4,\"flow\":0.14906867004605714},{\"fixture\":\"toilet\",\"sub_label\":{\"all\":[2],\"individual\":2},\"duration\":51,\"is_from_ml_profile\":true,\"cluster_means\":[1.7252895749080555,2.0297524410683003,51],\"gpm\":2.0297524410683003,\"start\":\"2019-01-09T20:34:07.020Z\",\"end\":\"2019-01-09T20:34:57.020Z\",\"label\":[0,5,6,9,13,14],\"type\":2,\"flow\":1.7252895749080555},{\"fixture\":\"toilet\",\"sub_label\":{\"all\":[2],\"individual\":2},\"duration\":39,\"is_from_ml_profile\":true,\"cluster_means\":[2.1283035190830626,3.274313106281635,39],\"gpm\":3.274313106281635,\"start\":\"2019-01-09T20:28:28.021Z\",\"end\":\"2019-01-09T20:29:06.021Z\",\"label\":[0,5,6,9,13,14],\"type\":2,\"flow\":2.1283035190830626},{\"fixture\":\"appliance\",\"sub_label\":{\"all\":[4],\"individual\":3},\"duration\":133,\"is_from_ml_profile\":true,\"cluster_means\":[8.186598550571112,3.6932023536411034,133],\"gpm\":3.6932023536411034,\"start\":\"2019-01-09T20:24:16.021Z\",\"end\":\"2019-01-09T20:26:28.021Z\",\"label\":[0,5,6,9,13,14],\"type\":3,\"flow\":8.186598550571112},{\"fixture\":\"faucet\",\"not_label\":[],\"duration\":64,\"cluster_means\":[1.4331223502416752,1.3435522033515706,64],\"gpm\":1.3435522033515706,\"start\":\"2019-01-09T20:17:06.022Z\",\"end\":\"2019-01-09T20:18:09.022Z\",\"predicted_fixture\":\"pool/hot
            tub\",\"type\":4,\"flow\":1.4331223502416752},{\"fixture\":\"faucet\",\"not_label\":[],\"duration\":76,\"cluster_means\":[1.8181129920589458,1.4353523621517994,76],\"gpm\":1.4353523621517994,\"start\":\"2019-01-09T20:09:04.023Z\",\"end\":\"2019-01-09T20:10:19.022Z\",\"predicted_fixture\":\"pool/hot
            tub\",\"type\":4,\"flow\":1.8181129920589458},{\"fixture\":\"faucet\",\"not_label\":[],\"duration\":36,\"cluster_means\":[0.5133975225489927,0.8556625375816546,36],\"gpm\":0.8556625375816546,\"start\":\"2019-01-09T19:59:57.024Z\",\"end\":\"2019-01-09T20:00:32.023Z\",\"predicted_fixture\":\"pool/hot
            tub\",\"type\":4,\"flow\":0.5133975225489927},{\"fixture\":\"faucet\",\"not_label\":[],\"duration\":19,\"cluster_means\":[0.2532803971332305,0.7998328330523067,19],\"gpm\":0.7998328330523067,\"start\":\"2019-01-09T19:55:16.024Z\",\"end\":\"2019-01-09T19:55:34.024Z\",\"predicted_fixture\":\"pool/hot
            tub\",\"type\":4,\"flow\":0.2532803971332305},{\"fixture\":\"faucet\",\"not_label\":[],\"duration\":23,\"cluster_means\":[0.1702594873385425,0.44415518436141516,23],\"gpm\":0.44415518436141516,\"start\":\"2019-01-09T19:34:57.028Z\",\"end\":\"2019-01-09T19:35:19.028Z\",\"predicted_fixture\":\"pool/hot
            tub\",\"type\":4,\"flow\":0.1702594873385425},{\"fixture\":\"appliance\",\"sub_label\":{\"all\":[4],\"individual\":3},\"duration\":137,\"is_from_ml_profile\":true,\"cluster_means\":[2.8342919026645013,1.241295723794672,137],\"gpm\":1.241295723794672,\"start\":\"2019-01-09T19:32:00.019Z\",\"end\":\"2019-01-09T19:34:16.028Z\",\"label\":[0,5,6,9,13,14],\"type\":3,\"flow\":2.8342919026645013},{\"fixture\":\"appliance\",\"sub_label\":{\"all\":[4],\"individual\":3},\"duration\":137,\"is_from_ml_profile\":true,\"cluster_means\":[4.679273849977214,2.049317014588561,137],\"gpm\":2.049317014588561,\"start\":\"2019-01-09T19:24:15.025Z\",\"end\":\"2019-01-09T19:26:31.022Z\",\"label\":[0,5,6,9,13,14],\"type\":3,\"flow\":4.679273849977214},{\"fixture\":\"faucet\",\"not_label\":[],\"duration\":20,\"cluster_means\":[0.23631201035015875,0.7089360310504763,20],\"gpm\":0.7089360310504763,\"start\":\"2019-01-09T19:15:12.028Z\",\"end\":\"2019-01-09T19:15:31.028Z\",\"predicted_fixture\":\"pool/hot
            tub\",\"type\":4,\"flow\":0.23631201035015875},{\"fixture\":\"appliance\",\"sub_label\":{\"all\":[4],\"individual\":3},\"duration\":421,\"is_from_ml_profile\":true,\"cluster_means\":[18.83973087059194,2.6849972737185666,421],\"gpm\":2.6849972737185666,\"start\":\"2019-01-09T19:08:01.028Z\",\"end\":\"2019-01-09T19:15:01.028Z\",\"label\":[0,5,6,9,13,14],\"type\":3,\"flow\":18.83973087059194},{\"fixture\":\"faucet\",\"not_label\":[],\"duration\":111,\"cluster_means\":[4.38310410029996,2.3692454596215997,111],\"gpm\":2.3692454596215997,\"start\":\"2019-01-09T19:05:33.018Z\",\"end\":\"2019-01-09T19:07:23.028Z\",\"predicted_fixture\":\"pool/hot
            tub\",\"type\":4,\"flow\":4.38310410029996},{\"fixture\":\"shower/bath\",\"sub_label\":{\"all\":[0,1,2,3,4],\"individual\":1},\"duration\":343,\"is_from_ml_profile\":true,\"cluster_means\":[19.617605857850336,3.4316511704694466,343],\"gpm\":3.4316511704694466,\"start\":\"2019-01-09T18:58:51.020Z\",\"end\":\"2019-01-09T19:04:33.019Z\",\"label\":[1,7,8,11,14],\"type\":1,\"flow\":19.617605857850336},{\"fixture\":\"toilet\",\"sub_label\":{\"all\":[2],\"individual\":2},\"duration\":34,\"is_from_ml_profile\":true,\"cluster_means\":[1.5995345282566789,2.8227079910411983,34],\"gpm\":2.8227079910411983,\"start\":\"2019-01-09T18:56:05.022Z\",\"end\":\"2019-01-09T18:56:38.021Z\",\"label\":[0,5,6,9,13,14],\"type\":2,\"flow\":1.5995345282566789},{\"fixture\":\"faucet\",\"not_label\":[],\"duration\":79,\"cluster_means\":[2.94967820075584,2.2402619246246886,79],\"gpm\":2.2402619246246886,\"start\":\"2019-01-09T18:50:43.027Z\",\"end\":\"2019-01-09T18:52:01.025Z\",\"predicted_fixture\":\"pool/hot
            tub\",\"type\":4,\"flow\":2.94967820075584},{\"fixture\":\"appliance\",\"sub_label\":{\"all\":[4],\"individual\":3},\"duration\":126,\"is_from_ml_profile\":true,\"cluster_means\":[6.579340706928584,3.133019384251707,126],\"gpm\":3.133019384251707,\"start\":\"2019-01-09T18:46:09.021Z\",\"end\":\"2019-01-09T18:48:14.020Z\",\"label\":[0,5,6,9,13,14],\"type\":3,\"flow\":6.579340706928584},{\"fixture\":\"faucet\",\"not_label\":[],\"duration\":71,\"cluster_means\":[3.574718429932732,3.020888814027661,71],\"gpm\":3.020888814027661,\"start\":\"2019-01-09T17:57:11.018Z\",\"end\":\"2019-01-09T17:58:21.019Z\",\"predicted_fixture\":\"pool/hot
            tub\",\"type\":4,\"flow\":3.574718429932732},{\"fixture\":\"toilet\",\"sub_label\":{\"all\":[2],\"individual\":2},\"duration\":49,\"is_from_ml_profile\":true,\"cluster_means\":[1.6635324458452192,2.0369785051165947,49],\"gpm\":2.0369785051165947,\"start\":\"2019-01-09T17:53:33.027Z\",\"end\":\"2019-01-09T17:54:21.028Z\",\"label\":[0,5,6,9,13,14],\"type\":2,\"flow\":1.6635324458452192},{\"fixture\":\"faucet\",\"not_label\":[],\"duration\":33,\"cluster_means\":[0.5784211677311059,1.0516748504201925,33],\"gpm\":1.0516748504201925,\"start\":\"2019-01-09T17:43:39.028Z\",\"end\":\"2019-01-09T17:44:11.027Z\",\"predicted_fixture\":\"pool/hot
            tub\",\"type\":4,\"flow\":0.5784211677311059},{\"fixture\":\"toilet\",\"sub_label\":{\"all\":[2],\"individual\":2},\"duration\":46,\"is_from_ml_profile\":true,\"cluster_means\":[1.5521737706842185,2.0245744835011545,46],\"gpm\":2.0245744835011545,\"start\":\"2019-01-09T17:41:14.019Z\",\"end\":\"2019-01-09T17:41:59.018Z\",\"label\":[0,5,6,9,13,14],\"type\":2,\"flow\":1.5521737706842185},{\"fixture\":\"appliance\",\"sub_label\":{\"all\":[4],\"individual\":3},\"duration\":157,\"is_from_ml_profile\":true,\"cluster_means\":[6.658405406763418,2.544613531247166,157],\"gpm\":2.544613531247166,\"start\":\"2019-01-09T17:30:44.025Z\",\"end\":\"2019-01-09T17:33:20.027Z\",\"label\":[0,5,6,9,13,14],\"type\":3,\"flow\":6.658405406763418},{\"fixture\":\"toilet\",\"sub_label\":{\"all\":[2],\"individual\":2},\"duration\":39,\"is_from_ml_profile\":true,\"cluster_means\":[2.1638215890492845,3.328956290845053,39],\"gpm\":3.328956290845053,\"start\":\"2019-01-09T17:21:47.019Z\",\"end\":\"2019-01-09T17:22:25.019Z\",\"label\":[0,5,6,9,13,14],\"type\":2,\"flow\":2.1638215890492845},{\"fixture\":\"appliance\",\"sub_label\":{\"all\":[4],\"individual\":3},\"duration\":243,\"is_from_ml_profile\":true,\"cluster_means\":[11.833409229070583,2.9218294392766873,243],\"gpm\":2.9218294392766873,\"start\":\"2019-01-09T17:08:30.024Z\",\"end\":\"2019-01-09T17:12:32.024Z\",\"label\":[0,5,6,9,13,14],\"type\":3,\"flow\":11.833409229070583},{\"fixture\":\"faucet\",\"not_label\":[],\"duration\":51,\"cluster_means\":[1.3019696089453185,1.5317289517003747,51],\"gpm\":1.5317289517003747,\"start\":\"2019-01-09T17:04:18.023Z\",\"end\":\"2019-01-09T17:05:08.024Z\",\"predicted_fixture\":\"pool/hot
            tub\",\"type\":4,\"flow\":1.3019696089453185},{\"fixture\":\"toilet\",\"sub_label\":{\"all\":[2],\"individual\":2},\"duration\":49,\"is_from_ml_profile\":true,\"cluster_means\":[2.005257473942795,2.455417315031994,49],\"gpm\":2.455417315031994,\"start\":\"2019-01-09T17:00:28.021Z\",\"end\":\"2019-01-09T17:01:16.021Z\",\"label\":[0,5,6,9,13,14],\"type\":2,\"flow\":2.005257473942795},{\"fixture\":\"appliance\",\"sub_label\":{\"all\":[4],\"individual\":3},\"duration\":131,\"is_from_ml_profile\":true,\"cluster_means\":[1.5478383417909314,0.7089335916599686,131],\"gpm\":0.7089335916599686,\"start\":\"2019-01-09T16:49:25.025Z\",\"end\":\"2019-01-09T16:51:35.026Z\",\"label\":[0,5,6,9,13,14],\"type\":3,\"flow\":1.5478383417909314},{\"fixture\":\"appliance\",\"sub_label\":{\"all\":[4],\"individual\":3},\"duration\":261,\"is_from_ml_profile\":true,\"cluster_means\":[13.336472316367077,3.065855704911972,261],\"gpm\":3.065855704911972,\"start\":\"2019-01-09T16:44:03.026Z\",\"end\":\"2019-01-09T16:48:23.025Z\",\"label\":[0,5,6,9,13,14],\"type\":3,\"flow\":13.336472316367077},{\"fixture\":\"toilet\",\"sub_label\":{\"all\":[2],\"individual\":2},\"duration\":51,\"is_from_ml_profile\":true,\"cluster_means\":[1.5779291293621456,1.856387211014289,51],\"gpm\":1.856387211014289,\"start\":\"2019-01-09T16:04:00.024Z\",\"end\":\"2019-01-09T16:04:50.024Z\",\"label\":[0,5,6,9,13,14],\"type\":2,\"flow\":1.5779291293621456},{\"fixture\":\"toilet\",\"sub_label\":{\"all\":[2],\"individual\":2},\"duration\":45,\"is_from_ml_profile\":true,\"cluster_means\":[1.3608589541886653,1.8144786055848872,45],\"gpm\":1.8144786055848872,\"start\":\"2019-01-09T07:41:24.024Z\",\"end\":\"2019-01-09T07:42:08.024Z\",\"label\":[0,5,6,9,13,14],\"type\":2,\"flow\":1.3608589541886653},{\"fixture\":\"faucet\",\"not_label\":[],\"duration\":88,\"cluster_means\":[0.8221554134942862,0.5605605092006497,88],\"gpm\":0.5605605092006497,\"start\":\"2019-01-09T07:35:38.022Z\",\"end\":\"2019-01-09T07:37:05.023Z\",\"predicted_fixture\":\"pool/hot
            tub\",\"type\":4,\"flow\":0.8221554134942862},{\"fixture\":\"faucet\",\"not_label\":[],\"duration\":49,\"cluster_means\":[0.6059225202302311,0.7419459431390584,49],\"gpm\":0.7419459431390584,\"start\":\"2019-01-09T06:57:02.021Z\",\"end\":\"2019-01-09T06:57:50.021Z\",\"predicted_fixture\":\"pool/hot
            tub\",\"type\":4,\"flow\":0.6059225202302311}],\"known_fixtures\":[\"irrigation\",\"shower/bath\",\"faucet\",\"appliance\",\"pool/hot
            tub\",\"toilet\"],\"compute_start_date\":\"2019-01-10T06:42:34.027618\",\"start_date\":\"2019-01-09T06:00:34.906Z\",\"request_id\":\"ffffffff-ffff-4fff-8fff-ffffffffffff\",\"duration_in_seconds\":86400}"


            headers = {
                'content-type': "application/json",
                'authorization': "Bearer REPLACE_BEARER_TOKEN"
                }

            conn.request("POST", "//api/v1/flodetect/%7Bdevice_id%7D", payload,
            headers)


            res = conn.getresponse()

            data = res.read()


            print(data.decode("utf-8"))
        - lang: Python_requests
          source: >-
            import requests


            url = "https://api.meetflo.com//api/v1/flodetect/%7Bdevice_id%7D"


            payload =
            "{\"compute_end_date\":\"2019-01-10T06:42:41.244267\",\"fixtures\":[{\"name\":\"shower/bath\",\"index\":0,\"type\":1,\"gallons\":19.6176,\"ratio\":0.1508,\"num_events\":1},{\"name\":\"toilet\",\"index\":1,\"type\":2,\"gallons\":15.7767,\"ratio\":0.1213,\"num_events\":9},{\"name\":\"appliance\",\"index\":2,\"type\":3,\"gallons\":74.4954,\"ratio\":0.5726,\"num_events\":9},{\"name\":\"faucet\",\"index\":3,\"type\":4,\"gallons\":20.2066,\"ratio\":0.1553,\"num_events\":20},{\"name\":\"other\",\"index\":4,\"type\":5,\"gallons\":0,\"ratio\":0,\"num_events\":0},{\"name\":\"irrigation\",\"index\":5,\"type\":6,\"gallons\":0,\"ratio\":0,\"num_events\":0},{\"name\":\"pool/hot
            tub\",\"index\":6,\"type\":7,\"gallons\":0,\"ratio\":0,\"num_events\":0}],\"end_date\":\"2019-01-10T06:00:34.906Z\",\"status\":\"executed\",\"device_id\":\"ffffffffffff\",\"event_chronology\":[{\"fixture\":\"faucet\",\"not_label\":[],\"duration\":23,\"cluster_means\":[0.26727133811566733,0.6972295776930452,23],\"gpm\":0.6972295776930452,\"start\":\"2019-01-10T04:05:12.025Z\",\"end\":\"2019-01-10T04:05:34.025Z\",\"predicted_fixture\":\"pool/hot
            tub\",\"type\":4,\"flow\":0.26727133811566733},{\"fixture\":\"faucet\",\"not_label\":[],\"duration\":15,\"cluster_means\":[0.14796972950898996,0.5918789180359598,15],\"gpm\":0.5918789180359598,\"start\":\"2019-01-10T03:46:50.024Z\",\"end\":\"2019-01-10T03:47:04.024Z\",\"predicted_fixture\":\"pool/hot
            tub\",\"type\":4,\"flow\":0.14796972950898996},{\"fixture\":\"faucet\",\"not_label\":[],\"duration\":11,\"cluster_means\":[0.0955861132858243,0.5213787997408598,11],\"gpm\":0.5213787997408598,\"start\":\"2019-01-10T03:19:30.024Z\",\"end\":\"2019-01-10T03:19:40.025Z\",\"predicted_fixture\":\"pool/hot
            tub\",\"type\":4,\"flow\":0.0955861132858243},{\"fixture\":\"faucet\",\"not_label\":[],\"duration\":15,\"cluster_means\":[0.11051073981146763,0.4420429592458705,15],\"gpm\":0.4420429592458705,\"start\":\"2019-01-10T03:18:52.024Z\",\"end\":\"2019-01-10T03:19:06.024Z\",\"predicted_fixture\":\"pool/hot
            tub\",\"type\":4,\"flow\":0.11051073981146763},{\"fixture\":\"faucet\",\"not_label\":[],\"duration\":13,\"cluster_means\":[0.07248914106551661,0.3345652664562305,13],\"gpm\":0.3345652664562305,\"start\":\"2019-01-10T03:08:33.027Z\",\"end\":\"2019-01-10T03:08:45.027Z\",\"predicted_fixture\":\"pool/hot
            tub\",\"type\":4,\"flow\":0.07248914106551661},{\"fixture\":\"faucet\",\"not_label\":[],\"duration\":52,\"cluster_means\":[0.7232994692494259,0.8345763106724146,52],\"gpm\":0.8345763106724146,\"start\":\"2019-01-10T02:54:47.027Z\",\"end\":\"2019-01-10T02:55:38.027Z\",\"predicted_fixture\":\"pool/hot
            tub\",\"type\":4,\"flow\":0.7232994692494259},{\"fixture\":\"faucet\",\"not_label\":[],\"duration\":17,\"cluster_means\":[0.14906867004605714,0.5261247178096135,17],\"gpm\":0.5261247178096135,\"start\":\"2019-01-10T02:51:41.027Z\",\"end\":\"2019-01-10T02:51:57.027Z\",\"predicted_fixture\":\"pool/hot
            tub\",\"type\":4,\"flow\":0.14906867004605714},{\"fixture\":\"toilet\",\"sub_label\":{\"all\":[2],\"individual\":2},\"duration\":51,\"is_from_ml_profile\":true,\"cluster_means\":[1.7252895749080555,2.0297524410683003,51],\"gpm\":2.0297524410683003,\"start\":\"2019-01-09T20:34:07.020Z\",\"end\":\"2019-01-09T20:34:57.020Z\",\"label\":[0,5,6,9,13,14],\"type\":2,\"flow\":1.7252895749080555},{\"fixture\":\"toilet\",\"sub_label\":{\"all\":[2],\"individual\":2},\"duration\":39,\"is_from_ml_profile\":true,\"cluster_means\":[2.1283035190830626,3.274313106281635,39],\"gpm\":3.274313106281635,\"start\":\"2019-01-09T20:28:28.021Z\",\"end\":\"2019-01-09T20:29:06.021Z\",\"label\":[0,5,6,9,13,14],\"type\":2,\"flow\":2.1283035190830626},{\"fixture\":\"appliance\",\"sub_label\":{\"all\":[4],\"individual\":3},\"duration\":133,\"is_from_ml_profile\":true,\"cluster_means\":[8.186598550571112,3.6932023536411034,133],\"gpm\":3.6932023536411034,\"start\":\"2019-01-09T20:24:16.021Z\",\"end\":\"2019-01-09T20:26:28.021Z\",\"label\":[0,5,6,9,13,14],\"type\":3,\"flow\":8.186598550571112},{\"fixture\":\"faucet\",\"not_label\":[],\"duration\":64,\"cluster_means\":[1.4331223502416752,1.3435522033515706,64],\"gpm\":1.3435522033515706,\"start\":\"2019-01-09T20:17:06.022Z\",\"end\":\"2019-01-09T20:18:09.022Z\",\"predicted_fixture\":\"pool/hot
            tub\",\"type\":4,\"flow\":1.4331223502416752},{\"fixture\":\"faucet\",\"not_label\":[],\"duration\":76,\"cluster_means\":[1.8181129920589458,1.4353523621517994,76],\"gpm\":1.4353523621517994,\"start\":\"2019-01-09T20:09:04.023Z\",\"end\":\"2019-01-09T20:10:19.022Z\",\"predicted_fixture\":\"pool/hot
            tub\",\"type\":4,\"flow\":1.8181129920589458},{\"fixture\":\"faucet\",\"not_label\":[],\"duration\":36,\"cluster_means\":[0.5133975225489927,0.8556625375816546,36],\"gpm\":0.8556625375816546,\"start\":\"2019-01-09T19:59:57.024Z\",\"end\":\"2019-01-09T20:00:32.023Z\",\"predicted_fixture\":\"pool/hot
            tub\",\"type\":4,\"flow\":0.5133975225489927},{\"fixture\":\"faucet\",\"not_label\":[],\"duration\":19,\"cluster_means\":[0.2532803971332305,0.7998328330523067,19],\"gpm\":0.7998328330523067,\"start\":\"2019-01-09T19:55:16.024Z\",\"end\":\"2019-01-09T19:55:34.024Z\",\"predicted_fixture\":\"pool/hot
            tub\",\"type\":4,\"flow\":0.2532803971332305},{\"fixture\":\"faucet\",\"not_label\":[],\"duration\":23,\"cluster_means\":[0.1702594873385425,0.44415518436141516,23],\"gpm\":0.44415518436141516,\"start\":\"2019-01-09T19:34:57.028Z\",\"end\":\"2019-01-09T19:35:19.028Z\",\"predicted_fixture\":\"pool/hot
            tub\",\"type\":4,\"flow\":0.1702594873385425},{\"fixture\":\"appliance\",\"sub_label\":{\"all\":[4],\"individual\":3},\"duration\":137,\"is_from_ml_profile\":true,\"cluster_means\":[2.8342919026645013,1.241295723794672,137],\"gpm\":1.241295723794672,\"start\":\"2019-01-09T19:32:00.019Z\",\"end\":\"2019-01-09T19:34:16.028Z\",\"label\":[0,5,6,9,13,14],\"type\":3,\"flow\":2.8342919026645013},{\"fixture\":\"appliance\",\"sub_label\":{\"all\":[4],\"individual\":3},\"duration\":137,\"is_from_ml_profile\":true,\"cluster_means\":[4.679273849977214,2.049317014588561,137],\"gpm\":2.049317014588561,\"start\":\"2019-01-09T19:24:15.025Z\",\"end\":\"2019-01-09T19:26:31.022Z\",\"label\":[0,5,6,9,13,14],\"type\":3,\"flow\":4.679273849977214},{\"fixture\":\"faucet\",\"not_label\":[],\"duration\":20,\"cluster_means\":[0.23631201035015875,0.7089360310504763,20],\"gpm\":0.7089360310504763,\"start\":\"2019-01-09T19:15:12.028Z\",\"end\":\"2019-01-09T19:15:31.028Z\",\"predicted_fixture\":\"pool/hot
            tub\",\"type\":4,\"flow\":0.23631201035015875},{\"fixture\":\"appliance\",\"sub_label\":{\"all\":[4],\"individual\":3},\"duration\":421,\"is_from_ml_profile\":true,\"cluster_means\":[18.83973087059194,2.6849972737185666,421],\"gpm\":2.6849972737185666,\"start\":\"2019-01-09T19:08:01.028Z\",\"end\":\"2019-01-09T19:15:01.028Z\",\"label\":[0,5,6,9,13,14],\"type\":3,\"flow\":18.83973087059194},{\"fixture\":\"faucet\",\"not_label\":[],\"duration\":111,\"cluster_means\":[4.38310410029996,2.3692454596215997,111],\"gpm\":2.3692454596215997,\"start\":\"2019-01-09T19:05:33.018Z\",\"end\":\"2019-01-09T19:07:23.028Z\",\"predicted_fixture\":\"pool/hot
            tub\",\"type\":4,\"flow\":4.38310410029996},{\"fixture\":\"shower/bath\",\"sub_label\":{\"all\":[0,1,2,3,4],\"individual\":1},\"duration\":343,\"is_from_ml_profile\":true,\"cluster_means\":[19.617605857850336,3.4316511704694466,343],\"gpm\":3.4316511704694466,\"start\":\"2019-01-09T18:58:51.020Z\",\"end\":\"2019-01-09T19:04:33.019Z\",\"label\":[1,7,8,11,14],\"type\":1,\"flow\":19.617605857850336},{\"fixture\":\"toilet\",\"sub_label\":{\"all\":[2],\"individual\":2},\"duration\":34,\"is_from_ml_profile\":true,\"cluster_means\":[1.5995345282566789,2.8227079910411983,34],\"gpm\":2.8227079910411983,\"start\":\"2019-01-09T18:56:05.022Z\",\"end\":\"2019-01-09T18:56:38.021Z\",\"label\":[0,5,6,9,13,14],\"type\":2,\"flow\":1.5995345282566789},{\"fixture\":\"faucet\",\"not_label\":[],\"duration\":79,\"cluster_means\":[2.94967820075584,2.2402619246246886,79],\"gpm\":2.2402619246246886,\"start\":\"2019-01-09T18:50:43.027Z\",\"end\":\"2019-01-09T18:52:01.025Z\",\"predicted_fixture\":\"pool/hot
            tub\",\"type\":4,\"flow\":2.94967820075584},{\"fixture\":\"appliance\",\"sub_label\":{\"all\":[4],\"individual\":3},\"duration\":126,\"is_from_ml_profile\":true,\"cluster_means\":[6.579340706928584,3.133019384251707,126],\"gpm\":3.133019384251707,\"start\":\"2019-01-09T18:46:09.021Z\",\"end\":\"2019-01-09T18:48:14.020Z\",\"label\":[0,5,6,9,13,14],\"type\":3,\"flow\":6.579340706928584},{\"fixture\":\"faucet\",\"not_label\":[],\"duration\":71,\"cluster_means\":[3.574718429932732,3.020888814027661,71],\"gpm\":3.020888814027661,\"start\":\"2019-01-09T17:57:11.018Z\",\"end\":\"2019-01-09T17:58:21.019Z\",\"predicted_fixture\":\"pool/hot
            tub\",\"type\":4,\"flow\":3.574718429932732},{\"fixture\":\"toilet\",\"sub_label\":{\"all\":[2],\"individual\":2},\"duration\":49,\"is_from_ml_profile\":true,\"cluster_means\":[1.6635324458452192,2.0369785051165947,49],\"gpm\":2.0369785051165947,\"start\":\"2019-01-09T17:53:33.027Z\",\"end\":\"2019-01-09T17:54:21.028Z\",\"label\":[0,5,6,9,13,14],\"type\":2,\"flow\":1.6635324458452192},{\"fixture\":\"faucet\",\"not_label\":[],\"duration\":33,\"cluster_means\":[0.5784211677311059,1.0516748504201925,33],\"gpm\":1.0516748504201925,\"start\":\"2019-01-09T17:43:39.028Z\",\"end\":\"2019-01-09T17:44:11.027Z\",\"predicted_fixture\":\"pool/hot
            tub\",\"type\":4,\"flow\":0.5784211677311059},{\"fixture\":\"toilet\",\"sub_label\":{\"all\":[2],\"individual\":2},\"duration\":46,\"is_from_ml_profile\":true,\"cluster_means\":[1.5521737706842185,2.0245744835011545,46],\"gpm\":2.0245744835011545,\"start\":\"2019-01-09T17:41:14.019Z\",\"end\":\"2019-01-09T17:41:59.018Z\",\"label\":[0,5,6,9,13,14],\"type\":2,\"flow\":1.5521737706842185},{\"fixture\":\"appliance\",\"sub_label\":{\"all\":[4],\"individual\":3},\"duration\":157,\"is_from_ml_profile\":true,\"cluster_means\":[6.658405406763418,2.544613531247166,157],\"gpm\":2.544613531247166,\"start\":\"2019-01-09T17:30:44.025Z\",\"end\":\"2019-01-09T17:33:20.027Z\",\"label\":[0,5,6,9,13,14],\"type\":3,\"flow\":6.658405406763418},{\"fixture\":\"toilet\",\"sub_label\":{\"all\":[2],\"individual\":2},\"duration\":39,\"is_from_ml_profile\":true,\"cluster_means\":[2.1638215890492845,3.328956290845053,39],\"gpm\":3.328956290845053,\"start\":\"2019-01-09T17:21:47.019Z\",\"end\":\"2019-01-09T17:22:25.019Z\",\"label\":[0,5,6,9,13,14],\"type\":2,\"flow\":2.1638215890492845},{\"fixture\":\"appliance\",\"sub_label\":{\"all\":[4],\"individual\":3},\"duration\":243,\"is_from_ml_profile\":true,\"cluster_means\":[11.833409229070583,2.9218294392766873,243],\"gpm\":2.9218294392766873,\"start\":\"2019-01-09T17:08:30.024Z\",\"end\":\"2019-01-09T17:12:32.024Z\",\"label\":[0,5,6,9,13,14],\"type\":3,\"flow\":11.833409229070583},{\"fixture\":\"faucet\",\"not_label\":[],\"duration\":51,\"cluster_means\":[1.3019696089453185,1.5317289517003747,51],\"gpm\":1.5317289517003747,\"start\":\"2019-01-09T17:04:18.023Z\",\"end\":\"2019-01-09T17:05:08.024Z\",\"predicted_fixture\":\"pool/hot
            tub\",\"type\":4,\"flow\":1.3019696089453185},{\"fixture\":\"toilet\",\"sub_label\":{\"all\":[2],\"individual\":2},\"duration\":49,\"is_from_ml_profile\":true,\"cluster_means\":[2.005257473942795,2.455417315031994,49],\"gpm\":2.455417315031994,\"start\":\"2019-01-09T17:00:28.021Z\",\"end\":\"2019-01-09T17:01:16.021Z\",\"label\":[0,5,6,9,13,14],\"type\":2,\"flow\":2.005257473942795},{\"fixture\":\"appliance\",\"sub_label\":{\"all\":[4],\"individual\":3},\"duration\":131,\"is_from_ml_profile\":true,\"cluster_means\":[1.5478383417909314,0.7089335916599686,131],\"gpm\":0.7089335916599686,\"start\":\"2019-01-09T16:49:25.025Z\",\"end\":\"2019-01-09T16:51:35.026Z\",\"label\":[0,5,6,9,13,14],\"type\":3,\"flow\":1.5478383417909314},{\"fixture\":\"appliance\",\"sub_label\":{\"all\":[4],\"individual\":3},\"duration\":261,\"is_from_ml_profile\":true,\"cluster_means\":[13.336472316367077,3.065855704911972,261],\"gpm\":3.065855704911972,\"start\":\"2019-01-09T16:44:03.026Z\",\"end\":\"2019-01-09T16:48:23.025Z\",\"label\":[0,5,6,9,13,14],\"type\":3,\"flow\":13.336472316367077},{\"fixture\":\"toilet\",\"sub_label\":{\"all\":[2],\"individual\":2},\"duration\":51,\"is_from_ml_profile\":true,\"cluster_means\":[1.5779291293621456,1.856387211014289,51],\"gpm\":1.856387211014289,\"start\":\"2019-01-09T16:04:00.024Z\",\"end\":\"2019-01-09T16:04:50.024Z\",\"label\":[0,5,6,9,13,14],\"type\":2,\"flow\":1.5779291293621456},{\"fixture\":\"toilet\",\"sub_label\":{\"all\":[2],\"individual\":2},\"duration\":45,\"is_from_ml_profile\":true,\"cluster_means\":[1.3608589541886653,1.8144786055848872,45],\"gpm\":1.8144786055848872,\"start\":\"2019-01-09T07:41:24.024Z\",\"end\":\"2019-01-09T07:42:08.024Z\",\"label\":[0,5,6,9,13,14],\"type\":2,\"flow\":1.3608589541886653},{\"fixture\":\"faucet\",\"not_label\":[],\"duration\":88,\"cluster_means\":[0.8221554134942862,0.5605605092006497,88],\"gpm\":0.5605605092006497,\"start\":\"2019-01-09T07:35:38.022Z\",\"end\":\"2019-01-09T07:37:05.023Z\",\"predicted_fixture\":\"pool/hot
            tub\",\"type\":4,\"flow\":0.8221554134942862},{\"fixture\":\"faucet\",\"not_label\":[],\"duration\":49,\"cluster_means\":[0.6059225202302311,0.7419459431390584,49],\"gpm\":0.7419459431390584,\"start\":\"2019-01-09T06:57:02.021Z\",\"end\":\"2019-01-09T06:57:50.021Z\",\"predicted_fixture\":\"pool/hot
            tub\",\"type\":4,\"flow\":0.6059225202302311}],\"known_fixtures\":[\"irrigation\",\"shower/bath\",\"faucet\",\"appliance\",\"pool/hot
            tub\",\"toilet\"],\"compute_start_date\":\"2019-01-10T06:42:34.027618\",\"start_date\":\"2019-01-09T06:00:34.906Z\",\"request_id\":\"ffffffff-ffff-4fff-8fff-ffffffffffff\",\"duration_in_seconds\":86400}"

            headers = {
                'content-type': "application/json",
                'authorization': "Bearer REPLACE_BEARER_TOKEN"
                }

            response = requests.request("POST", url, data=payload,
            headers=headers)


            print(response.text)
        - lang: Shell_curl
          source: |-
            curl --request POST \
              --url https://api.meetflo.com//api/v1/flodetect/%7Bdevice_id%7D \
              --header 'authorization: Bearer REPLACE_BEARER_TOKEN' \
              --header 'content-type: application/json' \
              --data '{"compute_end_date":"2019-01-10T06:42:41.244267","fixtures":[{"name":"shower/bath","index":0,"type":1,"gallons":19.6176,"ratio":0.1508,"num_events":1},{"name":"toilet","index":1,"type":2,"gallons":15.7767,"ratio":0.1213,"num_events":9},{"name":"appliance","index":2,"type":3,"gallons":74.4954,"ratio":0.5726,"num_events":9},{"name":"faucet","index":3,"type":4,"gallons":20.2066,"ratio":0.1553,"num_events":20},{"name":"other","index":4,"type":5,"gallons":0,"ratio":0,"num_events":0},{"name":"irrigation","index":5,"type":6,"gallons":0,"ratio":0,"num_events":0},{"name":"pool/hot tub","index":6,"type":7,"gallons":0,"ratio":0,"num_events":0}],"end_date":"2019-01-10T06:00:34.906Z","status":"executed","device_id":"ffffffffffff","event_chronology":[{"fixture":"faucet","not_label":[],"duration":23,"cluster_means":[0.26727133811566733,0.6972295776930452,23],"gpm":0.6972295776930452,"start":"2019-01-10T04:05:12.025Z","end":"2019-01-10T04:05:34.025Z","predicted_fixture":"pool/hot tub","type":4,"flow":0.26727133811566733},{"fixture":"faucet","not_label":[],"duration":15,"cluster_means":[0.14796972950898996,0.5918789180359598,15],"gpm":0.5918789180359598,"start":"2019-01-10T03:46:50.024Z","end":"2019-01-10T03:47:04.024Z","predicted_fixture":"pool/hot tub","type":4,"flow":0.14796972950898996},{"fixture":"faucet","not_label":[],"duration":11,"cluster_means":[0.0955861132858243,0.5213787997408598,11],"gpm":0.5213787997408598,"start":"2019-01-10T03:19:30.024Z","end":"2019-01-10T03:19:40.025Z","predicted_fixture":"pool/hot tub","type":4,"flow":0.0955861132858243},{"fixture":"faucet","not_label":[],"duration":15,"cluster_means":[0.11051073981146763,0.4420429592458705,15],"gpm":0.4420429592458705,"start":"2019-01-10T03:18:52.024Z","end":"2019-01-10T03:19:06.024Z","predicted_fixture":"pool/hot tub","type":4,"flow":0.11051073981146763},{"fixture":"faucet","not_label":[],"duration":13,"cluster_means":[0.07248914106551661,0.3345652664562305,13],"gpm":0.3345652664562305,"start":"2019-01-10T03:08:33.027Z","end":"2019-01-10T03:08:45.027Z","predicted_fixture":"pool/hot tub","type":4,"flow":0.07248914106551661},{"fixture":"faucet","not_label":[],"duration":52,"cluster_means":[0.7232994692494259,0.8345763106724146,52],"gpm":0.8345763106724146,"start":"2019-01-10T02:54:47.027Z","end":"2019-01-10T02:55:38.027Z","predicted_fixture":"pool/hot tub","type":4,"flow":0.7232994692494259},{"fixture":"faucet","not_label":[],"duration":17,"cluster_means":[0.14906867004605714,0.5261247178096135,17],"gpm":0.5261247178096135,"start":"2019-01-10T02:51:41.027Z","end":"2019-01-10T02:51:57.027Z","predicted_fixture":"pool/hot tub","type":4,"flow":0.14906867004605714},{"fixture":"toilet","sub_label":{"all":[2],"individual":2},"duration":51,"is_from_ml_profile":true,"cluster_means":[1.7252895749080555,2.0297524410683003,51],"gpm":2.0297524410683003,"start":"2019-01-09T20:34:07.020Z","end":"2019-01-09T20:34:57.020Z","label":[0,5,6,9,13,14],"type":2,"flow":1.7252895749080555},{"fixture":"toilet","sub_label":{"all":[2],"individual":2},"duration":39,"is_from_ml_profile":true,"cluster_means":[2.1283035190830626,3.274313106281635,39],"gpm":3.274313106281635,"start":"2019-01-09T20:28:28.021Z","end":"2019-01-09T20:29:06.021Z","label":[0,5,6,9,13,14],"type":2,"flow":2.1283035190830626},{"fixture":"appliance","sub_label":{"all":[4],"individual":3},"duration":133,"is_from_ml_profile":true,"cluster_means":[8.186598550571112,3.6932023536411034,133],"gpm":3.6932023536411034,"start":"2019-01-09T20:24:16.021Z","end":"2019-01-09T20:26:28.021Z","label":[0,5,6,9,13,14],"type":3,"flow":8.186598550571112},{"fixture":"faucet","not_label":[],"duration":64,"cluster_means":[1.4331223502416752,1.3435522033515706,64],"gpm":1.3435522033515706,"start":"2019-01-09T20:17:06.022Z","end":"2019-01-09T20:18:09.022Z","predicted_fixture":"pool/hot tub","type":4,"flow":1.4331223502416752},{"fixture":"faucet","not_label":[],"duration":76,"cluster_means":[1.8181129920589458,1.4353523621517994,76],"gpm":1.4353523621517994,"start":"2019-01-09T20:09:04.023Z","end":"2019-01-09T20:10:19.022Z","predicted_fixture":"pool/hot tub","type":4,"flow":1.8181129920589458},{"fixture":"faucet","not_label":[],"duration":36,"cluster_means":[0.5133975225489927,0.8556625375816546,36],"gpm":0.8556625375816546,"start":"2019-01-09T19:59:57.024Z","end":"2019-01-09T20:00:32.023Z","predicted_fixture":"pool/hot tub","type":4,"flow":0.5133975225489927},{"fixture":"faucet","not_label":[],"duration":19,"cluster_means":[0.2532803971332305,0.7998328330523067,19],"gpm":0.7998328330523067,"start":"2019-01-09T19:55:16.024Z","end":"2019-01-09T19:55:34.024Z","predicted_fixture":"pool/hot tub","type":4,"flow":0.2532803971332305},{"fixture":"faucet","not_label":[],"duration":23,"cluster_means":[0.1702594873385425,0.44415518436141516,23],"gpm":0.44415518436141516,"start":"2019-01-09T19:34:57.028Z","end":"2019-01-09T19:35:19.028Z","predicted_fixture":"pool/hot tub","type":4,"flow":0.1702594873385425},{"fixture":"appliance","sub_label":{"all":[4],"individual":3},"duration":137,"is_from_ml_profile":true,"cluster_means":[2.8342919026645013,1.241295723794672,137],"gpm":1.241295723794672,"start":"2019-01-09T19:32:00.019Z","end":"2019-01-09T19:34:16.028Z","label":[0,5,6,9,13,14],"type":3,"flow":2.8342919026645013},{"fixture":"appliance","sub_label":{"all":[4],"individual":3},"duration":137,"is_from_ml_profile":true,"cluster_means":[4.679273849977214,2.049317014588561,137],"gpm":2.049317014588561,"start":"2019-01-09T19:24:15.025Z","end":"2019-01-09T19:26:31.022Z","label":[0,5,6,9,13,14],"type":3,"flow":4.679273849977214},{"fixture":"faucet","not_label":[],"duration":20,"cluster_means":[0.23631201035015875,0.7089360310504763,20],"gpm":0.7089360310504763,"start":"2019-01-09T19:15:12.028Z","end":"2019-01-09T19:15:31.028Z","predicted_fixture":"pool/hot tub","type":4,"flow":0.23631201035015875},{"fixture":"appliance","sub_label":{"all":[4],"individual":3},"duration":421,"is_from_ml_profile":true,"cluster_means":[18.83973087059194,2.6849972737185666,421],"gpm":2.6849972737185666,"start":"2019-01-09T19:08:01.028Z","end":"2019-01-09T19:15:01.028Z","label":[0,5,6,9,13,14],"type":3,"flow":18.83973087059194},{"fixture":"faucet","not_label":[],"duration":111,"cluster_means":[4.38310410029996,2.3692454596215997,111],"gpm":2.3692454596215997,"start":"2019-01-09T19:05:33.018Z","end":"2019-01-09T19:07:23.028Z","predicted_fixture":"pool/hot tub","type":4,"flow":4.38310410029996},{"fixture":"shower/bath","sub_label":{"all":[0,1,2,3,4],"individual":1},"duration":343,"is_from_ml_profile":true,"cluster_means":[19.617605857850336,3.4316511704694466,343],"gpm":3.4316511704694466,"start":"2019-01-09T18:58:51.020Z","end":"2019-01-09T19:04:33.019Z","label":[1,7,8,11,14],"type":1,"flow":19.617605857850336},{"fixture":"toilet","sub_label":{"all":[2],"individual":2},"duration":34,"is_from_ml_profile":true,"cluster_means":[1.5995345282566789,2.8227079910411983,34],"gpm":2.8227079910411983,"start":"2019-01-09T18:56:05.022Z","end":"2019-01-09T18:56:38.021Z","label":[0,5,6,9,13,14],"type":2,"flow":1.5995345282566789},{"fixture":"faucet","not_label":[],"duration":79,"cluster_means":[2.94967820075584,2.2402619246246886,79],"gpm":2.2402619246246886,"start":"2019-01-09T18:50:43.027Z","end":"2019-01-09T18:52:01.025Z","predicted_fixture":"pool/hot tub","type":4,"flow":2.94967820075584},{"fixture":"appliance","sub_label":{"all":[4],"individual":3},"duration":126,"is_from_ml_profile":true,"cluster_means":[6.579340706928584,3.133019384251707,126],"gpm":3.133019384251707,"start":"2019-01-09T18:46:09.021Z","end":"2019-01-09T18:48:14.020Z","label":[0,5,6,9,13,14],"type":3,"flow":6.579340706928584},{"fixture":"faucet","not_label":[],"duration":71,"cluster_means":[3.574718429932732,3.020888814027661,71],"gpm":3.020888814027661,"start":"2019-01-09T17:57:11.018Z","end":"2019-01-09T17:58:21.019Z","predicted_fixture":"pool/hot tub","type":4,"flow":3.574718429932732},{"fixture":"toilet","sub_label":{"all":[2],"individual":2},"duration":49,"is_from_ml_profile":true,"cluster_means":[1.6635324458452192,2.0369785051165947,49],"gpm":2.0369785051165947,"start":"2019-01-09T17:53:33.027Z","end":"2019-01-09T17:54:21.028Z","label":[0,5,6,9,13,14],"type":2,"flow":1.6635324458452192},{"fixture":"faucet","not_label":[],"duration":33,"cluster_means":[0.5784211677311059,1.0516748504201925,33],"gpm":1.0516748504201925,"start":"2019-01-09T17:43:39.028Z","end":"2019-01-09T17:44:11.027Z","predicted_fixture":"pool/hot tub","type":4,"flow":0.5784211677311059},{"fixture":"toilet","sub_label":{"all":[2],"individual":2},"duration":46,"is_from_ml_profile":true,"cluster_means":[1.5521737706842185,2.0245744835011545,46],"gpm":2.0245744835011545,"start":"2019-01-09T17:41:14.019Z","end":"2019-01-09T17:41:59.018Z","label":[0,5,6,9,13,14],"type":2,"flow":1.5521737706842185},{"fixture":"appliance","sub_label":{"all":[4],"individual":3},"duration":157,"is_from_ml_profile":true,"cluster_means":[6.658405406763418,2.544613531247166,157],"gpm":2.544613531247166,"start":"2019-01-09T17:30:44.025Z","end":"2019-01-09T17:33:20.027Z","label":[0,5,6,9,13,14],"type":3,"flow":6.658405406763418},{"fixture":"toilet","sub_label":{"all":[2],"individual":2},"duration":39,"is_from_ml_profile":true,"cluster_means":[2.1638215890492845,3.328956290845053,39],"gpm":3.328956290845053,"start":"2019-01-09T17:21:47.019Z","end":"2019-01-09T17:22:25.019Z","label":[0,5,6,9,13,14],"type":2,"flow":2.1638215890492845},{"fixture":"appliance","sub_label":{"all":[4],"individual":3},"duration":243,"is_from_ml_profile":true,"cluster_means":[11.833409229070583,2.9218294392766873,243],"gpm":2.9218294392766873,"start":"2019-01-09T17:08:30.024Z","end":"2019-01-09T17:12:32.024Z","label":[0,5,6,9,13,14],"type":3,"flow":11.833409229070583},{"fixture":"faucet","not_label":[],"duration":51,"cluster_means":[1.3019696089453185,1.5317289517003747,51],"gpm":1.5317289517003747,"start":"2019-01-09T17:04:18.023Z","end":"2019-01-09T17:05:08.024Z","predicted_fixture":"pool/hot tub","type":4,"flow":1.3019696089453185},{"fixture":"toilet","sub_label":{"all":[2],"individual":2},"duration":49,"is_from_ml_profile":true,"cluster_means":[2.005257473942795,2.455417315031994,49],"gpm":2.455417315031994,"start":"2019-01-09T17:00:28.021Z","end":"2019-01-09T17:01:16.021Z","label":[0,5,6,9,13,14],"type":2,"flow":2.005257473942795},{"fixture":"appliance","sub_label":{"all":[4],"individual":3},"duration":131,"is_from_ml_profile":true,"cluster_means":[1.5478383417909314,0.7089335916599686,131],"gpm":0.7089335916599686,"start":"2019-01-09T16:49:25.025Z","end":"2019-01-09T16:51:35.026Z","label":[0,5,6,9,13,14],"type":3,"flow":1.5478383417909314},{"fixture":"appliance","sub_label":{"all":[4],"individual":3},"duration":261,"is_from_ml_profile":true,"cluster_means":[13.336472316367077,3.065855704911972,261],"gpm":3.065855704911972,"start":"2019-01-09T16:44:03.026Z","end":"2019-01-09T16:48:23.025Z","label":[0,5,6,9,13,14],"type":3,"flow":13.336472316367077},{"fixture":"toilet","sub_label":{"all":[2],"individual":2},"duration":51,"is_from_ml_profile":true,"cluster_means":[1.5779291293621456,1.856387211014289,51],"gpm":1.856387211014289,"start":"2019-01-09T16:04:00.024Z","end":"2019-01-09T16:04:50.024Z","label":[0,5,6,9,13,14],"type":2,"flow":1.5779291293621456},{"fixture":"toilet","sub_label":{"all":[2],"individual":2},"duration":45,"is_from_ml_profile":true,"cluster_means":[1.3608589541886653,1.8144786055848872,45],"gpm":1.8144786055848872,"start":"2019-01-09T07:41:24.024Z","end":"2019-01-09T07:42:08.024Z","label":[0,5,6,9,13,14],"type":2,"flow":1.3608589541886653},{"fixture":"faucet","not_label":[],"duration":88,"cluster_means":[0.8221554134942862,0.5605605092006497,88],"gpm":0.5605605092006497,"start":"2019-01-09T07:35:38.022Z","end":"2019-01-09T07:37:05.023Z","predicted_fixture":"pool/hot tub","type":4,"flow":0.8221554134942862},{"fixture":"faucet","not_label":[],"duration":49,"cluster_means":[0.6059225202302311,0.7419459431390584,49],"gpm":0.7419459431390584,"start":"2019-01-09T06:57:02.021Z","end":"2019-01-09T06:57:50.021Z","predicted_fixture":"pool/hot tub","type":4,"flow":0.6059225202302311}],"known_fixtures":["irrigation","shower/bath","faucet","appliance","pool/hot tub","toilet"],"compute_start_date":"2019-01-10T06:42:34.027618","start_date":"2019-01-09T06:00:34.906Z","request_id":"ffffffff-ffff-4fff-8fff-ffffffffffff","duration_in_seconds":86400}'
  '/api/v1/flodetect/latest/{device_id}/{duration}':
    get:
      deprecated: true
      operationId: getFloDetect
      summary: Get FloDetect (Legacy)
      description: >-
        Endpoint to retrieve the latest executed computation of a specific
        duration
      security:
        - OAuth2:
            - user
      tags:
        - Flo Detect
      parameters:
        - $ref: '#/components/parameters/Authorization'
        - name: device_id
          in: path
          description: Device ID of the device for which the computation was performed
          required: true
          schema:
            type: string
        - name: duration
          description: |
            Number of seconds of date range of date used in computation, e.g.
            * 24 hour computations => duration = 86400
            * 7 day computations => duration = 604800
          in: path
          required: true
          schema:
            type: integer
            format: int32
            example: ffffffffffff
        - name: tz
          description: >
            A URI encoded IANA timezone. start_date, end_date,
            event_chronology[i].start, event_chronology[i].end dates will be
            converted to the timezone specified. If this param is missing, it
            will default to UTC.
          in: query
          required: false
          schema:
            type: string
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FloDetect'
        '400':
          $ref: '#/components/responses/DataValidataionError'
        '401':
          $ref: '#/components/responses/InvalidAuthTokenError'
        '403':
          $ref: '#/components/responses/NoPermissionError'
        '500':
          $ref: '#/components/responses/InternalServerError'
      x-code-samples:
        - lang: Java_okhttp
          source: |-
            OkHttpClient client = new OkHttpClient();

            Request request = new Request.Builder()
              .url("https://api.meetflo.com//api/v1/flodetect/latest/%7Bdevice_id%7D/%7Bduration%7D?tz=SOME_STRING_VALUE")
              .get()
              .addHeader("authorization", "Bearer REPLACE_BEARER_TOKEN")
              .build();

            Response response = client.newCall(request).execute();
        - lang: Javascript_xhr
          source: >-
            var data = null;


            var xhr = new XMLHttpRequest();

            xhr.withCredentials = true;


            xhr.addEventListener("readystatechange", function () {
              if (this.readyState === this.DONE) {
                console.log(this.responseText);
              }
            });


            xhr.open("GET",
            "https://api.meetflo.com//api/v1/flodetect/latest/%7Bdevice_id%7D/%7Bduration%7D?tz=SOME_STRING_VALUE");

            xhr.setRequestHeader("authorization", "Bearer
            REPLACE_BEARER_TOKEN");


            xhr.send(data);
        - lang: Node_native
          source: |-
            var http = require("https");

            var options = {
              "method": "GET",
              "hostname": "api.meetflo.com",
              "port": null,
              "path": "//api/v1/flodetect/latest/%7Bdevice_id%7D/%7Bduration%7D?tz=SOME_STRING_VALUE",
              "headers": {
                "authorization": "Bearer REPLACE_BEARER_TOKEN"
              }
            };

            var req = http.request(options, function (res) {
              var chunks = [];

              res.on("data", function (chunk) {
                chunks.push(chunk);
              });

              res.on("end", function () {
                var body = Buffer.concat(chunks);
                console.log(body.toString());
              });
            });

            req.end();
        - lang: Python_python3
          source: >-
            import http.client


            conn = http.client.HTTPSConnection("api.meetflo.com")


            headers = { 'authorization': "Bearer REPLACE_BEARER_TOKEN" }


            conn.request("GET",
            "//api/v1/flodetect/latest/%7Bdevice_id%7D/%7Bduration%7D?tz=SOME_STRING_VALUE",
            headers=headers)


            res = conn.getresponse()

            data = res.read()


            print(data.decode("utf-8"))
        - lang: Python_requests
          source: >-
            import requests


            url =
            "https://api.meetflo.com//api/v1/flodetect/latest/%7Bdevice_id%7D/%7Bduration%7D"


            querystring = {"tz":"SOME_STRING_VALUE"}


            headers = {'authorization': 'Bearer REPLACE_BEARER_TOKEN'}


            response = requests.request("GET", url, headers=headers,
            params=querystring)


            print(response.text)
        - lang: Shell_curl
          source: |-
            curl --request GET \
              --url 'https://api.meetflo.com//api/v1/flodetect/latest/%7Bdevice_id%7D/%7Bduration%7D?tz=SOME_STRING_VALUE' \
              --header 'authorization: Bearer REPLACE_BEARER_TOKEN'
  '/api/v1/flodetect/computations/latest/{device_id}/{duration}':
    get:
      operationId: getFloDetect2
      summary: Get FloDetect
      description: >-
        Endpoint to retrieve the latest executed computation of a specific
        duration

        Legacy version of this endpoint will return a 404 for computations whose status is not executed or feedback_submitted
      security:
        - OAuth2:
            - user
      tags:
        - Flo Detect
      parameters:
        - $ref: '#/components/parameters/Authorization'
        - name: device_id
          in: path
          description: Device ID of the device for which the computation was performed
          required: true
          schema:
            type: string
        - name: duration
          description: |
            Number of seconds of date range of date used in computation, e.g.
            * 24 hour computations => duration = 86400
            * 7 day computations => duration = 604800
          in: path
          required: true
          schema:
            type: integer
            format: int32
            example: ffffffffffff
        - name: tz
          description: >
            A URI encoded IANA timezone. start_date, end_date,
            event_chronology[i].start, event_chronology[i].end dates will be
            converted to the timezone specified. If this param is missing, it
            will default to UTC.
          in: query
          required: false
          schema:
            type: string
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FloDetect'
        '400':
          $ref: '#/components/responses/DataValidataionError'
        '401':
          $ref: '#/components/responses/InvalidAuthTokenError'
        '403':
          $ref: '#/components/responses/NoPermissionError'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/api/v1/feedback/{device_id}/{start_date}/{end_date}':
    post:
      operationId: putFeedback
      summary: Put Feedback
      description: >-
        Endpoint to submit feedback on the accuracy of a computation. The status
        of the record will change to "feedback_submitted"
      security:
        - OAuth2:
            - user
      tags:
        - Flo Detect
      parameters:
        - $ref: '#/components/parameters/Authorization'
        - name: device_id
          in: path
          description: Device ID of the device for which the computation was performed
          required: true
          schema:
            type: string
        - name: start_date
          description: Beginning of date range of data used in computation
          in: path
          required: true
          schema:
            type: string
            format: date-time
            example: '2019-01-10T04:05:12.025Z'
        - name: end_date
          description: Ending of date range of data used in computation
          in: path
          required: true
          schema:
            type: string
            format: date-time
            example: '2019-01-10T04:05:12.025Z'
      responses:
        '200':
          $ref: '#/components/responses/Ok'
        '400':
          $ref: '#/components/responses/DataValidataionError'
        '401':
          $ref: '#/components/responses/InvalidAuthTokenError'
        '403':
          $ref: '#/components/responses/NoPermissionError'
        '500':
          $ref: '#/components/responses/InternalServerError'
      x-code-samples:
        - lang: Java_okhttp
          source: |-
            OkHttpClient client = new OkHttpClient();

            Request request = new Request.Builder()
              .url("https://api.meetflo.com//api/v1/feedback/%7Bdevice_id%7D/%7Bstart_date%7D/%7Bend_date%7D")
              .post(null)
              .addHeader("authorization", "Bearer REPLACE_BEARER_TOKEN")
              .build();

            Response response = client.newCall(request).execute();
        - lang: Javascript_xhr
          source: >-
            var data = null;


            var xhr = new XMLHttpRequest();

            xhr.withCredentials = true;


            xhr.addEventListener("readystatechange", function () {
              if (this.readyState === this.DONE) {
                console.log(this.responseText);
              }
            });


            xhr.open("POST",
            "https://api.meetflo.com//api/v1/feedback/%7Bdevice_id%7D/%7Bstart_date%7D/%7Bend_date%7D");

            xhr.setRequestHeader("authorization", "Bearer
            REPLACE_BEARER_TOKEN");


            xhr.send(data);
        - lang: Node_native
          source: |-
            var http = require("https");

            var options = {
              "method": "POST",
              "hostname": "api.meetflo.com",
              "port": null,
              "path": "//api/v1/feedback/%7Bdevice_id%7D/%7Bstart_date%7D/%7Bend_date%7D",
              "headers": {
                "authorization": "Bearer REPLACE_BEARER_TOKEN"
              }
            };

            var req = http.request(options, function (res) {
              var chunks = [];

              res.on("data", function (chunk) {
                chunks.push(chunk);
              });

              res.on("end", function () {
                var body = Buffer.concat(chunks);
                console.log(body.toString());
              });
            });

            req.end();
        - lang: Python_python3
          source: >-
            import http.client


            conn = http.client.HTTPSConnection("api.meetflo.com")


            headers = { 'authorization': "Bearer REPLACE_BEARER_TOKEN" }


            conn.request("POST",
            "//api/v1/feedback/%7Bdevice_id%7D/%7Bstart_date%7D/%7Bend_date%7D",
            headers=headers)


            res = conn.getresponse()

            data = res.read()


            print(data.decode("utf-8"))
        - lang: Python_requests
          source: >-
            import requests


            url =
            "https://api.meetflo.com//api/v1/feedback/%7Bdevice_id%7D/%7Bstart_date%7D/%7Bend_date%7D"


            headers = {'authorization': 'Bearer REPLACE_BEARER_TOKEN'}


            response = requests.request("POST", url, headers=headers)


            print(response.text)
        - lang: Shell_curl
          source: |-
            curl --request POST \
              --url https://api.meetflo.com//api/v1/feedback/%7Bdevice_id%7D/%7Bstart_date%7D/%7Bend_date%7D \
              --header 'authorization: Bearer REPLACE_BEARER_TOKEN'
  '/api/v1/flodetect/latest/{device_id}/{duration}/range/{range_start}/{range_end}':
    get:
      deprecated: true
      operationId: getRangedFloDetect
      summary: Get Ranged FloDetect (Legacy)
      description: >-
        Endpoint to retrieve the latest computation within a specific time
        range. This is useful to retrieve computations that for
        midnight-to-midnight periods, for example.
      security:
        - OAuth2:
            - user
      tags:
        - Flo Detect
      parameters:
        - $ref: '#/components/parameters/Authorization'
        - name: device_id
          in: path
          description: Device ID of the device for which the computation was performed
          required: true
          schema:
            type: string
        - name: duration
          description: |
            Number of seconds of date range of date used in computation, e.g.
            * 24 hour computations => duration = 86400
            * 7 day computations => duration = 604800
          in: path
          required: true
          schema:
            type: integer
            format: int32
        - name: range_start
          description: >-
            Beginning of date range in which the start date of the computed date
            range should fall
          in: path
          required: true
          schema:
            type: string
            format: date-time
            example: '2019-01-10T04:05:12.025Z'
        - name: range_end
          description: >-
            Ending of date range in which the start date of the computed date
            range should fall
          in: path
          required: true
          schema:
            type: string
            format: date-time
            example: '2019-01-10T04:05:12.025Z'
        - name: tz
          description: >
            A URI encoded IANA timezone. start_date, end_date,
            event_chronology[i].start, event_chronology[i].end dates will be
            converted to the timezone specified. If this param is missing, it
            will default to UTC.
          in: query
          required: false
          schema:
            type: string
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FloDetect'
        '400':
          $ref: '#/components/responses/DataValidataionError'
        '401':
          $ref: '#/components/responses/InvalidAuthTokenError'
        '403':
          $ref: '#/components/responses/NoPermissionError'
        '500':
          $ref: '#/components/responses/InternalServerError'
      x-code-samples:
        - lang: Java_okhttp
          source: |-
            OkHttpClient client = new OkHttpClient();

            Request request = new Request.Builder()
              .url("https://api.meetflo.com//api/v1/flodetect/latest/%7Bdevice_id%7D/%7Bduration%7D/range/%7Brange_start%7D/%7Brange_end%7D?tz=SOME_STRING_VALUE")
              .get()
              .addHeader("authorization", "Bearer REPLACE_BEARER_TOKEN")
              .build();

            Response response = client.newCall(request).execute();
        - lang: Javascript_xhr
          source: >-
            var data = null;


            var xhr = new XMLHttpRequest();

            xhr.withCredentials = true;


            xhr.addEventListener("readystatechange", function () {
              if (this.readyState === this.DONE) {
                console.log(this.responseText);
              }
            });


            xhr.open("GET",
            "https://api.meetflo.com//api/v1/flodetect/latest/%7Bdevice_id%7D/%7Bduration%7D/range/%7Brange_start%7D/%7Brange_end%7D?tz=SOME_STRING_VALUE");

            xhr.setRequestHeader("authorization", "Bearer
            REPLACE_BEARER_TOKEN");


            xhr.send(data);
        - lang: Node_native
          source: |-
            var http = require("https");

            var options = {
              "method": "GET",
              "hostname": "api.meetflo.com",
              "port": null,
              "path": "//api/v1/flodetect/latest/%7Bdevice_id%7D/%7Bduration%7D/range/%7Brange_start%7D/%7Brange_end%7D?tz=SOME_STRING_VALUE",
              "headers": {
                "authorization": "Bearer REPLACE_BEARER_TOKEN"
              }
            };

            var req = http.request(options, function (res) {
              var chunks = [];

              res.on("data", function (chunk) {
                chunks.push(chunk);
              });

              res.on("end", function () {
                var body = Buffer.concat(chunks);
                console.log(body.toString());
              });
            });

            req.end();
        - lang: Python_python3
          source: >-
            import http.client


            conn = http.client.HTTPSConnection("api.meetflo.com")


            headers = { 'authorization': "Bearer REPLACE_BEARER_TOKEN" }


            conn.request("GET",
            "//api/v1/flodetect/latest/%7Bdevice_id%7D/%7Bduration%7D/range/%7Brange_start%7D/%7Brange_end%7D?tz=SOME_STRING_VALUE",
            headers=headers)


            res = conn.getresponse()

            data = res.read()


            print(data.decode("utf-8"))
        - lang: Python_requests
          source: >-
            import requests


            url =
            "https://api.meetflo.com//api/v1/flodetect/latest/%7Bdevice_id%7D/%7Bduration%7D/range/%7Brange_start%7D/%7Brange_end%7D"


            querystring = {"tz":"SOME_STRING_VALUE"}


            headers = {'authorization': 'Bearer REPLACE_BEARER_TOKEN'}


            response = requests.request("GET", url, headers=headers,
            params=querystring)


            print(response.text)
        - lang: Shell_curl
          source: |-
            curl --request GET \
              --url 'https://api.meetflo.com//api/v1/flodetect/latest/%7Bdevice_id%7D/%7Bduration%7D/range/%7Brange_start%7D/%7Brange_end%7D?tz=SOME_STRING_VALUE' \
              --header 'authorization: Bearer REPLACE_BEARER_TOKEN'
  '/api/v1/flodetect/computations/latest/{device_id}/{duration}/range/{range_start}/{range_end}':
    get:
      operationId: getRangedFloDetect2
      summary: Get Ranged FloDetect
      description: >-
        Endpoint to retrieve the latest computation within a specific time range.
        This is useful to retrieve computations that for midnight-to-midnight periods, for example.

        Legacy version of this endpoint will return a 404 for computations whose status is not executed or feedback_submitted
      security:
        - OAuth2:
            - user
      tags:
        - Flo Detect
      parameters:
        - $ref: '#/components/parameters/Authorization'
        - name: device_id
          in: path
          description: Device ID of the device for which the computation was performed
          required: true
          schema:
            type: string
        - name: duration
          description: |
            Number of seconds of date range of date used in computation, e.g.
            * 24 hour computations => duration = 86400
            * 7 day computations => duration = 604800
          in: path
          required: true
          schema:
            type: integer
            format: int32
        - name: range_start
          description: >-
            Beginning of date range in which the start date of the computed date
            range should fall
          in: path
          required: true
          schema:
            type: string
            format: date-time
            example: '2019-01-10T04:05:12.025Z'
        - name: range_end
          description: >-
            Ending of date range in which the start date of the computed date
            range should fall
          in: path
          required: true
          schema:
            type: string
            format: date-time
            example: '2019-01-10T04:05:12.025Z'
        - name: tz
          description: >
            A URI encoded IANA timezone. start_date, end_date,
            event_chronology[i].start, event_chronology[i].end dates will be
            converted to the timezone specified. If this param is missing, it
            will default to UTC.
          in: query
          required: false
          schema:
            type: string
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FloDetect'
        '400':
          $ref: '#/components/responses/DataValidataionError'
        '401':
          $ref: '#/components/responses/InvalidAuthTokenError'
        '403':
          $ref: '#/components/responses/NoPermissionError'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/api/v1/flodetect/event/{device_id}/{request_id}':
    post:
      operationId: addFlowEvents
      summary: Add Flow Events
      description: >-
        Batch insertion of flow events related to a Flo Detect Generator
        computation specified by device ID and request ID. It's recommend to
        keep the batch size under 150 events at a time.
      security:
        - OAuth2:
            - user
      tags:
        - Flo Detect
      parameters:
        - $ref: '#/components/parameters/Authorization'
        - name: device_id
          in: path
          description: Device ID of the device for which the computation was performed
          required: true
          schema:
            type: string
        - name: request_id
          description: Unique ID of the computation request
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/Uuid'
      responses:
        '200':
          $ref: '#/components/responses/Ok'
        '400':
          $ref: '#/components/responses/DataValidataionError'
        '401':
          $ref: '#/components/responses/InvalidAuthTokenError'
        '403':
          $ref: '#/components/responses/NoPermissionError'
        '500':
          $ref: '#/components/responses/InternalServerError'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                event_chronology:
                  type: array
                  items:
                    $ref: '#/components/schemas/FlowEvent'
        description: Unique ID of the computation request
        required: true
      x-code-samples:
        - lang: Java_okhttp
          source: >-
            OkHttpClient client = new OkHttpClient();


            MediaType mediaType = MediaType.parse("application/json");

            RequestBody body = RequestBody.create(mediaType,
            "{\"event_chronology\":[{\"fixture\":\"faucet\",\"not_label\":[0],\"duration\":23,\"cluster_means\":[0.26727133811566733],\"gpm\":0.6972295776930452,\"start\":\"2019-01-10T04:05:12.025Z\",\"end\":\"2019-01-10T04:05:34.025Z\",\"predicted_fixture\":\"pool/hot
            tub\",\"type\":4,\"flow\":0.26727133811566733,\"sub_label\":{\"all\":[0],\"individual\":0},\"not_sub_label\":{\"all\":[0],\"individual\":0},\"feedback\":{\"case\":0,\"correct_fixture\":\"string\"}}]}");

            Request request = new Request.Builder()
              .url("https://api.meetflo.com//api/v1/flodetect/event/%7Bdevice_id%7D/%7Brequest_id%7D")
              .post(body)
              .addHeader("content-type", "application/json")
              .addHeader("authorization", "Bearer REPLACE_BEARER_TOKEN")
              .build();

            Response response = client.newCall(request).execute();
        - lang: Javascript_xhr
          source: >-
            var data = JSON.stringify({
              "event_chronology": [
                {
                  "fixture": "faucet",
                  "not_label": [
                    0
                  ],
                  "duration": 23,
                  "cluster_means": [
                    0.26727133811566733
                  ],
                  "gpm": 0.6972295776930452,
                  "start": "2019-01-10T04:05:12.025Z",
                  "end": "2019-01-10T04:05:34.025Z",
                  "predicted_fixture": "pool/hot tub",
                  "type": 4,
                  "flow": 0.26727133811566733,
                  "sub_label": {
                    "all": [
                      0
                    ],
                    "individual": 0
                  },
                  "not_sub_label": {
                    "all": [
                      0
                    ],
                    "individual": 0
                  },
                  "feedback": {
                    "case": 0,
                    "correct_fixture": "string"
                  }
                }
              ]
            });


            var xhr = new XMLHttpRequest();

            xhr.withCredentials = true;


            xhr.addEventListener("readystatechange", function () {
              if (this.readyState === this.DONE) {
                console.log(this.responseText);
              }
            });


            xhr.open("POST",
            "https://api.meetflo.com//api/v1/flodetect/event/%7Bdevice_id%7D/%7Brequest_id%7D");

            xhr.setRequestHeader("content-type", "application/json");

            xhr.setRequestHeader("authorization", "Bearer
            REPLACE_BEARER_TOKEN");


            xhr.send(data);
        - lang: Node_native
          source: |-
            var http = require("https");

            var options = {
              "method": "POST",
              "hostname": "api.meetflo.com",
              "port": null,
              "path": "//api/v1/flodetect/event/%7Bdevice_id%7D/%7Brequest_id%7D",
              "headers": {
                "content-type": "application/json",
                "authorization": "Bearer REPLACE_BEARER_TOKEN"
              }
            };

            var req = http.request(options, function (res) {
              var chunks = [];

              res.on("data", function (chunk) {
                chunks.push(chunk);
              });

              res.on("end", function () {
                var body = Buffer.concat(chunks);
                console.log(body.toString());
              });
            });

            req.write(JSON.stringify({ event_chronology:
               [ { fixture: 'faucet',
                   not_label: [ 0 ],
                   duration: 23,
                   cluster_means: [ 0.26727133811566733 ],
                   gpm: 0.6972295776930452,
                   start: '2019-01-10T04:05:12.025Z',
                   end: '2019-01-10T04:05:34.025Z',
                   predicted_fixture: 'pool/hot tub',
                   type: 4,
                   flow: 0.26727133811566733,
                   sub_label: { all: [ 0 ], individual: 0 },
                   not_sub_label: { all: [ 0 ], individual: 0 },
                   feedback: { case: 0, correct_fixture: 'string' } } ] }));
            req.end();
        - lang: Python_python3
          source: >-
            import http.client


            conn = http.client.HTTPSConnection("api.meetflo.com")


            payload =
            "{\"event_chronology\":[{\"fixture\":\"faucet\",\"not_label\":[0],\"duration\":23,\"cluster_means\":[0.26727133811566733],\"gpm\":0.6972295776930452,\"start\":\"2019-01-10T04:05:12.025Z\",\"end\":\"2019-01-10T04:05:34.025Z\",\"predicted_fixture\":\"pool/hot
            tub\",\"type\":4,\"flow\":0.26727133811566733,\"sub_label\":{\"all\":[0],\"individual\":0},\"not_sub_label\":{\"all\":[0],\"individual\":0},\"feedback\":{\"case\":0,\"correct_fixture\":\"string\"}}]}"


            headers = {
                'content-type': "application/json",
                'authorization': "Bearer REPLACE_BEARER_TOKEN"
                }

            conn.request("POST",
            "//api/v1/flodetect/event/%7Bdevice_id%7D/%7Brequest_id%7D",
            payload, headers)


            res = conn.getresponse()

            data = res.read()


            print(data.decode("utf-8"))
        - lang: Python_requests
          source: >-
            import requests


            url =
            "https://api.meetflo.com//api/v1/flodetect/event/%7Bdevice_id%7D/%7Brequest_id%7D"


            payload =
            "{\"event_chronology\":[{\"fixture\":\"faucet\",\"not_label\":[0],\"duration\":23,\"cluster_means\":[0.26727133811566733],\"gpm\":0.6972295776930452,\"start\":\"2019-01-10T04:05:12.025Z\",\"end\":\"2019-01-10T04:05:34.025Z\",\"predicted_fixture\":\"pool/hot
            tub\",\"type\":4,\"flow\":0.26727133811566733,\"sub_label\":{\"all\":[0],\"individual\":0},\"not_sub_label\":{\"all\":[0],\"individual\":0},\"feedback\":{\"case\":0,\"correct_fixture\":\"string\"}}]}"

            headers = {
                'content-type': "application/json",
                'authorization': "Bearer REPLACE_BEARER_TOKEN"
                }

            response = requests.request("POST", url, data=payload,
            headers=headers)


            print(response.text)
        - lang: Shell_curl
          source: |-
            curl --request POST \
              --url https://api.meetflo.com//api/v1/flodetect/event/%7Bdevice_id%7D/%7Brequest_id%7D \
              --header 'authorization: Bearer REPLACE_BEARER_TOKEN' \
              --header 'content-type: application/json' \
              --data '{"event_chronology":[{"fixture":"faucet","not_label":[0],"duration":23,"cluster_means":[0.26727133811566733],"gpm":0.6972295776930452,"start":"2019-01-10T04:05:12.025Z","end":"2019-01-10T04:05:34.025Z","predicted_fixture":"pool/hot tub","type":4,"flow":0.26727133811566733,"sub_label":{"all":[0],"individual":0},"not_sub_label":{"all":[0],"individual":0},"feedback":{"case":0,"correct_fixture":"string"}}]}'
    get:
      operationId: getFlowEvents
      summary: Get Flow Events
      description: >-
        Retrieves a page of flow events for a given device id and computation
        request ID. Results are returned in either descending (by default) or
        ascending order according to the start property of the FlowEvent object.
        Retrieve the next page by providing the start property value of the last
        object in the response array to the ?start querystring parameter.
      security:
        - OAuth2:
            - user
      tags:
        - Flo Detect
      parameters:
        - name: device_id
          in: path
          description: Device ID of the device for which the computation was performed
          required: true
          schema:
            type: string
        - name: request_id
          description: Unique ID of the computation request
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/Uuid'
        - name: start
          in: query
          description: >-
            Date from which to start the next page. This date is exclusive, so
            all records will be guaranteed AFTER (for ascending order) or BEFORE
            (for descending order) this date. Leave undefined to retrieve the
            first page.
          required: false
          schema:
            type: string
            format: date-time
        - name: size
          in: query
          description: Number of records to return in page. Recommended < 100.
          required: false
          schema:
            type: integer
        - name: desc
          in: query
          description: >
            Should results be returned in descending date or not. NOTE: This is
            true by default.
          required: false
          schema:
            type: boolean
            default: true
            example: true
      responses:
        '200':
          description: The response body is a JSON array of FlowEvent objects
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/FlowEvent'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '500':
          $ref: '#/components/responses/InternalServerError'
      x-code-samples:
        - lang: Java_okhttp
          source: |-
            OkHttpClient client = new OkHttpClient();

            Request request = new Request.Builder()
              .url("https://api.meetflo.com//api/v1/flodetect/event/%7Bdevice_id%7D/%7Brequest_id%7D?start=SOME_STRING_VALUE&size=SOME_INTEGER_VALUE&desc=SOME_BOOLEAN_VALUE")
              .get()
              .addHeader("authorization", "Bearer REPLACE_BEARER_TOKEN")
              .build();

            Response response = client.newCall(request).execute();
        - lang: Javascript_xhr
          source: >-
            var data = null;


            var xhr = new XMLHttpRequest();

            xhr.withCredentials = true;


            xhr.addEventListener("readystatechange", function () {
              if (this.readyState === this.DONE) {
                console.log(this.responseText);
              }
            });


            xhr.open("GET",
            "https://api.meetflo.com//api/v1/flodetect/event/%7Bdevice_id%7D/%7Brequest_id%7D?start=SOME_STRING_VALUE&size=SOME_INTEGER_VALUE&desc=SOME_BOOLEAN_VALUE");

            xhr.setRequestHeader("authorization", "Bearer
            REPLACE_BEARER_TOKEN");


            xhr.send(data);
        - lang: Node_native
          source: |-
            var http = require("https");

            var options = {
              "method": "GET",
              "hostname": "api.meetflo.com",
              "port": null,
              "path": "//api/v1/flodetect/event/%7Bdevice_id%7D/%7Brequest_id%7D?start=SOME_STRING_VALUE&size=SOME_INTEGER_VALUE&desc=SOME_BOOLEAN_VALUE",
              "headers": {
                "authorization": "Bearer REPLACE_BEARER_TOKEN"
              }
            };

            var req = http.request(options, function (res) {
              var chunks = [];

              res.on("data", function (chunk) {
                chunks.push(chunk);
              });

              res.on("end", function () {
                var body = Buffer.concat(chunks);
                console.log(body.toString());
              });
            });

            req.end();
        - lang: Python_python3
          source: >-
            import http.client


            conn = http.client.HTTPSConnection("api.meetflo.com")


            headers = { 'authorization': "Bearer REPLACE_BEARER_TOKEN" }


            conn.request("GET",
            "//api/v1/flodetect/event/%7Bdevice_id%7D/%7Brequest_id%7D?start=SOME_STRING_VALUE&size=SOME_INTEGER_VALUE&desc=SOME_BOOLEAN_VALUE",
            headers=headers)


            res = conn.getresponse()

            data = res.read()


            print(data.decode("utf-8"))
        - lang: Python_requests
          source: >-
            import requests


            url =
            "https://api.meetflo.com//api/v1/flodetect/event/%7Bdevice_id%7D/%7Brequest_id%7D"


            querystring =
            {"start":"SOME_STRING_VALUE","size":"SOME_INTEGER_VALUE","desc":"SOME_BOOLEAN_VALUE"}


            headers = {'authorization': 'Bearer REPLACE_BEARER_TOKEN'}


            response = requests.request("GET", url, headers=headers,
            params=querystring)


            print(response.text)
        - lang: Shell_curl
          source: |-
            curl --request GET \
              --url 'https://api.meetflo.com//api/v1/flodetect/event/%7Bdevice_id%7D/%7Brequest_id%7D?start=SOME_STRING_VALUE&size=SOME_INTEGER_VALUE&desc=SOME_BOOLEAN_VALUE' \
              --header 'authorization: Bearer REPLACE_BEARER_TOKEN'
  '/api/v1/flodetect/event/{device_id}/{request_id}/{start}/feedback':
    post:
      operationId: putFeedbackForFlowEvent
      summary: Put Feedback For FlowEvent
      description: Submit feedback for a specific FlowEvent
      tags:
        - Flo Detect
      parameters:
        - name: device_id
          in: path
          description: Device ID of the device for which the computation was performed
          required: true
          schema:
            type: string
        - name: request_id
          in: path
          description: Unique ID of the computation request
          required: true
          schema:
            $ref: '#/components/schemas/Uuid'
        - name: start
          in: path
          description: >-
            start property of FlowEvent record to be modified as URI encoded
            string
          required: true
          schema:
            type: string
      responses:
        '200':
          description: >-
            Response will be the FlowEvent record updated with the submitted
            feedback.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FlowEvent'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '500':
          $ref: '#/components/responses/InternalServerError'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Feedback'
        description: Feedback
        required: true
      x-code-samples:
        - lang: Java_okhttp
          source: >-
            OkHttpClient client = new OkHttpClient();


            MediaType mediaType = MediaType.parse("application/json");

            RequestBody body = RequestBody.create(mediaType,
            "{\"case\":0,\"correct_fixture\":\"string\"}");

            Request request = new Request.Builder()
              .url("https://api.meetflo.com//api/v1/flodetect/event/%7Bdevice_id%7D/%7Brequest_id%7D/%7Bstart%7D/feedback")
              .post(body)
              .addHeader("content-type", "application/json")
              .build();

            Response response = client.newCall(request).execute();
        - lang: Javascript_xhr
          source: >-
            var data = JSON.stringify({
              "case": 0,
              "correct_fixture": "string"
            });


            var xhr = new XMLHttpRequest();

            xhr.withCredentials = true;


            xhr.addEventListener("readystatechange", function () {
              if (this.readyState === this.DONE) {
                console.log(this.responseText);
              }
            });


            xhr.open("POST",
            "https://api.meetflo.com//api/v1/flodetect/event/%7Bdevice_id%7D/%7Brequest_id%7D/%7Bstart%7D/feedback");

            xhr.setRequestHeader("content-type", "application/json");


            xhr.send(data);
        - lang: Node_native
          source: |-
            var http = require("https");

            var options = {
              "method": "POST",
              "hostname": "api.meetflo.com",
              "port": null,
              "path": "//api/v1/flodetect/event/%7Bdevice_id%7D/%7Brequest_id%7D/%7Bstart%7D/feedback",
              "headers": {
                "content-type": "application/json"
              }
            };

            var req = http.request(options, function (res) {
              var chunks = [];

              res.on("data", function (chunk) {
                chunks.push(chunk);
              });

              res.on("end", function () {
                var body = Buffer.concat(chunks);
                console.log(body.toString());
              });
            });

            req.write(JSON.stringify({ case: 0, correct_fixture: 'string' }));
            req.end();
        - lang: Python_python3
          source: >-
            import http.client


            conn = http.client.HTTPSConnection("api.meetflo.com")


            payload = "{\"case\":0,\"correct_fixture\":\"string\"}"


            headers = { 'content-type': "application/json" }


            conn.request("POST",
            "//api/v1/flodetect/event/%7Bdevice_id%7D/%7Brequest_id%7D/%7Bstart%7D/feedback",
            payload, headers)


            res = conn.getresponse()

            data = res.read()


            print(data.decode("utf-8"))
        - lang: Python_requests
          source: >-
            import requests


            url =
            "https://api.meetflo.com//api/v1/flodetect/event/%7Bdevice_id%7D/%7Brequest_id%7D/%7Bstart%7D/feedback"


            payload = "{\"case\":0,\"correct_fixture\":\"string\"}"

            headers = {'content-type': 'application/json'}


            response = requests.request("POST", url, data=payload,
            headers=headers)


            print(response.text)
        - lang: Shell_curl
          source: |-
            curl --request POST \
              --url https://api.meetflo.com//api/v1/flodetect/event/%7Bdevice_id%7D/%7Brequest_id%7D/%7Bstart%7D/feedback \
              --header 'content-type: application/json' \
              --data '{"case":0,"correct_fixture":"string"}'
  '/api/v1/flodetect/averages/latest/{device_id}/{duration}':
    get:
      operationId: getFloDetectAverages
      summary: Get FloDetect Averages
      security:
        - OAuth2:
            - user
      tags:
        - Flo Detect
      parameters:
        - name: device_id
          in: path
          description: Device ID of the device for which the computation was performed
          required: true
          schema:
            type: string
        - name: duration
          in: path
          description: duration
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                type: object
                properties:
                  averages:
                    type: array
                    description: >-
                      An list of fixtures and their average gallons used and number of events.
                    items:
                      type: object
                      properties:
                        fixture:
                          type: string
                          example: faucet
                          description: Name of fixture
                        gallons:
                          type: number
                          format: float
                          example: 19.6176
                          description: Average gallons consumed
                        num_events:
                          type: integer
                          format: int32
                          example: 2
                          description: Average number of events
                  device_id:
                    type: string
                    example: ffffffffffff
                    description: Device ID for which the averages should be retrieved
                  start_date:
                    type: string
                    format: date-time
                    example: '2019-01-10T04:05:12.025Z'
                    description: Beginning of the date range that was averaged
                  end_date:
                    type: string
                    format: date-time
                    example: '2019-01-10T04:05:12.025Z'
                    description: End of the date range that was averaged
        '404':
          $ref: '#/components/responses/NotFoundError'
        '500':
          $ref: '#/components/responses/InternalServerError'
      x-code-samples:
        - lang: Java_okhttp
          source: |-
            OkHttpClient client = new OkHttpClient();

            Request request = new Request.Builder()
              .url("https://api.meetflo.com//api/v1/flodetect/averages/latest/%7Bdevice_id%7D/%7Bduration%7D")
              .get()
              .addHeader("authorization", "Bearer REPLACE_BEARER_TOKEN")
              .build();

            Response response = client.newCall(request).execute();
        - lang: Javascript_xhr
          source: >-
            var data = null;


            var xhr = new XMLHttpRequest();

            xhr.withCredentials = true;


            xhr.addEventListener("readystatechange", function () {
              if (this.readyState === this.DONE) {
                console.log(this.responseText);
              }
            });


            xhr.open("GET",
            "https://api.meetflo.com//api/v1/flodetect/averages/latest/%7Bdevice_id%7D/%7Bduration%7D");

            xhr.setRequestHeader("authorization", "Bearer
            REPLACE_BEARER_TOKEN");


            xhr.send(data);
        - lang: Node_native
          source: |-
            var http = require("https");

            var options = {
              "method": "GET",
              "hostname": "api.meetflo.com",
              "port": null,
              "path": "//api/v1/flodetect/averages/latest/%7Bdevice_id%7D/%7Bduration%7D",
              "headers": {
                "authorization": "Bearer REPLACE_BEARER_TOKEN"
              }
            };

            var req = http.request(options, function (res) {
              var chunks = [];

              res.on("data", function (chunk) {
                chunks.push(chunk);
              });

              res.on("end", function () {
                var body = Buffer.concat(chunks);
                console.log(body.toString());
              });
            });

            req.end();
        - lang: Python_python3
          source: >-
            import http.client


            conn = http.client.HTTPSConnection("api.meetflo.com")


            headers = { 'authorization': "Bearer REPLACE_BEARER_TOKEN" }


            conn.request("GET",
            "//api/v1/flodetect/averages/latest/%7Bdevice_id%7D/%7Bduration%7D",
            headers=headers)


            res = conn.getresponse()

            data = res.read()


            print(data.decode("utf-8"))
        - lang: Python_requests
          source: >-
            import requests


            url =
            "https://api.meetflo.com//api/v1/flodetect/averages/latest/%7Bdevice_id%7D/%7Bduration%7D"


            headers = {'authorization': 'Bearer REPLACE_BEARER_TOKEN'}


            response = requests.request("GET", url, headers=headers)


            print(response.text)
        - lang: Shell_curl
          source: |-
            curl --request GET \
              --url https://api.meetflo.com//api/v1/flodetect/averages/latest/%7Bdevice_id%7D/%7Bduration%7D \
              --header 'authorization: Bearer REPLACE_BEARER_TOKEN'





