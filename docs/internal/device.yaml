paths:
  /api/v2/devices/pair/init:
    post:
      summary: Begins pairing process by returning device pairing data from QR code contents
      tags:
        - Devices
        - Pairing
      produces:
        - application/json
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                data:
                  oneOf:
                    - type: object
                      properties:
                        i:
                          type: string
                          format: uuid
                        e:
                          type: string
                          format: uuid
                    - type: string
      responses:
        200:
          description: Pairing data
          content:
            application/json:
              schema:
                type: object
                required:
                  - id
                  - ap_name
                  - device_id
                  - login_token
                  - client_cert
                  - client_key
                  - server_cert
                  - websocket_key
                properties:
                  id:
                    type: string
                    format: uuid
                  ap_name:
                    type: string
                  ap_password:
                    type: string
                  device_id:
                    type: string
                  login_token:
                    type: string
                  client_cert:
                    type: string
                  client_key:
                    type: string
                  server_cert:
                    type: string
                  websocket_cert:
                    type: string
                  websocket_cert_der:
                    type: string
                  websocket_key:
                    type: string
        400:
          description: Invalid request body
        409:
          description: Device already paired
  /api/v2/devices/pair/complete:
    post:
      summary: Completes the pairing process, adding the device to the location and putting it into forced sleep
      tags:
        - Devices
        - Pairing
      produces:
        - application/json
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - macAddress
                - location
                - deviceType
                - deviceModel
              properties:
                macAddress:
                  type: string
                nickname:
                  type: string
                location:
                  type: object
                  required:
                    - id
                  properties:
                    id:
                      type: string
                      format: uuid
                deviceType:
                  type: string
                deviceModel:
                  type: string
      responses:
        200:
          description: A Device with the specified MAC address or an empty object if not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Device'
        400:
          description: Invalid request body
        409:
          description: Device already paired
  /api/v2/devices:
    get:
      summary: Retrieves a Device by MAC address.
      tags:
        - Devices
      produces:
        - application/json
      parameters:
        - in: query
          name: macAddress
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/ExpandParam'
      responses:
        200:
          description: A Device with the specified MAC address or an empty object if not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Device'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        403:
          $ref: '#/components/responses/ForbiddenError'

  /api/v2/devices/{id}:
    parameters:
      - in: path
        name: id
        required: true
        schema:
          type: string
          format: uuid
        description: Device ID
    get:
      summary: Retrieves a Device by ID.
      tags:
        - Devices
      produces:
        - application/json
      parameters:
        - $ref: '#/components/parameters/ExpandParam'
      responses:
        200:
          description: A Device with the specified ID or an empty object if not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Device'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        403:
          $ref: '#/components/responses/ForbiddenError'

    delete:
      summary: Deletes a Device by ID.
      tags:
        - Devices
      produces:
        - application/json
      responses:
        200:
          description: The Device was successfully deleted.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
        204:
          description: A Device with the specified ID was not found.
        401:
          $ref: '#/components/responses/UnauthorizedError'
        403:
          $ref: '#/components/responses/ForbiddenError'

    post:
      summary: Updates a Device by ID (partially).
      tags:
        - Devices
      produces:
        - application/json
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeviceMutable'
      responses:
        200:
          description: The Device was successfully updated.
          schema:
            $ref: '#/components/schemas/Device'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        403:
          $ref: '#/components/responses/ForbiddenError'
        409:
          description: A Device with the specified ID was not found.
          schema:
            $ref: '#/components/schemas/Error'

  /api/v2/devices/{id}/fwproperties:
    parameters:
      - in: path
        name: id
        required: true
        schema:
          type: string
          format: uuid
        description: Device ID
    post:
      summary: Updates Device Firmware Properties by ID.
      tags:
        - Devices
      produces:
        - application/json
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
      responses:
        200:
          description: The Device Firmware Properties were successfully updated.
        401:
          $ref: '#/components/responses/UnauthorizedError'
        403:
          $ref: '#/components/responses/ForbiddenError'

  /api/v2/devices/{id}/systemMode:
    parameters:
      - in: path
        name: id
        required: true
        schema:
          type: string
          format: uuid
        description: Device ID
    post:
      summary: Sends directive to change device system mode
      tags:
        - Devices
        - System Mode
      produces:
        application/json
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - target
              properties:
                target:
                  $ref: '#/components/schemas/SystemMode'
                isLocked:
                  type: boolean
                revertMode:
                  $ref: '#/components/schemas/SystemMode'
                revertMinutes:
                  type: number
      responses:
        202:
          description: Directive sent
          schema:
            $ref: '#/components/schemas/Device'
        400:
          description: Invalid request body
        409:
          description: Device system mode is locked and cannot be changed

  /api/v2/devices/{id}/reset:
    parameters:
      - in: path
        name: id
        required: true
        schema:
          type: string
          format: uuid
        description: Device ID
    post:
      summary: Sends directive to reset the device according to the given target.
      tags:
        - Devices
      produces:
        - application/json
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - target
              properties:
                target:
                  type: string
                  enum:
                    - power
      responses:
        202:
          description: Directive sent.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
        400:
          description: Invalid request body
        401:
          $ref: '#/components/responses/UnauthorizedError'
        403:
          $ref: '#/components/responses/ForbiddenError'

  /api/v2/devices/{id}/healthTest/run:
    parameters:
      - in: path
        name: id
        required: true
        schema:
          type: string
          format: uuid
        description: Device ID
    post:
      summary: Sends directive to run a Health Test.
      tags:
        - Devices
      produces:
        - application/json
      responses:
        202:
          description: Directive sent.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        403:
          $ref: '#/components/responses/ForbiddenError'
        409:
          description: A Device with the specified ID was not found.
          schema:
            $ref: '#/components/schemas/Error'

  /api/v2/devices/{id}/healthTest:
    parameters:
      - in: path
        name: id
        required: true
        schema:
          type: string
          format: uuid
        description: Device ID
    get:
      summary: Retrieves latest Health Test result.
      tags:
        - Devices
      produces:
        - application/json
      responses:
        200:
          description: The latest Health Test result or an empty object if there is none.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthTest'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        403:
          $ref: '#/components/responses/ForbiddenError'
        409:
          description: A Device with the specified ID was not found.
          schema:
            $ref: '#/components/schemas/Error'

components:
  schemas:
    DeviceMutable:
      type: object
      properties:
        prvInstallation:
          type: string
        irrigationType:
          $ref: '#/components/schemas/IrrigationType'
        installationPoint:
          type: string
        nickname:
          type: string
        valve:
          type: object
          properties:
            target:
              type: string
              enum:
                - open
                - closed

    IrrigationType:
      type: string
      enum:
        - none
        - sprinklers
        - drip

    Device:
      allOf:
        - $ref: '#/components/schemas/DeviceMutable'
        - $ref: '#/components/schemas/Timestamped'
        - $ref: '#/components/schemas/Notifications'
        - type: object
          properties:
            id:
              type: string
              format: uuid
            macAddress:
              type: string
            location:
              $ref: '#/components/schemas/LocationExpandable'
            deviceType:
              type: string
            deviceModel:
              type: string
            isConnected:
              type: boolean
            lastHeardFromTime:
              type: string
              format: date-time
            fwVersion:
              type: string
            fwProperties:
              type: object
            irrigationType:
              $ref: '#/components/schemas/IrrigationType'
            hardwareThresholds:
              type: object
              properties:
                gpm:
                  $ref: '#/components/schemas/HardwareThresholds'
                psi:
                  $ref: '#/components/schemas/HardwareThresholds'
                temp:
                  $ref: '#/components/schemas/HardwareThresholds'
            telemetry:
              type: object
              properties:
                current:
                  type: object
                  properties:
                    gpm:
                      type: number
                    psi:
                      type: number
                    tempF:
                      type: number
                    updated:
                      type: string
                      format: date-time
            connectivity:
              type: object
              properties:
                rssi:
                  type: string
            systemMode:
              type: object
              properties:
                target:
                  $ref: '#/components/schemas/SystemMode'
                shouldInhert:
                  type: boolean
                revertMinutes:
                  type: number
                revertMode:
                  $ref: '#/components/schemas/SystemMode'
                revertScheduledAt:
                  type: string
                  format: date-time
                lastKnown:
                  $ref: '#/components/schemas/SystemMode'
            valve:
              type: object
              properties:
                target:
                  type: string
                  enum:
                    - open
                    - closed
                lastKnown:
                  type: string
                  enum:
                    - open
                    - closed
                    - in_transition
            irrigationSchedule:
              type: object
              properties:
                computed:
                  type: object
                  properties:
                    status:
                      type: string
                    times:
                      type: array
                      items:
                        type: array
                        items:
                          type: string
                          pattern: '^\d{2}:\d{2}:\d{2}$'
                isEnabled:
                  type: boolean
                updatedAt:
                  type: string
                  format: date-time
            installStatus:
              type: object
              properties:
                isInstalled:
                  type: boolean
            pairingData:
              type: object
              properties:
                apName:
                  type: string
                loginToken:
                  type: string
                clientCert:
                  type: string
                clientKey:
                  type: string
                serverCert:
                  type: string
                websocketCert:
                  type: string
                websocketCertDer:
                  type: string
                websocketKey:
                  type: string
            serialNumber:
              type: string
    DeviceExpandable:
      oneOf:
        - type: object
          properties:
            id:
              type: string
              format: uuid
        - $ref: '#/components/schemas/Device'

    SystemMode:
      type: string
      enum:
        - home
        - away
        - sleep

    HardwareThresholds:
      type: object
      properties:
        okMin:
          type: number
        okMax:
          type: number
        minValue:
          type: number
        maxValue:
          type: number

    HealthTest:
      type: object
      properties:
        roundId:
          type: string
          format: uuid
        deviceId:
          type: string
          format: uuid
        status:
          type: string
          enum:
            - pending
            - running
            - completed
            - cancelled
            - timeout
          description: >
            Health Test Status:
              * `pending` - Health test request was initiated and the device has not responded yet
              * `running` - Health test is running
              * `completed` - Health test completed
              * `cancelled` - Health test was cancelled either by the device or user. Check results
              * `timeout` - Health test timed out. Device did not respond in time
        type:
          type: string
          enum:
            - auto
            - manual
          description: >
            Health Test Type:
              * `auto` - Initiated by a schedule or device
              * `manual` - Initiated by user or admin
        leakType:
          type: number
        leakLossMinGal:
          type: number
        leakLossMaxGal:
          type: number
        startPressure:
          type: number
        endPressure:
          type: number
        startRawPayload:
          type: object
        endRawPayload:
          type: object
        created:
          type: string
          format: date-time
        updated:
          type: string
          format: date-time
        startDate:
          type: string
          format: date-time
        endDate:
          type: string
          format: date-time
