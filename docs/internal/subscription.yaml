paths:
  /api/v2/subscriptions:
    post:
      summary: Creates a Subscription.
      tags:
        - Subscriptions
      produces:
        - application/json
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SubscriptionCreate'
      responses:
        201:
          description: The newly created Subscription.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Subscription'
        400:
          description: |
            This error can happen if:
              - The User is not the Account Owner
              - A Subscription already exists for the given Location
          schema:
            $ref: '#/components/schemas/Error'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        403:
          $ref: '#/components/responses/ForbiddenError'
        409:
          description: |
            This error can happen if:
              - A User with the specified ID was not found
              - A Location with the specified ID was not found
          schema:
            $ref: '#/components/schemas/Error'

  /api/v2/subscriptions/{id}:
    parameters:
      - in: path
        name: id
        required: true
        schema:
          type: string
          format: uuid
        description: Subscription ID

    get:
      summary: Retrieves a Subscription by ID.
      tags:
        - Subscriptions
      produces:
        - application/json
      parameters:
        - $ref: '#/components/parameters/ExpandParam'
      responses:
        200:
          description: A Subscription with the specified ID or an empty object if not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Subscription'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        403:
          $ref: '#/components/responses/ForbiddenError'
        404:
          $ref: '#/components/responses/NotFoundError'

    delete:
      summary: Cancels a Subscription by ID. If cancelImmediately is set to true, then the subscription will be terminated immediately before the end of the billing period. If it is set to false, then it will defer to the end of the billing period. If left undefined, the default behavior is to cancel immediately for trialing or past due subscriptions, but to defer cancellation for active subscriptions.
      tags:
        - Subscriptions
      produces:
        - application/json
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              properties:
                cancellationReason:
                  type: string
                cancelImmediately:
                  type: boolean
      responses:
        200:
          description: The Subscription was successfully canceled.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
        204:
          description: A Subscription with the specified ID was not found.
        401:
          $ref: '#/components/responses/UnauthorizedError'
        403:
          $ref: '#/components/responses/ForbiddenError'
  /api/v2/subscriptions/payment:
    get:
      parameters:
        - in: query
          required: true
          name: userId
          schema:
            type: string
            format: uuid
          description: User ID
      summary: Retrieves the payment sources (credit cards) on file for a user
      tags:
        - Subscriptions
      produces: 
        application/json
      responses:
        200: 
          description: Payment sources (credit cards) on file for a user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentSources'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        403:
          $ref: '#/components/responses/ForbiddenError'
        404:
          $ref: '#/components/responses/NotFoundError'
    post:
      summary: Update default payment source for a user
      tags:
        - Subscriptions
      produces:
        application/json
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                userId:
                  type: string
                  format: uuid
                provider:
                  type: object
                  properties:
                    name:
                      type: string
                      enum:
                        - stripe
                    token:
                      type: string
      responses:
        200: 
          description: Payment source updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentSources'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        403:
          $ref: '#/components/responses/ForbiddenError'
        404:
          $ref: '#/components/responses/NotFoundError'


components:
  schemas:
    SubscriptionPlan:
      type: object
      properties:
        id:
          type: string
        features:
          type: array
          items:
            type: string
        monthlyCost:
          type: number
    SubscriptionCreate:
      type: object
      properties:
        user:
          type: object
          properties:
            id:
              type: string
              format: uuid
        location:
          type: object
          properties:
            id:
              type: string
              format: uuid
        isActive:
          type: boolean
        plan:
          type: object
          properties:
            id:
              type: string
        sourceId:
          type: string
        provider:
          type: object
          properties:
            name:
              type: string
              enum:
                - stripe
            token:
              type: string
            couponId:
              type: string
    SubscriptionPlanExpandable:
      oneOf:
        - type: object
          properties:
            id:
              type: string
              format: uuid
        - $ref: '#/components/schemas/SubscriptionPlan'
    Subscription:
      allOf:
        - type: object
          properties:
            id:
              type: string
              format: uuid
            plan:
              $ref: '#/components/schemas/SubscriptionPlanExpandable'
            location:
              $ref: '#/components/schemas/LocationExpandable'
            sourceId:
              type: string
        - $ref: '#/components/schemas/Timestamped'
    SubscriptionExpandable:
      type: object
      required:
        - id
        - provider
      properties: 
        id: 
          type: string
          format: uuid
        sourceId: 
          type: string
        plan:
          $ref: '#/components/schemas/SubscriptionPlanExpandable'
        location:
          $ref: '#/components/schemas/LocationExpandable'
        provider:
          type: object
          required: 
            - isActive
          properties:
            name: 
              type: string
            isActive: 
              type: boolean
    PaymentSources:
      type: object
      properties:
        items:
          type: array
          items:
            type: object
            properties:
              last4: 
                type: string
              expMonth: 
                type: number
              expYear:
                type: number
              brand:
                type: string
              isDefault:
                type: boolean



