paths:
  /api/v2/users/password/request-reset:
    post:
      summary: Request password reset
      tags:
        - Password Reset
      produces:
        - application/json
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
      responses:
        202:
          description: If user with given email exists, password reset email will be sent
        400:
          description: Invalid request body
  /api/v2/users/{id}/password:
    parameters:
      - in: path
        name: id
        required: true
        schema:
          type: string
          format: uuid
        description: User ID
    post:
      summary: Change User's password by ID
      tags:
        - Password Reset
      produces:
        - application/json
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                oldPassword:
                  type: string
                newPassword:
                  type: string
      responses:
        200:
          description: Password was successfully changed
        400:
          description: Invalid request body
  /api/v2/users/register:
    post:
      summary: Begins registration for a new user and account. Confirms the user's acceptance of the Terms of Service and sends a verification email to complete the registration process.
      tags:
        - User Registration
      produces:
        - application/json
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRegistration'
      responses:
        201:
          description: Verification email sent
        400:
          description: Invalid request body data
        409:
          description: Email already registered
    get:
      summary: Checks if a given email is available, already registered, or has a verification pending
      tags:
        - User Registration
      produces:
        - application/json
      parameters:
        - in: query
          name: email
          required: true
          schema:
            type: string
          description: Email to check for availablity
      responses:
        200:
          description: Registration status
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmailAvailability'
  /api/v2/users/register/resend:
    post:
      summary: Resend the verification email
      tags:
        - User Registration
      produces:
        - application/json
      requestBody:
        requestBody: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
      responses:
        202:
          description: Verification email resent
        400:
          description: Invalid request body data
        404:
          description: Pending registration not found for given email
  /api/v2/users/register/verify:
    post:
      summary: Complete email verification, create user, and retrieve tokens
      tags:
        - User Registration
      produces:
        - application/json
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                clientId:
                  type: string
                clientSecret:
                  type: string
                token:
                  type: string
      responses:
        201:
          description: 'User created and tokens returned'
          content:
            application/json:
              schema:
                type: object
                properties:
                  access_token:
                    type: string
                  refresh_token:
                    type: string
                  expires_in:
                    type: number
                  user_id:
                    type: string
                    format: uuid
                  expires_at:
                    type: string
                    format: date-time
                  issued_at:
                    type: string
                    format: date-time
        400:
          description: 'Invalid request body, invalid token, or expired token'
        401:
          description: 'Invalid client'
        403:
          description: 'Unauthorized client'
  /api/v2/users/{id}:
    parameters:
      - in: path
        name: id
        required: true
        schema:
          type: string
          format: uuid
        description: User ID

    get:
      summary: Retrieves a User by ID.
      tags:
        - Users
      produces:
        - application/json
      parameters:
        - $ref: '#/components/parameters/ExpandParam'
      responses:
        200:
          description: A User with the specified ID or an empty object if not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        403:
          $ref: '#/components/responses/ForbiddenError'

    delete:
      summary: Deletes a User by ID.
      tags:
        - Users
      produces:
        - application/json
      responses:
        200:
          description: The User was successfully deleted.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
        204:
          description: A User with the specified ID was not found.
        400:
          description: The User must not be an Account owner.
          schema:
            $ref: '#/components/schemas/Error'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        403:
          $ref: '#/components/responses/ForbiddenError'

    post:
      summary: Updates a User by ID (partially).
      tags:
        - Users
      produces:
        - application/json
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserMutable'
      responses:
        200:
          description: The User was successfully updated.
          schema:
            $ref: '#/components/schemas/User'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        403:
          $ref: '#/components/responses/ForbiddenError'
        409:
          description: A User with the specified ID was not found.
          schema:
            $ref: '#/components/schemas/Error'

  /api/v2/users/{id}/alarmSettings:
    parameters:
      - in: path
        name: id
        required: true
        schema:
          type: string
          format: uuid
        description: User ID

    post:
      summary: Updates user alarm settings
      tags:
        - Users
      produces:
        - application/json
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                items:
                  type: array
                  items:
                    $ref: '#/components/schemas/DeviceAlarmSettings'

      responses:
        200:
          description: 'User alarm settings were updated'
        400:
          description: 'Invalid request body, invalid token, or expired token'
        401:
          description: 'Invalid client'
        403:
          description: 'Unauthorized client'

components:
  schemas:
    UserRegistration:
      type: object
      properties:
        email:
          type: string
          format: email
        firstName:
          type: string
        lastName:
          type: string
        password:
          type: string
        phone:
          type: string
    EmailAvailability:
      type: object
      properties:
        isPending:
          type: boolean
        isRegistered:
          type: boolean
    UserMutable:
      type: object
      properties:
        firstName:
          type: string
        middleName:
          type: string
        lastName:
          type: string
        prefixName:
          type: string
        suffixName:
          type: string
        unitSystem:
          type: string
        phoneMobile:
          type: string
        locale:
          type: string

    User:
      allOf:
        - $ref: '#/components/schemas/UserMutable'
        - $ref: '#/components/schemas/Timestamped'
        - type: object
          properties:
            id:
              type: string
              format: uuid
            email:
              type: string
              format: email
            isActive:
              type: boolean
            locations:
              type: array
              items:
                $ref: '#/components/schemas/LocationExpandable'
            locationRoles:
              type: array
              items:
                allOf:
                  - type: object
                    properties:
                      locationId:
                        type: string
                        format: uuid
                  - $ref: '#/components/schemas/Roles'
            account:
              $ref: '#/components/schemas/AccountExpandable'
            accountRole:
              allOf:
                - type: object
                  properties:
                    accountId:
                      type: string
                      format: uuid
                - $ref: '#/components/schemas/Roles'
            alarmSettings:
              type: array
              items:
                $ref: '#/components/schemas/DeviceAlarmSettings'

    UserExpandable:
      oneOf:
        - type: object
          properties:
            id:
              type: string
              format: uuid
        - $ref: '#/components/schemas/User'

    DeviceAlarmSettings:
      type: object
      properties:
        deviceId:
          type: string
          format: uuid
        settings:
          type: array
          items:
            $ref: '#/components/schemas/AlarmSettings'

    AlarmSettings:
      type: object
      properties:
        alarmId:
          type: integer
        systemMode:
          type: string
        smsEnabled:
          type: boolean
        emailEnabled:
          type: boolean
        pushEnabled:
          type: boolean
        callEnabled:
          type: boolean