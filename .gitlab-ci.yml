# TODO: Make this file external, downloadable via versioned URL
---
image: registry.gitlab.com/flotechnologies/gitlabci-docker-compose:18.06-fat

services:
  - docker:18.09-dind

stages:
  - build
  - test
  - deploy
  - verify

before_script:
  - export DOCKER_HOST=tcp://localhost:2375
  - export CI_REGISTRY=registry.gitlab.com
  - apk add --no-cache make bash jq gettext # TODO: this should be part of the compose image
  - docker login -u gitlab-ci-token -p $CI_BUILD_TOKEN $CI_REGISTRY
  - |
    if [[ -f Dockerrun.aws.json ]]; then
      sed -i "s/:latest/:${CI_PIPELINE_ID}/g" Dockerrun.aws.json
    fi
  - export CI_REGISTRY_IMAGE="registry.gitlab.com/flotechnologies/flo-public-gateway"

Compile:
  stage: build
  except:
    - tags
  tags:
    - build
  artifacts:
    paths:
      - logs/
      - node_modules/
      - dist
      - /root/.npm/_logs

    expire_in: 1 week
    # Cache modules in between jobs
  cache:
    key: "$CI_PROJECT_NAME-$CI_COMMIT_REF_SLUG"
    paths:
      - .npm/
      - node_modules

  script:
    - make pull
    - make build
    - make audit
    - make push


Sanity:
  stage: test
  allow_failure: true
  artifacts:
    when: always
    paths:
      # Collect logs
      - build.log
      - /root/.npm/_logs
  dependencies:
    - Compile
  script:
    - make pull
    - make test | tee build.log
  tags:
      - test

K8sDev:
  variables:
    AWS_ACCESS_KEY_ID: "${AWS_ACCESS_KEY_ID_DEV}"
    AWS_SECRET_ACCESS_KEY: "${AWS_SECRET_ACCESS_KEY_DEV}"
    KUBERNETES_SERVICE_ACCOUNT_OVERWRITE: tiller
  image: kloiadocker/kloiahelm:0.0.1
  stage: deploy
  dependencies:
    - Compile
  only:
    - dev
    - kloia-helmchart-deployment
  environment:
    name: dev
    url: https://flo-public-gateway.flocloud.co/ping
  script:
    - make environment-dev
    - make deploy-k8s
  tags:
    - dev


Dev:
  variables:
    AWS_ACCESS_KEY_ID: "${AWS_ACCESS_KEY_ID_DEV}"
    AWS_SECRET_ACCESS_KEY: "${AWS_SECRET_ACCESS_KEY_DEV}"
  stage: deploy
  dependencies:
    - Compile
  only:
    - dev
    - kloia-helmchart-deployment
  environment:
    name: dev
    url: https://flo-public-gateway.flocloud.co/ping
  script:
    - make pull
    - make deploy ENV=dev
  tags:
    - kubernetes

K8sProd:
  variables:
    AWS_ACCESS_KEY_ID: "${AWS_ACCESS_KEY_ID_PROD}"
    AWS_SECRET_ACCESS_KEY: "${AWS_SECRET_ACCESS_KEY_PROD}"
  image: kloiadocker/kloiahelm:0.0.1
  stage: deploy
  dependencies:
    - Compile
  only:
    - prop_prod_deployment
    - master
  environment:
    name: prod
    url: https://flo-public-gateway.flosecurecloud.co/ping
  script:
    - make environment-prod
    - make deploy-k8s
  tags:
    - deploy-prod

Prod:
  variables:
    AWS_ACCESS_KEY_ID: "${AWS_ACCESS_KEY_ID_PROD}"
    AWS_SECRET_ACCESS_KEY: "${AWS_SECRET_ACCESS_KEY_PROD}"
  stage: deploy
  dependencies:
    - Compile
  only:
    - master
  environment:
    name: prod
    url: https://flo-public-gateway.flosecurecloud.co/ping
  script:
    - make pull
    - make deploy ENV=prod
  tags:
    - kubernetes

RunscopeProd:
  variables:
    RUNSCOPE_URL: "https://api.runscope.com/radar/68e4a198-9132-4560-bb08-a2e746c8c3e6/trigger?runscope_environment=755b5795-c9d2-464f-9372-d2aaa106e5cc"
    AWS_ACCESS_KEY_ID: "${AWS_ACCESS_KEY_ID_PROD}"
    AWS_SECRET_ACCESS_KEY: "${AWS_SECRET_ACCESS_KEY_PROD}"
  stage: verify
  dependencies:
    - Compile
  only:
    - prep_prod_deployment
    - master
  environment:
    name: prod
    url: https://flo-public-gateway.flosecurecloud.co/ping
  script:
    - curl -i "${RUNSCOPE_URL}" 1>/dev/null
  tags:
    - kubernetes
